{
    "docs": [
        {
            "location": "/",
            "text": "Programming Notes\n\n\nProgramming notes, snipets and examples in one place.\n\n\nGeneral\n\n\n\n\nWeb Dev Resources\n\n\nGithub Markdown\n\n\nCrontab\n\n\nKeep SSH sessions running\n\n\nWindows batch scripts\n\n\nCommand Line Cheat Sheet\n\n\nDevelopment environments\n\n\nGit\n cheat sheets \nhere\n and \nhere\n\n\nHiding Passwords and Secret Keys in Environment Variables\n\n\nInitial server setup with Ubuntu\n\n\nDeploy a Flask app on an Ubuntu VPS\n\n\nDeploy a Django app in an Ubuntu VPS\n\n\n\n\nPython\n\n\n\n\nUseful and common python operations snippets\n\n\nHosting Python scripts online\n\n\n\n\nCore concepts\n\n\n\n\nImports\n\n\nStoring data in dictionaries (JSON and pickle)\n\n\nHandling CSV\n\n\nString formatting\n\n\nargs and kwargs\n\n\nBuilt-in functions\n\n\nClasses\n\n\nImports\n\n\nSlice notation\n\n\n\n\nIntermediate or advanced operations\n\n\n\n\nVirtual Environments\n\n\nMySQL\n\n\nEmails\n\n\nProgress bars\n\n\nMagic methods\n\n\n\n\nExternal libraries\n\n\n\n\nFlask\n\n\nDjango\n\n\nImage manipulation\n\n\nStrava API\n\n\nBeautiful Soup\n\n\n\n\nHTML/CSS\n\n\n\n\nCSS selectors\n\n\n\n\nJavascript\n\n\n\n\nDataTables Library\n\n\nCaching data\n\n\n\n\nThese notes contain excerpts, code snippets and examples from various sources including, but not limited to, Python Docs, The Hitchhiker\u2019s Guide to Python and Stack Overflow users. Sources were not collected as this notes were intended for personal use.",
            "title": "Programming Notes"
        },
        {
            "location": "/#programming-notes",
            "text": "Programming notes, snipets and examples in one place.",
            "title": "Programming Notes"
        },
        {
            "location": "/#general",
            "text": "Web Dev Resources  Github Markdown  Crontab  Keep SSH sessions running  Windows batch scripts  Command Line Cheat Sheet  Development environments  Git  cheat sheets  here  and  here  Hiding Passwords and Secret Keys in Environment Variables  Initial server setup with Ubuntu  Deploy a Flask app on an Ubuntu VPS  Deploy a Django app in an Ubuntu VPS",
            "title": "General"
        },
        {
            "location": "/#python",
            "text": "Useful and common python operations snippets  Hosting Python scripts online",
            "title": "Python"
        },
        {
            "location": "/#core-concepts",
            "text": "Imports  Storing data in dictionaries (JSON and pickle)  Handling CSV  String formatting  args and kwargs  Built-in functions  Classes  Imports  Slice notation",
            "title": "Core concepts"
        },
        {
            "location": "/#intermediate-or-advanced-operations",
            "text": "Virtual Environments  MySQL  Emails  Progress bars  Magic methods",
            "title": "Intermediate or advanced operations"
        },
        {
            "location": "/#external-libraries",
            "text": "Flask  Django  Image manipulation  Strava API  Beautiful Soup",
            "title": "External libraries"
        },
        {
            "location": "/#htmlcss",
            "text": "CSS selectors",
            "title": "HTML/CSS"
        },
        {
            "location": "/#javascript",
            "text": "DataTables Library  Caching data   These notes contain excerpts, code snippets and examples from various sources including, but not limited to, Python Docs, The Hitchhiker\u2019s Guide to Python and Stack Overflow users. Sources were not collected as this notes were intended for personal use.",
            "title": "Javascript"
        },
        {
            "location": "/general/batch-script/",
            "text": "Create a Windows batch script\n\n\nA batch file is a text file with the extension \n.bat\n that contains one or more command line commands to be run consecutively. \n\n\nSome usefull commands:\n\n\n@echo\n - This parameter will allow you to view your working script in the command prompt. This parameter is useful for viewing your working code. If any issues arise from the batch file, you will be able to view the issues associated with your script using the echo function. Adding a following off to this parameter will allow you to quickly close your script after it has finished.\n\n\ntitle\n - This will provide a title for your batch script in your Command Prompt window.\n\n\ncls\n - Clears your command prompt, best used when extraneous code can make what you\u2019re accessing had to find.\n\n\nrem\n OR \n::\n - Shorthand for remark. Rem statements are not entered into your code. Instead, they are used to explain and give information regarding the code.\n\n\n%%a\n - Each file in the folder.\n\n\n(\u201c.\\\u201d)\n - The root folder. When using the command prompt, one must direct the prompt to a particular directory before changing a files name, deleting a file, and so on. With batch files, you only need to paste your .bat file into the directory of your choosing.\n\n\npause\n - Allows a break in the logical chain of your .bat file. This allows for users to read over command lines before proceeding with the code. The phrase \u201cPress any key to continue\u2026\u201d will denote a pause.\n\n\nstart \u201c\u201d [website]\n - Will head to a website of your choice using your default web browser.\n\n\nA complete list can be found \nhere\n.\n\n\nUseful batch files:\n\n\nStart Flask server\n\n\nThe following script starts a Flask development server provided the batch file is located in the project root directory.\n\n\necho off\ncd %localhost%\ncall venv\\Scripts\\activate.bat\nstart python dashboard\\__init__.py\npause",
            "title": "Create a Windows batch script"
        },
        {
            "location": "/general/batch-script/#create-a-windows-batch-script",
            "text": "A batch file is a text file with the extension  .bat  that contains one or more command line commands to be run consecutively.",
            "title": "Create a Windows batch script"
        },
        {
            "location": "/general/batch-script/#some-usefull-commands",
            "text": "@echo  - This parameter will allow you to view your working script in the command prompt. This parameter is useful for viewing your working code. If any issues arise from the batch file, you will be able to view the issues associated with your script using the echo function. Adding a following off to this parameter will allow you to quickly close your script after it has finished.  title  - This will provide a title for your batch script in your Command Prompt window.  cls  - Clears your command prompt, best used when extraneous code can make what you\u2019re accessing had to find.  rem  OR  ::  - Shorthand for remark. Rem statements are not entered into your code. Instead, they are used to explain and give information regarding the code.  %%a  - Each file in the folder.  (\u201c.\\\u201d)  - The root folder. When using the command prompt, one must direct the prompt to a particular directory before changing a files name, deleting a file, and so on. With batch files, you only need to paste your .bat file into the directory of your choosing.  pause  - Allows a break in the logical chain of your .bat file. This allows for users to read over command lines before proceeding with the code. The phrase \u201cPress any key to continue\u2026\u201d will denote a pause.  start \u201c\u201d [website]  - Will head to a website of your choice using your default web browser.  A complete list can be found  here .",
            "title": "Some usefull commands:"
        },
        {
            "location": "/general/batch-script/#useful-batch-files",
            "text": "",
            "title": "Useful batch files:"
        },
        {
            "location": "/general/batch-script/#start-flask-server",
            "text": "The following script starts a Flask development server provided the batch file is located in the project root directory.  echo off\ncd %localhost%\ncall venv\\Scripts\\activate.bat\nstart python dashboard\\__init__.py\npause",
            "title": "Start Flask server"
        },
        {
            "location": "/general/crontab/",
            "text": "Linux Crontab\n\n\nTo view currently active crontab entries: \n$ sudo crontab -l\n\n\nTo enter the edit the crontab enter the following command in the terminal: \n$ sudo crontab -e\n\n\nNote:\n Don't use \nsudo\n in a cron job. Instead edit root's crontab instead of your own, e.g. \nsudo crontab -e\n and then enter commands without \nsudo\n.\n\n\nAt the bottom of the file enter one line for each task in the following format:\n\n\nMinute   Hour   Day of Month       Month          Day of Week        Command    \n(0-59)  (0-23)     (1-31)    (1-12 or Jan-Dec)  (0-6 or Sun-Sat)               \n\n\n\n\nThe command must use a complete link. Instead of the first five fields, one of eight special strings may appear:\n\n\n\n\n\n\n\n\nstring\n\n\nmeaning\n\n\n\n\n\n\n\n\n\n\n@reboot\n\n\nRun once, at startup.\n\n\n\n\n\n\n@yearly\n\n\nRun once a year, \"0 0 1 1 *\".\n\n\n\n\n\n\n@annually\n\n\n(same as @yearly)\n\n\n\n\n\n\n@monthly\n\n\nRun once a month, \"0 0 1 * *\".\n\n\n\n\n\n\n@weekly\n\n\nRun once a week, \"0 0 * * 0\".\n\n\n\n\n\n\n@daily\n\n\nRun once a day, \"0 0 * \n \n\".\n\n\n\n\n\n\n@midnight\n\n\n(same as @daily)\n\n\n\n\n\n\n@hourly\n\n\nRun once an hour, \"0 * \n * \n\".\n\n\n\n\n\n\n\n\nExample 1: Run a python script every day a 16:15\n\n\n15 16 * * * sudo python /home/pi/projects/script1.py\n\n\n\n\nExample 2: Run a python script every five days a 18:30\n\n\n30 18 */5 * * sudo python /home/pi/projects/script1.py\n\n\n\n\nHelpfull links:\n\n\nhttps://crontab.guru",
            "title": "Linux Crontab"
        },
        {
            "location": "/general/crontab/#linux-crontab",
            "text": "To view currently active crontab entries:  $ sudo crontab -l  To enter the edit the crontab enter the following command in the terminal:  $ sudo crontab -e  Note:  Don't use  sudo  in a cron job. Instead edit root's crontab instead of your own, e.g.  sudo crontab -e  and then enter commands without  sudo .  At the bottom of the file enter one line for each task in the following format:  Minute   Hour   Day of Month       Month          Day of Week        Command    \n(0-59)  (0-23)     (1-31)    (1-12 or Jan-Dec)  (0-6 or Sun-Sat)                 The command must use a complete link. Instead of the first five fields, one of eight special strings may appear:     string  meaning      @reboot  Run once, at startup.    @yearly  Run once a year, \"0 0 1 1 *\".    @annually  (same as @yearly)    @monthly  Run once a month, \"0 0 1 * *\".    @weekly  Run once a week, \"0 0 * * 0\".    @daily  Run once a day, \"0 0 *    \".    @midnight  (same as @daily)    @hourly  Run once an hour, \"0 *   *  \".",
            "title": "Linux Crontab"
        },
        {
            "location": "/general/crontab/#example-1-run-a-python-script-every-day-a-1615",
            "text": "15 16 * * * sudo python /home/pi/projects/script1.py",
            "title": "Example 1: Run a python script every day a 16:15"
        },
        {
            "location": "/general/crontab/#example-2-run-a-python-script-every-five-days-a-1830",
            "text": "30 18 */5 * * sudo python /home/pi/projects/script1.py",
            "title": "Example 2: Run a python script every five days a 18:30"
        },
        {
            "location": "/general/crontab/#helpfull-links",
            "text": "https://crontab.guru",
            "title": "Helpfull links:"
        },
        {
            "location": "/general/deploy-django/",
            "text": "Deploy a Django app in an Ubuntu VPS (DigitalOcean)\n\n\nThis guide will demonstrate how to install and configure some components on Ubuntu 16.04 to support and serve Django applications. We will be setting up a PostgreSQL database and configure the Gunicorn application server to interface with our applications. We will then set up Nginx to reverse proxy to Gunicorn, giving us access to its security and performance features to serve our apps.\n\n\n1) Initial Server Setup\n\n\nPerform the initial server setup as detailed \nhere\n.\n\n\n2) Install the Packages from the Ubuntu Repositories\n\n\nWe need to update the local apt package index and then download and install the packages. The packages we install depend on which version of Python your project will use.\n\n\nIf you are using Django with Python 3, type:\n\n\n$ sudo apt-get update\n$ sudo apt-get install python3-pip python3-dev libpq-dev nginx\n\n\n\n\nThis will install pip, the Python development files needed to build Gunicorn later and the Nginx web server.\n\n\n3) Install the Database\n\n\nInstall the database system and the libraries needed to interact with it.\n\n\nFor Postgres:\n\n\n$ sudo apt-get install postgresql postgresql-contrib`\n\n\n\n\nFor MySQL\n\n\n$ sudo apt-get install libmysqlclient-dev\n$ sudo apt-get install mysql-server mysql-client\n\n\n\n\nNow let's create the Database and User but first verify that the MySQL service is running:\n\n\n$ systemctl status mysql.service\n\n\n\n\nIf the output is negative you can run \nsudo systemctl start mysql\n to get \nmysql.service\n started again. Now you can log in with your MySQL credentials using the following command. Where \n-u\n is the flag for declaring your username and \n-p\n is the flag that tells MySQL that this user requires a password:\n\n\n$ sudo mysql -u db_user -p\n\n\n\n\nmysql> SHOW DATABASES;\nmysql> CREATE DATABASE project_db;\nmysql> SHOW DATABASES;\n\n\n\n\nWhenever you'd like to exit MySQL server, press CTRL + D.\n\n\n4) Create a Python Virtual Environment\n\n\n$ sudo -H pip3 install --upgrade pip\n$ sudo -H pip3 install virtualenv\n\n\n\n\n$ mkdir ~/myproject\n$ cd ~/myproject\n$ virtualenv venv\n$ source venv/bin/activate\n\n\n\n\nNote: Regardless of which version of Python you are using, when the virtual environment is activated, you should use the pip command (not pip3).\n\n\nInstall the \nmysqlclient\n library:\n\n\n$ pip install mysqlclient\n\n\n\n\nWith your virtual environment active, install Django and Gunicorn:\n\n\n$ pip install django gunicorn\n\n\n\n\n5) Create Django project\n\n\nSince we already have a project directory, we will tell Django to install the files here. It will create a second level directory with the actual code, which is normal, and place a management script in this directory. The key to this is that we are defining the directory explicitly instead of allowing Django to make decisions relative to our current directory:\n\n\n$ django-admin startproject myproject ~/myproject\n\n\n\n\nAt this point, your project directory (~/myproject in our case) should have the following content:\n\n\n~/myproject/manage.py: A Django project management script.\n~/myproject/myproject/: The Django project package. This should contain the __init__.py, settings.py, urls.py, and wsgi.py files.\n~/myproject/myprojectenv/: The virtual environment directory we created earlier.\n\n\n\n\nGo to the end of the \nsettings.py\n file and add \nSTATIC_ROOT\n as shown below:\n\n\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n\n\n\n\nAdd your server\u2019s IP address between the square brackets and single quotes to the \nALLOWED_HOSTS\n:\n\n\n# The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['your_server_domain_or_IP', 'second_domain_or_IP', . . .]\n\n\n\n\nMigrate the initial database schema to our database using the management script:\n\n\n(venv) $ python ~/myproject/manage.py makemigrations\n(venv) $ python ~/myproject/manage.py migrate\n\n\n\n\nCreate an administrative user for the project by typing:\n\n\n(venv) $ ~/myproject/manage.py createsuperuser\n\n\n\n\nWe can collect all of the static content into the directory location we configured by typing:\n\n\n(venv) $ ~/myproject/manage.py collectstatic\n\n\n\n\nThe static files will then be placed in a directory called static within your project directory.\n\n\nConnect your Django app to MySQL\n\n\nNavigate to the settings.py file and replace the current DATABASES lines with the following. We will configure your database dictionary so that it knows to use MySQL as your database backend and from what file to read your database connection credentials:\n\n\n# Database\n# https://docs.djangoproject.com/en/2.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'OPTIONS': {\n            'read_default_file': '/etc/mysql/my.cnf',\n        },\n    }\n}\n\n\n\n\nNext, let\u2019s edit the config file so that it has your MySQL credentials. Use nano as sudo to edit the file and add the following information:\n\n\n$ sudo nano /etc/mysql/my.cnf\n\n\n\n\n[client]\ndatabase = db_name\nuser = db_user\npassword = db_password\ndefault-character-set = utf8\n\n\n\n\nWhere database name in our case is mysite, your username for the MySQL server is the one you\u2019ve created, and the password is the MySQL server password you\u2019ve created. Also, you\u2019ll notice that utf8 is set as the default encoding, this is a common way to encode unicode data in MySQL. Once the file has been edited, we need to restart MySQL for the changes to take effect.\n\n\n$ systemctl daemon-reload\n$ systemctl restart mysql\n\n\n\n\nPlease note that restarting MySQL takes a few seconds, so please be patient. Now, let's test the MySQL connection to the application. We need to verify that the configurations in Django detect your MySQL server properly. We can do this by simply running the server. If it fails, it means that the connection isn\u2019t working properly. Otherwise, the connection is valid.\n\n\n$ cd ~/mysite/mysite/\n$ python manage.py runserver your-server-ip:8000\n\n\n\n\n6) Setting up Gunicorn's ability to serve the project\n\n\nThe last thing we want to do before leaving our virtual environment is test Gunicorn to make sure that it can serve the application. We can do this by entering our project directory and using gunicorn to load the project's WSGI module:\n\n\n$ cd ~/myproject\n$ gunicorn --bind 0.0.0.0:8000 myproject.wsgi\n\n\n\n\nThis will start Gunicorn on the same interface that the Django development server was running on. You can go back and test the app again. \n\n\nWe passed Gunicorn a module by specifying the relative directory path to Django's wsgi.py file, which is the entry point to our application, using Python's module syntax. Inside of this file, a function called application is defined, which is used to communicate with the application. When you are finished testing, hit CTRL-C in the terminal window to stop Gunicorn. We're now finished configuring our Django application. We can back out of our virtual environment by typing:\n\n\n$ deactivate\n\n\n\n\nCreate and open a systemd service file for Gunicorn with sudo privileges in your text editor:\n\n\n$ sudo nano /etc/systemd/system/gunicorn.service\n\n\n\n\n[Unit]\nDescription=gunicorn daemon\nAfter=network.target\n\n[Service]\nUser=synergix\nGroup=www-data\nWorkingDirectory=/home/synergix/myproject\nExecStart=/home/synergix/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/synergix/myproject/myproject.sock myproject.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n\n\n\n\nWe can now start the Gunicorn service we created and enable it so that it starts at boot:\n\n\n$ sudo systemctl start gunicorn\n$ sudo systemctl enable gunicorn\n\n\n\n\nWe can confirm that the operation was successful by checking for the socket file.\n\n\n$ sudo systemctl status gunicorn\n\n\n\n\nNext, check for the existence of the myproject.sock file within your project directory:\n\n\n$ ls /home/synergix/myproject\n\n\n\n\nIf the systemctl status command indicated that an error occurred or if you do not find the myproject.sock file in the directory, it's an indication that Gunicorn was not able to start correctly. Check the Gunicorn process logs by typing:\n\n\n$ sudo journalctl -u gunicorn\n\n\n\n\n7) Configure Nginx to Proxy Pass to Gunicorn\n\n\nNow that Gunicorn is set up, we need to configure Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginx's sites-available directory:\n\n\n$ sudo nano /etc/nginx/sites-available/myproject\n\n\n\n\nInside, open up a new server block. We will start by specifying that this block should listen on the normal port 80 and that it should respond to our server's domain name or IP address. Next, we will tell Nginx to ignore any problems with finding a favicon. We will also tell it where to find the static assets that we collected in our ~/myproject/static directory. All of these files have a standard URI prefix of \"/static\", so we can create a location block to match those requests. Finally, we'll create a location / {} block to match all other requests. Inside of this location, we'll include the standard proxy_params file included with the Nginx installation and then we will pass the traffic to the socket that our Gunicorn process created:\n\n\nserver {\n    listen 80;\n    server_name server_domain_or_IP;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/sammy/myproject;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/home/sammy/myproject/myproject.sock;\n    }\n}\n\n\n\n\nSave and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled directory:\n\n\n$ sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled\n\n\n\n\nTest your Nginx configuration for syntax errors by typing:\n\n\n$ sudo nginx -t\n\n\n\n\nIf no errors are reported, go ahead and restart Nginx by typing:\n\n\n$ sudo systemctl restart nginx\n\n\n\n\nFinally, we need to open up our firewall to normal traffic on port 80. Since we no longer need access to the development server, we can remove the rule to open port 8000 as well:\n\n\n$ sudo ufw delete allow 8000\n$ sudo ufw allow 'Nginx Full'\n\n\n\n\nYou should now be able to go to your server's domain or IP address to view your application.\n\n\n8) Troubleshooting\n\n\nLogs can help narrow down root causes. Check each of them in turn and look for messages indicating problem areas. The following logs may be helpful:\n\n\n\n\nCheck the Nginx process logs by typing: \nsudo journalctl -u nginx\n\n\nCheck the Nginx access logs by typing: \nsudo less /var/log/nginx/access.log\n\n\nCheck the Nginx error logs by typing: \nsudo less /var/log/nginx/error.log\n\n\nCheck the Gunicorn application logs by typing: \nsudo journalctl -u gunicorn\n\n\n\n\nAs you update your configuration or application, you will likely need to restart the processes to adjust to your changes. If you update your Django application, you can restart the Gunicorn process to pick up the changes by typing:\n\n\n$ sudo systemctl restart gunicorn\n\n\n\n\nIf you change gunicorn systemd service file, reload the daemon and restart the process by typing:\n\n\n$ sudo systemctl daemon-reload\n$ sudo systemctl restart gunicorn\n\n\n\n\nIf you change the Nginx server block configuration, test the configuration and then Nginx by typing:\n\n\n$ sudo nginx -t && sudo systemctl restart nginx\n\n\n\n\nReferences\n\n\n\n\nDigitalOcean - Setup Django, Postgres, nginx and Gunicorn on Ubuntu\n\n\nDigitalOcean - Serve Django with uwsgi and ngix on Ubuntu\n\n\nDigitalOcean - Create Django app and connect to database",
            "title": "Deploy a Django app in an Ubuntu VPS (DigitalOcean)"
        },
        {
            "location": "/general/deploy-django/#deploy-a-django-app-in-an-ubuntu-vps-digitalocean",
            "text": "This guide will demonstrate how to install and configure some components on Ubuntu 16.04 to support and serve Django applications. We will be setting up a PostgreSQL database and configure the Gunicorn application server to interface with our applications. We will then set up Nginx to reverse proxy to Gunicorn, giving us access to its security and performance features to serve our apps.",
            "title": "Deploy a Django app in an Ubuntu VPS (DigitalOcean)"
        },
        {
            "location": "/general/deploy-django/#1-initial-server-setup",
            "text": "Perform the initial server setup as detailed  here .",
            "title": "1) Initial Server Setup"
        },
        {
            "location": "/general/deploy-django/#2-install-the-packages-from-the-ubuntu-repositories",
            "text": "We need to update the local apt package index and then download and install the packages. The packages we install depend on which version of Python your project will use.  If you are using Django with Python 3, type:  $ sudo apt-get update\n$ sudo apt-get install python3-pip python3-dev libpq-dev nginx  This will install pip, the Python development files needed to build Gunicorn later and the Nginx web server.",
            "title": "2) Install the Packages from the Ubuntu Repositories"
        },
        {
            "location": "/general/deploy-django/#3-install-the-database",
            "text": "Install the database system and the libraries needed to interact with it.",
            "title": "3) Install the Database"
        },
        {
            "location": "/general/deploy-django/#for-postgres",
            "text": "$ sudo apt-get install postgresql postgresql-contrib`",
            "title": "For Postgres:"
        },
        {
            "location": "/general/deploy-django/#for-mysql",
            "text": "$ sudo apt-get install libmysqlclient-dev\n$ sudo apt-get install mysql-server mysql-client  Now let's create the Database and User but first verify that the MySQL service is running:  $ systemctl status mysql.service  If the output is negative you can run  sudo systemctl start mysql  to get  mysql.service  started again. Now you can log in with your MySQL credentials using the following command. Where  -u  is the flag for declaring your username and  -p  is the flag that tells MySQL that this user requires a password:  $ sudo mysql -u db_user -p  mysql> SHOW DATABASES;\nmysql> CREATE DATABASE project_db;\nmysql> SHOW DATABASES;  Whenever you'd like to exit MySQL server, press CTRL + D.",
            "title": "For MySQL"
        },
        {
            "location": "/general/deploy-django/#4-create-a-python-virtual-environment",
            "text": "$ sudo -H pip3 install --upgrade pip\n$ sudo -H pip3 install virtualenv  $ mkdir ~/myproject\n$ cd ~/myproject\n$ virtualenv venv\n$ source venv/bin/activate  Note: Regardless of which version of Python you are using, when the virtual environment is activated, you should use the pip command (not pip3).  Install the  mysqlclient  library:  $ pip install mysqlclient  With your virtual environment active, install Django and Gunicorn:  $ pip install django gunicorn",
            "title": "4) Create a Python Virtual Environment"
        },
        {
            "location": "/general/deploy-django/#5-create-django-project",
            "text": "Since we already have a project directory, we will tell Django to install the files here. It will create a second level directory with the actual code, which is normal, and place a management script in this directory. The key to this is that we are defining the directory explicitly instead of allowing Django to make decisions relative to our current directory:  $ django-admin startproject myproject ~/myproject  At this point, your project directory (~/myproject in our case) should have the following content:  ~/myproject/manage.py: A Django project management script.\n~/myproject/myproject/: The Django project package. This should contain the __init__.py, settings.py, urls.py, and wsgi.py files.\n~/myproject/myprojectenv/: The virtual environment directory we created earlier.  Go to the end of the  settings.py  file and add  STATIC_ROOT  as shown below:  # Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')  Add your server\u2019s IP address between the square brackets and single quotes to the  ALLOWED_HOSTS :  # The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['your_server_domain_or_IP', 'second_domain_or_IP', . . .]  Migrate the initial database schema to our database using the management script:  (venv) $ python ~/myproject/manage.py makemigrations\n(venv) $ python ~/myproject/manage.py migrate  Create an administrative user for the project by typing:  (venv) $ ~/myproject/manage.py createsuperuser  We can collect all of the static content into the directory location we configured by typing:  (venv) $ ~/myproject/manage.py collectstatic  The static files will then be placed in a directory called static within your project directory.",
            "title": "5) Create Django project"
        },
        {
            "location": "/general/deploy-django/#connect-your-django-app-to-mysql",
            "text": "Navigate to the settings.py file and replace the current DATABASES lines with the following. We will configure your database dictionary so that it knows to use MySQL as your database backend and from what file to read your database connection credentials:  # Database\n# https://docs.djangoproject.com/en/2.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'OPTIONS': {\n            'read_default_file': '/etc/mysql/my.cnf',\n        },\n    }\n}  Next, let\u2019s edit the config file so that it has your MySQL credentials. Use nano as sudo to edit the file and add the following information:  $ sudo nano /etc/mysql/my.cnf  [client]\ndatabase = db_name\nuser = db_user\npassword = db_password\ndefault-character-set = utf8  Where database name in our case is mysite, your username for the MySQL server is the one you\u2019ve created, and the password is the MySQL server password you\u2019ve created. Also, you\u2019ll notice that utf8 is set as the default encoding, this is a common way to encode unicode data in MySQL. Once the file has been edited, we need to restart MySQL for the changes to take effect.  $ systemctl daemon-reload\n$ systemctl restart mysql  Please note that restarting MySQL takes a few seconds, so please be patient. Now, let's test the MySQL connection to the application. We need to verify that the configurations in Django detect your MySQL server properly. We can do this by simply running the server. If it fails, it means that the connection isn\u2019t working properly. Otherwise, the connection is valid.  $ cd ~/mysite/mysite/\n$ python manage.py runserver your-server-ip:8000",
            "title": "Connect your Django app to MySQL"
        },
        {
            "location": "/general/deploy-django/#6-setting-up-gunicorns-ability-to-serve-the-project",
            "text": "The last thing we want to do before leaving our virtual environment is test Gunicorn to make sure that it can serve the application. We can do this by entering our project directory and using gunicorn to load the project's WSGI module:  $ cd ~/myproject\n$ gunicorn --bind 0.0.0.0:8000 myproject.wsgi  This will start Gunicorn on the same interface that the Django development server was running on. You can go back and test the app again.   We passed Gunicorn a module by specifying the relative directory path to Django's wsgi.py file, which is the entry point to our application, using Python's module syntax. Inside of this file, a function called application is defined, which is used to communicate with the application. When you are finished testing, hit CTRL-C in the terminal window to stop Gunicorn. We're now finished configuring our Django application. We can back out of our virtual environment by typing:  $ deactivate  Create and open a systemd service file for Gunicorn with sudo privileges in your text editor:  $ sudo nano /etc/systemd/system/gunicorn.service  [Unit]\nDescription=gunicorn daemon\nAfter=network.target\n\n[Service]\nUser=synergix\nGroup=www-data\nWorkingDirectory=/home/synergix/myproject\nExecStart=/home/synergix/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/synergix/myproject/myproject.sock myproject.wsgi:application\n\n[Install]\nWantedBy=multi-user.target  We can now start the Gunicorn service we created and enable it so that it starts at boot:  $ sudo systemctl start gunicorn\n$ sudo systemctl enable gunicorn  We can confirm that the operation was successful by checking for the socket file.  $ sudo systemctl status gunicorn  Next, check for the existence of the myproject.sock file within your project directory:  $ ls /home/synergix/myproject  If the systemctl status command indicated that an error occurred or if you do not find the myproject.sock file in the directory, it's an indication that Gunicorn was not able to start correctly. Check the Gunicorn process logs by typing:  $ sudo journalctl -u gunicorn",
            "title": "6) Setting up Gunicorn's ability to serve the project"
        },
        {
            "location": "/general/deploy-django/#7-configure-nginx-to-proxy-pass-to-gunicorn",
            "text": "Now that Gunicorn is set up, we need to configure Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginx's sites-available directory:  $ sudo nano /etc/nginx/sites-available/myproject  Inside, open up a new server block. We will start by specifying that this block should listen on the normal port 80 and that it should respond to our server's domain name or IP address. Next, we will tell Nginx to ignore any problems with finding a favicon. We will also tell it where to find the static assets that we collected in our ~/myproject/static directory. All of these files have a standard URI prefix of \"/static\", so we can create a location block to match those requests. Finally, we'll create a location / {} block to match all other requests. Inside of this location, we'll include the standard proxy_params file included with the Nginx installation and then we will pass the traffic to the socket that our Gunicorn process created:  server {\n    listen 80;\n    server_name server_domain_or_IP;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/sammy/myproject;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/home/sammy/myproject/myproject.sock;\n    }\n}  Save and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled directory:  $ sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled  Test your Nginx configuration for syntax errors by typing:  $ sudo nginx -t  If no errors are reported, go ahead and restart Nginx by typing:  $ sudo systemctl restart nginx  Finally, we need to open up our firewall to normal traffic on port 80. Since we no longer need access to the development server, we can remove the rule to open port 8000 as well:  $ sudo ufw delete allow 8000\n$ sudo ufw allow 'Nginx Full'  You should now be able to go to your server's domain or IP address to view your application.",
            "title": "7) Configure Nginx to Proxy Pass to Gunicorn"
        },
        {
            "location": "/general/deploy-django/#8-troubleshooting",
            "text": "Logs can help narrow down root causes. Check each of them in turn and look for messages indicating problem areas. The following logs may be helpful:   Check the Nginx process logs by typing:  sudo journalctl -u nginx  Check the Nginx access logs by typing:  sudo less /var/log/nginx/access.log  Check the Nginx error logs by typing:  sudo less /var/log/nginx/error.log  Check the Gunicorn application logs by typing:  sudo journalctl -u gunicorn   As you update your configuration or application, you will likely need to restart the processes to adjust to your changes. If you update your Django application, you can restart the Gunicorn process to pick up the changes by typing:  $ sudo systemctl restart gunicorn  If you change gunicorn systemd service file, reload the daemon and restart the process by typing:  $ sudo systemctl daemon-reload\n$ sudo systemctl restart gunicorn  If you change the Nginx server block configuration, test the configuration and then Nginx by typing:  $ sudo nginx -t && sudo systemctl restart nginx",
            "title": "8) Troubleshooting"
        },
        {
            "location": "/general/deploy-django/#references",
            "text": "DigitalOcean - Setup Django, Postgres, nginx and Gunicorn on Ubuntu  DigitalOcean - Serve Django with uwsgi and ngix on Ubuntu  DigitalOcean - Create Django app and connect to database",
            "title": "References"
        },
        {
            "location": "/general/dev-environments/",
            "text": "Development environments\n\n\nMy prefered configurations and extensions in various development environments. Mostly focused on Python and web development. For Python I mostly use Pycharm.\n\n\nAtom\n\n\nEssentials\n\n\n\n\n\n\n\n\n\n\n\n\nVisual Studio Code\n\n\nEssentials\n\n\n\n\nPython\n\n\nCode Runner\n for Python and more\n\n\nLive Server\n for web dev\n\n\n\n\nOther\n\n\n\n\nOneDark-Pro theme\n \n\n\nMagic Python\n\n\nBracket Pair Colorizer",
            "title": "Development environments"
        },
        {
            "location": "/general/dev-environments/#development-environments",
            "text": "My prefered configurations and extensions in various development environments. Mostly focused on Python and web development. For Python I mostly use Pycharm.",
            "title": "Development environments"
        },
        {
            "location": "/general/dev-environments/#atom",
            "text": "",
            "title": "Atom"
        },
        {
            "location": "/general/dev-environments/#essentials",
            "text": "",
            "title": "Essentials"
        },
        {
            "location": "/general/dev-environments/#visual-studio-code",
            "text": "",
            "title": "Visual Studio Code"
        },
        {
            "location": "/general/dev-environments/#essentials_1",
            "text": "Python  Code Runner  for Python and more  Live Server  for web dev",
            "title": "Essentials"
        },
        {
            "location": "/general/dev-environments/#other",
            "text": "OneDark-Pro theme    Magic Python  Bracket Pair Colorizer",
            "title": "Other"
        },
        {
            "location": "/general/git/",
            "text": "Git Version Control System\n\n\nStarting repositories\n\n\nClone an existing repository: \n$ git clone ssh://user@domain.com/repo.git\n \n\n\nCreate a new local repository: \n$ git init\n\n\nLocal changes\n\n\nShow changed files in your working directory: \n$ git status\n\n\nAdd all current changes to the next commit: \n$ git add\n\n\nAdd some changes in \n to the next commit: \n$ git add -p <file>\n\n\nCommit all local changes in tracked files: \n$ git commit -a\n\n\nRemove a file from version control\n\n\nRemove the file from the Git repository and from the filesystem\n\n\ngit rm file1.txt\ngit commit -m \"remove file1.txt\"\n\n\n\n\nBut if you want to remove the file only from the Git repository and not remove it from the filesystem, use:\n\n\ngit rm --cached file1.txt\ngit commit -m \"remove file1.txt\"\n\n\n\n\nThen push changes to remote repo\n\n\ngit push origin branch_name",
            "title": "Git Version Control System"
        },
        {
            "location": "/general/git/#git-version-control-system",
            "text": "",
            "title": "Git Version Control System"
        },
        {
            "location": "/general/git/#starting-repositories",
            "text": "Clone an existing repository:  $ git clone ssh://user@domain.com/repo.git    Create a new local repository:  $ git init",
            "title": "Starting repositories"
        },
        {
            "location": "/general/git/#local-changes",
            "text": "Show changed files in your working directory:  $ git status  Add all current changes to the next commit:  $ git add  Add some changes in   to the next commit:  $ git add -p <file>  Commit all local changes in tracked files:  $ git commit -a",
            "title": "Local changes"
        },
        {
            "location": "/general/git/#remove-a-file-from-version-control",
            "text": "Remove the file from the Git repository and from the filesystem  git rm file1.txt\ngit commit -m \"remove file1.txt\"  But if you want to remove the file only from the Git repository and not remove it from the filesystem, use:  git rm --cached file1.txt\ngit commit -m \"remove file1.txt\"  Then push changes to remote repo  git push origin branch_name",
            "title": "Remove a file from version control"
        },
        {
            "location": "/general/keep-ssh-running/",
            "text": "Keep SSH sessions running after disconnecting\n\n\nUsing nohup\n\n\n$ nohup long-running-process &\n$ exit\n\n\n\n\nUsing GNU Screen\n\n\n$ screen             # to start a screen session\n$ run-a-process\nCTRL+a , d           # to detatch from your screen session\n$ exit               # to disconnect from the server, while run-a-process continues\n$ screen -r          # to resume the screen session when you come back to your laptop\n\n\n\n\nUsing tmux\n\n\n$ tmux               # to start a screen session\n$ run-a-process\nCtrl+b then d        # to detatch from your session\n$ tmux attach        # to resume the session when you come back to your laptop",
            "title": "Keep SSH sessions running after disconnecting"
        },
        {
            "location": "/general/keep-ssh-running/#keep-ssh-sessions-running-after-disconnecting",
            "text": "",
            "title": "Keep SSH sessions running after disconnecting"
        },
        {
            "location": "/general/keep-ssh-running/#using-nohup",
            "text": "$ nohup long-running-process &\n$ exit",
            "title": "Using nohup"
        },
        {
            "location": "/general/keep-ssh-running/#using-gnu-screen",
            "text": "$ screen             # to start a screen session\n$ run-a-process\nCTRL+a , d           # to detatch from your screen session\n$ exit               # to disconnect from the server, while run-a-process continues\n$ screen -r          # to resume the screen session when you come back to your laptop",
            "title": "Using GNU Screen"
        },
        {
            "location": "/general/keep-ssh-running/#using-tmux",
            "text": "$ tmux               # to start a screen session\n$ run-a-process\nCtrl+b then d        # to detatch from your session\n$ tmux attach        # to resume the session when you come back to your laptop",
            "title": "Using tmux"
        },
        {
            "location": "/general/os-env-vars/",
            "text": "Hiding Passwords and Secret Keys in Environment Variables\n\n\nAdding a Environment Variable (Windows)\n\n\nSystem Menu > \nAdvanced System Settings\n > \nEnvironment Variables...\n > in User Variables click \nNew...\n > insert variable name (VAR_NAME) and value (VAR_VALUE)\n\n\nWhen coding it may be necessary to restart your IDE or text editor.\n\n\nAdding a Environment Variable (Linux and Mac)\n\n\nOpen the terminal:\n\n\n$ cd \n$ nano .bash_profile\n\n\n\n\nTo the file add the line and save:\n\n\nexport VAR_NAME=\"VAR_VALUE\"\n\n\n\n\nWhen coding it may be necessary to restart your IDE or text editor.\n\n\nAcessing your Environment Variables in Python\n\n\nimport os\n\nvar1 = os.environ.get('VAR_NAME')",
            "title": "Hiding Passwords and Secret Keys in Environment Variables"
        },
        {
            "location": "/general/os-env-vars/#hiding-passwords-and-secret-keys-in-environment-variables",
            "text": "",
            "title": "Hiding Passwords and Secret Keys in Environment Variables"
        },
        {
            "location": "/general/os-env-vars/#adding-a-environment-variable-windows",
            "text": "System Menu >  Advanced System Settings  >  Environment Variables...  > in User Variables click  New...  > insert variable name (VAR_NAME) and value (VAR_VALUE)  When coding it may be necessary to restart your IDE or text editor.",
            "title": "Adding a Environment Variable (Windows)"
        },
        {
            "location": "/general/os-env-vars/#adding-a-environment-variable-linux-and-mac",
            "text": "Open the terminal:  $ cd \n$ nano .bash_profile  To the file add the line and save:  export VAR_NAME=\"VAR_VALUE\"  When coding it may be necessary to restart your IDE or text editor.",
            "title": "Adding a Environment Variable (Linux and Mac)"
        },
        {
            "location": "/general/os-env-vars/#acessing-your-environment-variables-in-python",
            "text": "import os\n\nvar1 = os.environ.get('VAR_NAME')",
            "title": "Acessing your Environment Variables in Python"
        },
        {
            "location": "/general/server-setup/",
            "text": "Initial Server Setup with Ubuntu 18.04\n\n\nWhen first creating a new Ubuntu 18.04 server, there are a few configuration steps that you should take early on as part of the basic setup.\n\n\n1) Creating a New User\n\n\nOnce you are logged in as root, we're prepared to add the new user (synergix) account that we will use to log in from now on.\n\n\nadduser synergix\n\n\nEnter a strong password and, optionally, fill in any of the additional information if you would like. This is not required and you can just hit ENTER in any field you wish to skip.\n\n\n2) Granting Administrative Privileges\n\n\nSet up what is known as \"superuser\" or root privileges for our normal account. This will allow our normal user to run commands with administrative privileges by putting the word \nsudo\n before each command. As \nroot\n, run this command to add your new user to the sudo group:\n\n\nusermod -aG sudo synergix\n\n\n3) Setting Up a Basic Firewall\n\n\nUbuntu 18.04 servers can use the UFW firewall to make sure only connections to certain services are allowed. We can set up a basic firewall very easily using this application.\n\n\nDifferent applications can register their profiles with UFW upon installation. These profiles allow UFW to manage these applications by name. OpenSSH, the service allowing us to connect to our server now, has a profile registered with UFW. You can see this by typing:\n\n\nufw app list\n\n\nAfterwards, we can enable the firewall by typing:\n\n\nufw enable\n\n\nType \"y\" and press ENTER to proceed. You can see that SSH connections are still allowed by typing:\n\n\nufw status\n\n\nAs the firewall is currently blocking all connections except for SSH, if you install and configure additional services, you will need to adjust the firewall settings to allow acceptable traffic in. More info here: https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands\n\n\n4) Enabling External Access for Your Regular User\n\n\nNow that we have a regular user for daily use, we need to make sure we can SSH into the account directly. The process for configuring SSH access for your new user depends on whether your server's root account uses a password or SSH keys for authentication.\n\n\nIf the Root Account Uses Password Authentication\n\n\nIf you logged in to your root account using a password, then password authentication is enabled for SSH. You can SSH to your new user account by opening up a new terminal session and using SSH with your new username:\n\n\nssh synergix@your_server_ip\n\n\nAfter entering your regular user's password, you will be logged in. You will be prompted for your regular user password when using sudo for the first time each session (and periodically afterwards).\n\n\nTo enhance your server's security, it is recommended to set up SSH keys instead of using password authentication: https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1804\n\n\nIf the Root Account Uses SSH Key Authentication\n\n\nIf you logged in to your root account using SSH keys, then password authentication is disabled for SSH. You will need to add a copy of your local public key to the new user's \n~/.ssh/authorized_keys\n file to log in successfully.\n\n\nSince your public key is already in the root account's \n~/.ssh/authorized_keys\n file on the server, we can copy that file and directory structure to our new user account in our existing session.\n\n\nThe simplest way to copy the files with the correct ownership and permissions is with the \nrsync\n command. This will copy the root user's .ssh directory, preserve the permissions, and modify the file owners, all in a single command:\n\n\nrsync --archive --chown=synergix:synergix ~/.ssh /home/synergix\n\n\nNow, open up a new terminal session and using SSH with your new username:\n\n\nssh synergix@your_server_ip\n\n\nYou should be logged in to the new user account without using a password. \n\n\n5) Other\n\n\nChose the timezone by running: \nsudo dpkg-reconfigure tzdata\n\n\nReferences:\n\n\n\n\nhttps://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04",
            "title": "Initial Server Setup with Ubuntu 18.04"
        },
        {
            "location": "/general/server-setup/#initial-server-setup-with-ubuntu-1804",
            "text": "When first creating a new Ubuntu 18.04 server, there are a few configuration steps that you should take early on as part of the basic setup.",
            "title": "Initial Server Setup with Ubuntu 18.04"
        },
        {
            "location": "/general/server-setup/#1-creating-a-new-user",
            "text": "Once you are logged in as root, we're prepared to add the new user (synergix) account that we will use to log in from now on.  adduser synergix  Enter a strong password and, optionally, fill in any of the additional information if you would like. This is not required and you can just hit ENTER in any field you wish to skip.",
            "title": "1) Creating a New User"
        },
        {
            "location": "/general/server-setup/#2-granting-administrative-privileges",
            "text": "Set up what is known as \"superuser\" or root privileges for our normal account. This will allow our normal user to run commands with administrative privileges by putting the word  sudo  before each command. As  root , run this command to add your new user to the sudo group:  usermod -aG sudo synergix",
            "title": "2) Granting Administrative Privileges"
        },
        {
            "location": "/general/server-setup/#3-setting-up-a-basic-firewall",
            "text": "Ubuntu 18.04 servers can use the UFW firewall to make sure only connections to certain services are allowed. We can set up a basic firewall very easily using this application.  Different applications can register their profiles with UFW upon installation. These profiles allow UFW to manage these applications by name. OpenSSH, the service allowing us to connect to our server now, has a profile registered with UFW. You can see this by typing:  ufw app list  Afterwards, we can enable the firewall by typing:  ufw enable  Type \"y\" and press ENTER to proceed. You can see that SSH connections are still allowed by typing:  ufw status  As the firewall is currently blocking all connections except for SSH, if you install and configure additional services, you will need to adjust the firewall settings to allow acceptable traffic in. More info here: https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands",
            "title": "3) Setting Up a Basic Firewall"
        },
        {
            "location": "/general/server-setup/#4-enabling-external-access-for-your-regular-user",
            "text": "Now that we have a regular user for daily use, we need to make sure we can SSH into the account directly. The process for configuring SSH access for your new user depends on whether your server's root account uses a password or SSH keys for authentication.",
            "title": "4) Enabling External Access for Your Regular User"
        },
        {
            "location": "/general/server-setup/#if-the-root-account-uses-password-authentication",
            "text": "If you logged in to your root account using a password, then password authentication is enabled for SSH. You can SSH to your new user account by opening up a new terminal session and using SSH with your new username:  ssh synergix@your_server_ip  After entering your regular user's password, you will be logged in. You will be prompted for your regular user password when using sudo for the first time each session (and periodically afterwards).  To enhance your server's security, it is recommended to set up SSH keys instead of using password authentication: https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1804",
            "title": "If the Root Account Uses Password Authentication"
        },
        {
            "location": "/general/server-setup/#if-the-root-account-uses-ssh-key-authentication",
            "text": "If you logged in to your root account using SSH keys, then password authentication is disabled for SSH. You will need to add a copy of your local public key to the new user's  ~/.ssh/authorized_keys  file to log in successfully.  Since your public key is already in the root account's  ~/.ssh/authorized_keys  file on the server, we can copy that file and directory structure to our new user account in our existing session.  The simplest way to copy the files with the correct ownership and permissions is with the  rsync  command. This will copy the root user's .ssh directory, preserve the permissions, and modify the file owners, all in a single command:  rsync --archive --chown=synergix:synergix ~/.ssh /home/synergix  Now, open up a new terminal session and using SSH with your new username:  ssh synergix@your_server_ip  You should be logged in to the new user account without using a password.",
            "title": "If the Root Account Uses SSH Key Authentication"
        },
        {
            "location": "/general/server-setup/#5-other",
            "text": "Chose the timezone by running:  sudo dpkg-reconfigure tzdata",
            "title": "5) Other"
        },
        {
            "location": "/general/server-setup/#references",
            "text": "https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04",
            "title": "References:"
        },
        {
            "location": "/general/ubuntu-vps/",
            "text": "Deploy a Flask Application on an Ubuntu VPS (DigitalOcean)\n\n\nThis page details the process of seting up a Ubuntu VPS (in this case a DigitalOcean dropplet using Ubuntu 16.04 was used) to serve a Flask based websiite. MySQL databases are used.\n\n\n1) Install Apache\n\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install apache2\n\n\n\n\nYou can do a spot check right away to verify that everything went as planned by visiting your server's public IP address in your web browser. You will see the default Ubuntu 16.04 Apache web page.\n\n\nhttp://your_server_IP_address\n\n\n\n\nHow To Find your Server's Public IP Address\n\n\nUsually, this is the address you use to connect to your server through SSH. However you can find the IP address from the command line by typing this:\n\n\n$ ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'\n\n\n\n\nAlternatively you can use \ncurl\n to contact an outside party to tell you how it sees your server. You can do this by asking a specific server what your IP address is:\n\n\n$ sudo apt-get install curl\n$ curl http://icanhazip.com\n\n\n\n\n2) Install MySQL\n\n\n$ sudo apt-get install mysql-server mysql-client\n\n\n\n\nDuring the installation, your server will ask you to select and confirm a password for the MySQL \"root\" user. This is an administrative account in MySQL that has increased privileges. Think of it as being similar to the root account for the server itself (the one you are configuring now is a MySQL-specific account, however). Make sure this is a strong, unique password, and do not leave it blank.\n\n\nOptional:\n Run a simple security script that will remove some dangerous defaults and lock down access to our database system a little bit. See more info on this on reference [2].\n\n\n$ mysql_secure_installation\n\n\n\n\n3) Install and enable mod_wsgi\n\n\nWSGI (Web Server Gateway Interface) is an interface between web servers and web apps for python. Mod_wsgi is an Apache HTTP server mod that enables Apache to serve Flask applications.\n\n\n$ cd /var/www\n\n\n\n\nCopy in your Flask app directory struture. It should look like this:\n\n\n|----FlaskApp\n|---------FlaskApp\n|--------------static\n|--------------templates\n|--------------__init__.py\n\n\n\n\n4) Install Flask and virtualenv\n\n\nInstall \npip\n\n\n$ sudo apt-get install python-pip \n\n\n\n\nInstall \nvirtualenv\n and create a new virtual environment names \nvenv\n for the Flask app\n\n\n$ sudo pip install virtualenv \n$ cd /var/www/FlaskApp/FlaskApp\n$ sudo virtualenv venv\n$ source venv/bin/activate \n\n\n\n\nInstall \nFlask\n and other necessary Flask plug-ins and extensions\n\n\n$ sudo pip install Flask \n$ sudo pip install flask-mysqldb\n$ sudo pip install Flask-WTF\n$ sudo pip install passlib\n\n\n\n\nTest if the installation is successful and the app is running:\n\n\n$ sudo python __init__.py \n\n\n\n\nIt should display \u201cRunning on http://localhost:5000/\u201d or \"Running on http://127.0.0.1:5000/\". If you see this message, you have successfully configured the app.\n\n\nTo deactivate the environment, give the following command:\n\n\n$ deactivate\n\n\n\n\n5) Configure and Enable a New Virtual Host\n\n\n$ sudo nano /etc/apache2/sites-available/FlaskApp.conf\n\n\n\n\nAdd the following lines of code to the file to configure the virtual host. Be sure to change the ServerName to your domain or cloud server's IP address:\n\n\n<VirtualHost *:80>\n        ServerName mywebsite.com\n        ServerAlias www.mywebsite.com\n        ServerAdmin admin@mywebsite.com\n        WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi\n        <Directory /var/www/FlaskApp/FlaskApp/>\n            Order allow,deny\n            Allow from all\n        </Directory>\n        Alias /static /var/www/FlaskApp/FlaskApp/static\n        <Directory /var/www/FlaskApp/FlaskApp/static/>\n            Order allow,deny\n            Allow from all\n        </Directory>\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        LogLevel warn\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n\n\n\n\nEnable the virtual host with the following command:\n\n\n$ sudo a2ensite FlaskApp\n\n\n\n\n6) Create the .wsgi File\n\n\n$ cd /var/www/FlaskApp\n$ sudo nano flaskapp.wsgi \n\n\n\n\nAdd the following lines of code to the flaskapp.wsgi file:\n\n\n#!/usr/bin/python\nimport sys\nimport logging\nlogging.basicConfig(stream=sys.stderr)\nsys.path.insert(0,\"/var/www/FlaskApp/\")\n\nfrom FlaskApp import app as application\napplication.secret_key = 'Add your secret key'\n\n\n\n\n7) Restart Apache\n\n\n$ sudo service apache2 restart \n\n\n\n\nTo view your application, open your browser and navigate to the domain name or IP address that you entered in your virtual host configuration.\n\n\nFinal directory structure\n\n\n|--------FlaskApp\n|----------------FlaskApp\n|-----------------------static\n|-----------------------templates\n|-----------------------venv\n|-----------------------__init__.py\n|----------------flaskapp.wsgi\n\n\n\n\nUseful references:\n\n\n1) \nHow To Deploy a Flask Application on an Ubuntu VPS\n\n2) \nHow To Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 16.04\n\n3) \nInitial Server Setup with Ubuntu 16.04\n\n4) \nBuilding a Flask site",
            "title": "Deploy a Flask Application on an Ubuntu VPS (DigitalOcean)"
        },
        {
            "location": "/general/ubuntu-vps/#deploy-a-flask-application-on-an-ubuntu-vps-digitalocean",
            "text": "This page details the process of seting up a Ubuntu VPS (in this case a DigitalOcean dropplet using Ubuntu 16.04 was used) to serve a Flask based websiite. MySQL databases are used.",
            "title": "Deploy a Flask Application on an Ubuntu VPS (DigitalOcean)"
        },
        {
            "location": "/general/ubuntu-vps/#1-install-apache",
            "text": "$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install apache2  You can do a spot check right away to verify that everything went as planned by visiting your server's public IP address in your web browser. You will see the default Ubuntu 16.04 Apache web page.  http://your_server_IP_address",
            "title": "1) Install Apache"
        },
        {
            "location": "/general/ubuntu-vps/#how-to-find-your-servers-public-ip-address",
            "text": "Usually, this is the address you use to connect to your server through SSH. However you can find the IP address from the command line by typing this:  $ ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'  Alternatively you can use  curl  to contact an outside party to tell you how it sees your server. You can do this by asking a specific server what your IP address is:  $ sudo apt-get install curl\n$ curl http://icanhazip.com",
            "title": "How To Find your Server's Public IP Address"
        },
        {
            "location": "/general/ubuntu-vps/#2-install-mysql",
            "text": "$ sudo apt-get install mysql-server mysql-client  During the installation, your server will ask you to select and confirm a password for the MySQL \"root\" user. This is an administrative account in MySQL that has increased privileges. Think of it as being similar to the root account for the server itself (the one you are configuring now is a MySQL-specific account, however). Make sure this is a strong, unique password, and do not leave it blank.  Optional:  Run a simple security script that will remove some dangerous defaults and lock down access to our database system a little bit. See more info on this on reference [2].  $ mysql_secure_installation",
            "title": "2) Install MySQL"
        },
        {
            "location": "/general/ubuntu-vps/#3-install-and-enable-mod_wsgi",
            "text": "WSGI (Web Server Gateway Interface) is an interface between web servers and web apps for python. Mod_wsgi is an Apache HTTP server mod that enables Apache to serve Flask applications.  $ cd /var/www  Copy in your Flask app directory struture. It should look like this:  |----FlaskApp\n|---------FlaskApp\n|--------------static\n|--------------templates\n|--------------__init__.py",
            "title": "3) Install and enable mod_wsgi"
        },
        {
            "location": "/general/ubuntu-vps/#4-install-flask-and-virtualenv",
            "text": "Install  pip  $ sudo apt-get install python-pip   Install  virtualenv  and create a new virtual environment names  venv  for the Flask app  $ sudo pip install virtualenv \n$ cd /var/www/FlaskApp/FlaskApp\n$ sudo virtualenv venv\n$ source venv/bin/activate   Install  Flask  and other necessary Flask plug-ins and extensions  $ sudo pip install Flask \n$ sudo pip install flask-mysqldb\n$ sudo pip install Flask-WTF\n$ sudo pip install passlib  Test if the installation is successful and the app is running:  $ sudo python __init__.py   It should display \u201cRunning on http://localhost:5000/\u201d or \"Running on http://127.0.0.1:5000/\". If you see this message, you have successfully configured the app.  To deactivate the environment, give the following command:  $ deactivate",
            "title": "4) Install Flask and virtualenv"
        },
        {
            "location": "/general/ubuntu-vps/#5-configure-and-enable-a-new-virtual-host",
            "text": "$ sudo nano /etc/apache2/sites-available/FlaskApp.conf  Add the following lines of code to the file to configure the virtual host. Be sure to change the ServerName to your domain or cloud server's IP address:  <VirtualHost *:80>\n        ServerName mywebsite.com\n        ServerAlias www.mywebsite.com\n        ServerAdmin admin@mywebsite.com\n        WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi\n        <Directory /var/www/FlaskApp/FlaskApp/>\n            Order allow,deny\n            Allow from all\n        </Directory>\n        Alias /static /var/www/FlaskApp/FlaskApp/static\n        <Directory /var/www/FlaskApp/FlaskApp/static/>\n            Order allow,deny\n            Allow from all\n        </Directory>\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        LogLevel warn\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>  Enable the virtual host with the following command:  $ sudo a2ensite FlaskApp",
            "title": "5) Configure and Enable a New Virtual Host"
        },
        {
            "location": "/general/ubuntu-vps/#6-create-the-wsgi-file",
            "text": "$ cd /var/www/FlaskApp\n$ sudo nano flaskapp.wsgi   Add the following lines of code to the flaskapp.wsgi file:  #!/usr/bin/python\nimport sys\nimport logging\nlogging.basicConfig(stream=sys.stderr)\nsys.path.insert(0,\"/var/www/FlaskApp/\")\n\nfrom FlaskApp import app as application\napplication.secret_key = 'Add your secret key'",
            "title": "6) Create the .wsgi File"
        },
        {
            "location": "/general/ubuntu-vps/#7-restart-apache",
            "text": "$ sudo service apache2 restart   To view your application, open your browser and navigate to the domain name or IP address that you entered in your virtual host configuration.",
            "title": "7) Restart Apache"
        },
        {
            "location": "/general/ubuntu-vps/#final-directory-structure",
            "text": "|--------FlaskApp\n|----------------FlaskApp\n|-----------------------static\n|-----------------------templates\n|-----------------------venv\n|-----------------------__init__.py\n|----------------flaskapp.wsgi",
            "title": "Final directory structure"
        },
        {
            "location": "/general/ubuntu-vps/#useful-references",
            "text": "1)  How To Deploy a Flask Application on an Ubuntu VPS \n2)  How To Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 16.04 \n3)  Initial Server Setup with Ubuntu 16.04 \n4)  Building a Flask site",
            "title": "Useful references:"
        },
        {
            "location": "/general/web-dev-resources/",
            "text": "Online Resources For Web Developers\n\n\nGENERATORS:\n\n\n\n\nText Content Generator - http://www.lipsum.com\n\n\nFavicon Generator - http://tools.dynamicdrive.com/favicon     \n\n\nData Generator - https://mockaroo.com/                        \n\n\nMobile Mockup Generator - https://mockuphone.com\n\n\nLogo Generator - https://www.logaster.com\n\n\nUUID Generator - https://www.uuidgenerator.net/\n\n\nHash Generator - https://passwordsgenerator.net/sha256-hash-generator/\n\n\n\n\nIMAGE RESOURCES:\n\n\n\n\nFree Stock Images - https://www.pexels.com\n\n\nFree Stock Images With Great API - https://unsplash.com/\n\n\nFree- Vectors, mockups - https://www.freepik.com\n\n\nDummy Image Placeholders - https://source.unsplash.com/\n\n\nDummy Image Placeholders - https://placeholder.com\n\n\nFree Icons - https://www.iconfinder.com\n\n\n\n\nCOLOR & DESIGN:\n\n\n\n\nGenerate Color Palette from Image - https://www.canva.com/color-palette/\n\n\nColor Palette Generator - https://coolors.co/app\n\n\nCreate Color Schemes - https://color.hailpixel.com\n\n\nGet Color Schemes of Websites - http://stylifyme.com\n\n\nCreate Gradients - https://uigradients.com\n\n\nCSS Button Generator - http://css3buttongenerator.com \n\n\n\n\nIMAGE COMPRESSION:\n\n\n\n\nCompress All Images - https://compressor.io/compress\n\n\nCompress JPG - http://jpeg-optimizer.com/\n\n\nCompress PNG - https://tinypng.com/\n\n\n\n\nCODE OPTIMIZATION:\n\n\n\n\nMinify JS & CSS - http://minifier.org\n\n\nCode Optimization Tools - https://codebeautify.org\n\n\nCode Diff Checker - https://www.diffchecker.com\n\n\n\n\nCONVERTERS:\n\n\n\n\nES6+ & JSX Compiler - https://babeljs.io/repl\n\n\nSass Converter - https://www.sassmeister.com/           \n\n\nLess Converter & More - http://www.webtoolkitonline.com   \n\n\nMarkdown Editor - https://stackedit.io\n\n\nJade Converter - http://www.html2jade.org/\n\n\n\n\nVALIDATION & COMPATIBILITY:\n\n\n\n\nValidate HTML - https://validator.w3.org\n\n\nValidate CSS - https://jigsaw.w3.org/css-validator\n\n\nCheck Browser Compatibility - https://caniuse.com/\n\n\nES6+ Compatibility Table - https://kangax.github.io/compat-table/es6/\n\n\n\n\nIN BROWSER CODING:\n\n\n\n\nClient Side Code - https://codepen.io\n\n\nClient Side Code - https://jsfiddle.net\n\n\nClient Side Code - http://liveweave.com\n\n\nServer Side Code - https://repl.it\n\n\n\n\nSNIPPET TOOLS:\n\n\n\n\nSnippet Manager - https://gist.github.com\n\n\nSnippet Manager - https://pastebin.com\n\n\n\n\nWIREFRAME:\n\n\n\n\nIn Browser Wireframing - https://app.moqups.com\n\n\nVery Basic In Browser Wireframing - https://wireframe.cc\n\n\n\n\nRESPONSIVENESS:\n\n\n\n\nDevice Testing - http://www.responsinator.com\n\n\nWhat's My Browser Size - https://www.webpagefx.com/tools/whats-my-browser-size/\n\n\n\n\nSPEED TEST:\n\n\n\n\nSpeed & Performance Testing - https://tools.keycdn.com/speed\n\n\nPingdom Speed Test - https://tools.pingdom.com/\n\n\n\n\nOTHER:\n\n\n\n\nPublic API Resources - https://github.com/toddmotto/public-apis?utm_source=mybridge&utm_medium=blog&utm_campaign=read_more\n\n\nHTML Entity Lookup - http://entity-lookup.leftlogic.com/\n\n\n\n\nReferences:\n\n\n\n\nhttps://gist.github.com/bradtraversy/61171a9b81586f5bc4c0ca1e2beb59ab\n\n\nhttps://www.youtube.com/watch?v=4JC8ahZneYU",
            "title": "Online Resources For Web Developers"
        },
        {
            "location": "/general/web-dev-resources/#online-resources-for-web-developers",
            "text": "",
            "title": "Online Resources For Web Developers"
        },
        {
            "location": "/general/web-dev-resources/#generators",
            "text": "Text Content Generator - http://www.lipsum.com  Favicon Generator - http://tools.dynamicdrive.com/favicon       Data Generator - https://mockaroo.com/                          Mobile Mockup Generator - https://mockuphone.com  Logo Generator - https://www.logaster.com  UUID Generator - https://www.uuidgenerator.net/  Hash Generator - https://passwordsgenerator.net/sha256-hash-generator/",
            "title": "GENERATORS:"
        },
        {
            "location": "/general/web-dev-resources/#image-resources",
            "text": "Free Stock Images - https://www.pexels.com  Free Stock Images With Great API - https://unsplash.com/  Free- Vectors, mockups - https://www.freepik.com  Dummy Image Placeholders - https://source.unsplash.com/  Dummy Image Placeholders - https://placeholder.com  Free Icons - https://www.iconfinder.com",
            "title": "IMAGE RESOURCES:"
        },
        {
            "location": "/general/web-dev-resources/#color-design",
            "text": "Generate Color Palette from Image - https://www.canva.com/color-palette/  Color Palette Generator - https://coolors.co/app  Create Color Schemes - https://color.hailpixel.com  Get Color Schemes of Websites - http://stylifyme.com  Create Gradients - https://uigradients.com  CSS Button Generator - http://css3buttongenerator.com",
            "title": "COLOR &amp; DESIGN:"
        },
        {
            "location": "/general/web-dev-resources/#image-compression",
            "text": "Compress All Images - https://compressor.io/compress  Compress JPG - http://jpeg-optimizer.com/  Compress PNG - https://tinypng.com/",
            "title": "IMAGE COMPRESSION:"
        },
        {
            "location": "/general/web-dev-resources/#code-optimization",
            "text": "Minify JS & CSS - http://minifier.org  Code Optimization Tools - https://codebeautify.org  Code Diff Checker - https://www.diffchecker.com",
            "title": "CODE OPTIMIZATION:"
        },
        {
            "location": "/general/web-dev-resources/#converters",
            "text": "ES6+ & JSX Compiler - https://babeljs.io/repl  Sass Converter - https://www.sassmeister.com/             Less Converter & More - http://www.webtoolkitonline.com     Markdown Editor - https://stackedit.io  Jade Converter - http://www.html2jade.org/",
            "title": "CONVERTERS:"
        },
        {
            "location": "/general/web-dev-resources/#validation-compatibility",
            "text": "Validate HTML - https://validator.w3.org  Validate CSS - https://jigsaw.w3.org/css-validator  Check Browser Compatibility - https://caniuse.com/  ES6+ Compatibility Table - https://kangax.github.io/compat-table/es6/",
            "title": "VALIDATION &amp; COMPATIBILITY:"
        },
        {
            "location": "/general/web-dev-resources/#in-browser-coding",
            "text": "Client Side Code - https://codepen.io  Client Side Code - https://jsfiddle.net  Client Side Code - http://liveweave.com  Server Side Code - https://repl.it",
            "title": "IN BROWSER CODING:"
        },
        {
            "location": "/general/web-dev-resources/#snippet-tools",
            "text": "Snippet Manager - https://gist.github.com  Snippet Manager - https://pastebin.com",
            "title": "SNIPPET TOOLS:"
        },
        {
            "location": "/general/web-dev-resources/#wireframe",
            "text": "In Browser Wireframing - https://app.moqups.com  Very Basic In Browser Wireframing - https://wireframe.cc",
            "title": "WIREFRAME:"
        },
        {
            "location": "/general/web-dev-resources/#responsiveness",
            "text": "Device Testing - http://www.responsinator.com  What's My Browser Size - https://www.webpagefx.com/tools/whats-my-browser-size/",
            "title": "RESPONSIVENESS:"
        },
        {
            "location": "/general/web-dev-resources/#speed-test",
            "text": "Speed & Performance Testing - https://tools.keycdn.com/speed  Pingdom Speed Test - https://tools.pingdom.com/",
            "title": "SPEED TEST:"
        },
        {
            "location": "/general/web-dev-resources/#other",
            "text": "Public API Resources - https://github.com/toddmotto/public-apis?utm_source=mybridge&utm_medium=blog&utm_campaign=read_more  HTML Entity Lookup - http://entity-lookup.leftlogic.com/",
            "title": "OTHER:"
        },
        {
            "location": "/general/web-dev-resources/#references",
            "text": "https://gist.github.com/bradtraversy/61171a9b81586f5bc4c0ca1e2beb59ab  https://www.youtube.com/watch?v=4JC8ahZneYU",
            "title": "References:"
        },
        {
            "location": "/html-css/css-selectors/",
            "text": "CSS selectors\n\n\nIn CSS, selectors are patterns used to select the element(s) you want to style.\n\n\nThe \"CSS\" column indicates in which CSS version the property is defined (CSS1, CSS2, or CSS3).\n\n\n\n\n\n\n\n\nSelector\n\n\nExample\n\n\nExample description\n\n\nCSS\n\n\n\n\n\n\n\n\n\n\n.class\n\n\n.intro\n\n\nSelects all elements with class=\"intro\"\n\n\n1\n\n\n\n\n\n\n#id\n\n\n#firstname\n\n\nSelects the element with id=\"firstname\"\n\n\n1\n\n\n\n\n\n\n*\n\n\n*\n\n\nSelects all elements\n\n\n2\n\n\n\n\n\n\nelement\n\n\np\n\n\nSelects all \\\n elements\n\n\n1\n\n\n\n\n\n\nelement,element\n\n\ndiv, p\n\n\nSelects all \\\n elements and all \\\n elements\n\n\n1\n\n\n\n\n\n\nelement\u00a0element\n\n\ndiv p\n\n\nSelects all \\\n elements inside \\\n elements\n\n\n1\n\n\n\n\n\n\nelement>element\n\n\ndiv > p\n\n\nSelects all \\\n elements where the parent is a \\\n element\n\n\n2\n\n\n\n\n\n\nelement+element\n\n\ndiv + p\n\n\nSelects all \\\n elements that are placed immediately after \\\n elements\n\n\n2\n\n\n\n\n\n\nelement1~element2\n\n\np ~ ul\n\n\nSelects every \\\n element that are preceded by a \\\n element\n\n\n3\n\n\n\n\n\n\n:active\n\n\na:active\n\n\nSelects the active link\n\n\n1\n\n\n\n\n\n\n::after\n\n\np::after\n\n\nInsert something after the content of each \\\n element\n\n\n2\n\n\n\n\n\n\n::before\n\n\np::before\n\n\nInsert something before\u00a0the content of each \\\n element\n\n\n2\n\n\n\n\n\n\n:checked\n\n\ninput:checked\n\n\nSelects every checked \n element\n\n\n3\n\n\n\n\n\n\n:disabled\n\n\ninput:disabled\n\n\nSelects every disabled \n element\n\n\n3\n\n\n\n\n\n\n:empty\n\n\np:empty\n\n\nSelects every \\\n element that has no children (including text nodes)\n\n\n3\n\n\n\n\n\n\n:enabled\n\n\ninput:enabled\n\n\nSelects every enabled \n element\n\n\n3\n\n\n\n\n\n\n:first-child\n\n\np:first-child\n\n\nSelects every \\\n element that is the first child of its parent\n\n\n2\n\n\n\n\n\n\n::first-letter\n\n\np::first-letter\n\n\nSelects the first letter of every \\\n element\n\n\n1\n\n\n\n\n\n\n::first-line\n\n\np::first-line\n\n\nSelects the first line of every \\\n element\n\n\n1\n\n\n\n\n\n\n:first-of-type\n\n\np:first-of-type\n\n\nSelects every \\\n element that is the first \\\n element of its parent\n\n\n3\n\n\n\n\n\n\n:focus\n\n\ninput:focus\n\n\nSelects the input element which has focus\n\n\n2\n\n\n\n\n\n\n:hover\n\n\na:hover\n\n\nSelects links on mouse over\n\n\n1\n\n\n\n\n\n\n:in-range\n\n\ninput:in-range\n\n\nSelects input elements with a value within a specified range\n\n\n3\n\n\n\n\n\n\n:invalid\n\n\ninput:invalid\n\n\nSelects all input elements with an invalid value\n\n\n3\n\n\n\n\n\n\n:lang(language)\n\n\np:lang(it)\n\n\nSelects every \\\n element with a lang attribute equal to \"it\" (Italian)\n\n\n2\n\n\n\n\n\n\n:last-child\n\n\np:last-child\n\n\nSelects every \\\n element that is the last child of its parent\n\n\n3\n\n\n\n\n\n\n:last-of-type\n\n\np:last-of-type\n\n\nSelects every \\\n element that is the last \\\n element of its parent\n\n\n3\n\n\n\n\n\n\n:link\n\n\na:link\n\n\nSelects all unvisited links\n\n\n1\n\n\n\n\n\n\n:not(selector)\n\n\n:not(p)\n\n\nSelects every element that is not a \\\n element\n\n\n3\n\n\n\n\n\n\n:nth-child(n)\n\n\np:nth-child(2)\n\n\nSelects every \\\n element that is the second child of its parent\n\n\n3\n\n\n\n\n\n\n:nth-last-child(n)\n\n\np:nth-last-child(2)\n\n\nSelects every \\\n element that is the second child of its parent, counting from the last child\n\n\n3\n\n\n\n\n\n\n:nth-last-of-type(n)\n\n\np:nth-last-of-type(2)\n\n\nSelects every \\\n element that is the second \\\n element of its parent, counting from the last child\n\n\n3\n\n\n\n\n\n\n:nth-of-type(n)\n\n\np:nth-of-type(2)\n\n\nSelects every \\\n element that is the second \\\n element of its parent\n\n\n3\n\n\n\n\n\n\n:only-of-type\n\n\np:only-of-type\n\n\nSelects every \\\n element that is the only \\\n element of its parent\n\n\n3\n\n\n\n\n\n\n:only-child\n\n\np:only-child\n\n\nSelects every \\\n element that is the only child of its parent\n\n\n3\n\n\n\n\n\n\n:optional\n\n\ninput:optional\n\n\nSelects input elements with no \"required\" attribute\n\n\n3\n\n\n\n\n\n\n:out-of-range\n\n\ninput:out-of-range\n\n\nSelects input elements with a value outside a specified range\n\n\n3\n\n\n\n\n\n\n:read-only\n\n\ninput:read-only\n\n\nSelects input elements with the \"readonly\" attribute specified\n\n\n3\n\n\n\n\n\n\n:read-write\n\n\ninput:read-write\n\n\nSelects input elements with the \"readonly\" attribute NOT specified\n\n\n3\n\n\n\n\n\n\n:required\n\n\ninput:required\n\n\nSelects input elements with the \"required\" attribute specified\n\n\n3\n\n\n\n\n\n\n:root\n\n\n:root\n\n\nSelects the document's root element\n\n\n3\n\n\n\n\n\n\n::selection\n\n\n::selection\n\n\nSelects the portion of an element that is selected by a user\n\n\n\n\n\n\n\n\n:target\n\n\n#news:target\n\n\nSelects the current active #news element (clicked on a URL containing that anchor name)\n\n\n3\n\n\n\n\n\n\n:valid\n\n\ninput:valid\n\n\nSelects all input elements with a valid value\n\n\n3\n\n\n\n\n\n\n:visited\n\n\na:visited\n\n\nSelects all visited links\n\n\n1",
            "title": "CSS selectors"
        },
        {
            "location": "/html-css/css-selectors/#css-selectors",
            "text": "In CSS, selectors are patterns used to select the element(s) you want to style.  The \"CSS\" column indicates in which CSS version the property is defined (CSS1, CSS2, or CSS3).     Selector  Example  Example description  CSS      .class  .intro  Selects all elements with class=\"intro\"  1    #id  #firstname  Selects the element with id=\"firstname\"  1    *  *  Selects all elements  2    element  p  Selects all \\  elements  1    element,element  div, p  Selects all \\  elements and all \\  elements  1    element\u00a0element  div p  Selects all \\  elements inside \\  elements  1    element>element  div > p  Selects all \\  elements where the parent is a \\  element  2    element+element  div + p  Selects all \\  elements that are placed immediately after \\  elements  2    element1~element2  p ~ ul  Selects every \\  element that are preceded by a \\  element  3    :active  a:active  Selects the active link  1    ::after  p::after  Insert something after the content of each \\  element  2    ::before  p::before  Insert something before\u00a0the content of each \\  element  2    :checked  input:checked  Selects every checked   element  3    :disabled  input:disabled  Selects every disabled   element  3    :empty  p:empty  Selects every \\  element that has no children (including text nodes)  3    :enabled  input:enabled  Selects every enabled   element  3    :first-child  p:first-child  Selects every \\  element that is the first child of its parent  2    ::first-letter  p::first-letter  Selects the first letter of every \\  element  1    ::first-line  p::first-line  Selects the first line of every \\  element  1    :first-of-type  p:first-of-type  Selects every \\  element that is the first \\  element of its parent  3    :focus  input:focus  Selects the input element which has focus  2    :hover  a:hover  Selects links on mouse over  1    :in-range  input:in-range  Selects input elements with a value within a specified range  3    :invalid  input:invalid  Selects all input elements with an invalid value  3    :lang(language)  p:lang(it)  Selects every \\  element with a lang attribute equal to \"it\" (Italian)  2    :last-child  p:last-child  Selects every \\  element that is the last child of its parent  3    :last-of-type  p:last-of-type  Selects every \\  element that is the last \\  element of its parent  3    :link  a:link  Selects all unvisited links  1    :not(selector)  :not(p)  Selects every element that is not a \\  element  3    :nth-child(n)  p:nth-child(2)  Selects every \\  element that is the second child of its parent  3    :nth-last-child(n)  p:nth-last-child(2)  Selects every \\  element that is the second child of its parent, counting from the last child  3    :nth-last-of-type(n)  p:nth-last-of-type(2)  Selects every \\  element that is the second \\  element of its parent, counting from the last child  3    :nth-of-type(n)  p:nth-of-type(2)  Selects every \\  element that is the second \\  element of its parent  3    :only-of-type  p:only-of-type  Selects every \\  element that is the only \\  element of its parent  3    :only-child  p:only-child  Selects every \\  element that is the only child of its parent  3    :optional  input:optional  Selects input elements with no \"required\" attribute  3    :out-of-range  input:out-of-range  Selects input elements with a value outside a specified range  3    :read-only  input:read-only  Selects input elements with the \"readonly\" attribute specified  3    :read-write  input:read-write  Selects input elements with the \"readonly\" attribute NOT specified  3    :required  input:required  Selects input elements with the \"required\" attribute specified  3    :root  :root  Selects the document's root element  3    ::selection  ::selection  Selects the portion of an element that is selected by a user     :target  #news:target  Selects the current active #news element (clicked on a URL containing that anchor name)  3    :valid  input:valid  Selects all input elements with a valid value  3    :visited  a:visited  Selects all visited links  1",
            "title": "CSS selectors"
        },
        {
            "location": "/javascript/DataTables/",
            "text": "DataTables JS Library\n\n\nDocumentation here\n\n\nRequirements:\n\n\n\n\nJQuery\n\n\n\n\nUsage:\n\n\nInclude the CSS and JS code for DataTables to the head and bottom of the body of your website, respectively. CSS is not required.\n\n\n<link rel=\"stylesheet\" type=\"text/css\" href= \"{{ url_for('static',filename='style.css') }}\"> \n\n<script type=\"text/javascript\" src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"></script>\n\n\n\n\nUse the single function bellow to call to initialise the tabl. Do not forget to add an id tag to the table.\n\n\n$(document).ready(function(){\n    $('#myTable').DataTable();\n});\n\n\n\n\nAdd options like so:\n\n\n$(document).ready(function() {\n  $('#myTable').DataTable( {\n    \"columnDefs\": [\n      { \"orderable\": false, \"targets\": [2,3,4] }\n    ],\n    \"paging\": false,\n    \"order\": [[ 0, \"asc\" ]]\n  } );\n} );",
            "title": "DataTables JS Library"
        },
        {
            "location": "/javascript/DataTables/#datatables-js-library",
            "text": "Documentation here",
            "title": "DataTables JS Library"
        },
        {
            "location": "/javascript/DataTables/#requirements",
            "text": "JQuery",
            "title": "Requirements:"
        },
        {
            "location": "/javascript/DataTables/#usage",
            "text": "Include the CSS and JS code for DataTables to the head and bottom of the body of your website, respectively. CSS is not required.  <link rel=\"stylesheet\" type=\"text/css\" href= \"{{ url_for('static',filename='style.css') }}\"> \n\n<script type=\"text/javascript\" src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"></script>  Use the single function bellow to call to initialise the tabl. Do not forget to add an id tag to the table.  $(document).ready(function(){\n    $('#myTable').DataTable();\n});  Add options like so:  $(document).ready(function() {\n  $('#myTable').DataTable( {\n    \"columnDefs\": [\n      { \"orderable\": false, \"targets\": [2,3,4] }\n    ],\n    \"paging\": false,\n    \"order\": [[ 0, \"asc\" ]]\n  } );\n} );",
            "title": "Usage:"
        },
        {
            "location": "/javascript/cache-data/",
            "text": "Caching data\n\n\nYou have three options:\n\n\n\n\nCookies: https://developer.mozilla.org/en-US/docs/DOM/document.cookie\n\n\nDOMStorage (sessionStorage or localStorage): https://developer.mozilla.org/en-US/docs/DOM/Storage\n\n\nIf your users are logged in, you could persist data in your server's DB that is keyed to a user (or group)\n\n\n\n\nUsing localStorage (persistent over sessions)\n\n\nWriting :\n\n\nlocalStorage['myKey'] = 'somestring'; // only strings\n\n\n\n\nReading :\n\n\nvar myVar = localStorage['myKey'] || 'defaultValue';\n\n\n\n\nIf you need to store complex structures, you might serialize them in JSON. For example :\n\n\nReading :\n\n\nvar stored = localStorage['myKey'];\nif (stored) myVar = JSON.parse(stored);\nelse myVar = {a:'test', b: [1, 2, 3]};\n\n\n\n\nWriting :\n\n\nlocalStorage['myKey'] = JSON.stringify(myVar);\n\n\n\n\nNote that you may use more than one key. They'll all be retrieved by all pages on the same domain.\n\n\nUnless you want to be compatible with IE7, you have no reason to use the obsolete and small cookies.\n\n\nReferences\n\n\nhttps://stackoverflow.com/questions/14266730/js-how-to-cache-a-variable",
            "title": "Caching data"
        },
        {
            "location": "/javascript/cache-data/#caching-data",
            "text": "You have three options:   Cookies: https://developer.mozilla.org/en-US/docs/DOM/document.cookie  DOMStorage (sessionStorage or localStorage): https://developer.mozilla.org/en-US/docs/DOM/Storage  If your users are logged in, you could persist data in your server's DB that is keyed to a user (or group)",
            "title": "Caching data"
        },
        {
            "location": "/javascript/cache-data/#using-localstorage-persistent-over-sessions",
            "text": "Writing :  localStorage['myKey'] = 'somestring'; // only strings  Reading :  var myVar = localStorage['myKey'] || 'defaultValue';  If you need to store complex structures, you might serialize them in JSON. For example :  Reading :  var stored = localStorage['myKey'];\nif (stored) myVar = JSON.parse(stored);\nelse myVar = {a:'test', b: [1, 2, 3]};  Writing :  localStorage['myKey'] = JSON.stringify(myVar);  Note that you may use more than one key. They'll all be retrieved by all pages on the same domain.  Unless you want to be compatible with IE7, you have no reason to use the obsolete and small cookies.",
            "title": "Using localStorage (persistent over sessions)"
        },
        {
            "location": "/javascript/cache-data/#references",
            "text": "https://stackoverflow.com/questions/14266730/js-how-to-cache-a-variable",
            "title": "References"
        },
        {
            "location": "/python/args-kwargs/",
            "text": "args and \n*kwargs\n\n\nA normal function:\n\n\ndef func1(one, two)\n  print(one)\n  print(two)\n\nfunc1('arg one', 'arg two')  # Correct\nfunc1('arg one')  # Error\nfunc1('arg one', 'arg two', 'arg three')  # Error\n\n\n\n\n*args usage:\n\n\ndef func2(*args)\n  for stuff in args:\n    print(stuff)\n\nmy_list = ['green', 'yellow', 'blue', 'red']\n\nfunc2(*my_list)  # Correct\nfunc2('green', 'yellow', 'blue', 'red')  # Correct\n\n\n\n\ndef func3(one, two, *args)\n  print(one)\n  print(two)\n  for stuff in args:\n    print(stuff)\n\nmy_list = ['green', 'yellow', 'blue', 'red']\n\nfunc3('required one', 'required two', *my_list)  # Correct\n\n\n\n\n**kwargs usage:\n\n\ndef func4(**kwargs)\n  for key, value in kwargs.items():\n    print(key)\n    print(value)\n\nmy_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\nfunc4(**kwargs)  # Correct\nfunc4(key1 = 'value1', key2 = 'value2', key3 = 'value3')  # Correct",
            "title": "*args and **kwargs"
        },
        {
            "location": "/python/args-kwargs/#args-and-kwargs",
            "text": "",
            "title": "args and *kwargs"
        },
        {
            "location": "/python/args-kwargs/#a-normal-function",
            "text": "def func1(one, two)\n  print(one)\n  print(two)\n\nfunc1('arg one', 'arg two')  # Correct\nfunc1('arg one')  # Error\nfunc1('arg one', 'arg two', 'arg three')  # Error",
            "title": "A normal function:"
        },
        {
            "location": "/python/args-kwargs/#args-usage",
            "text": "def func2(*args)\n  for stuff in args:\n    print(stuff)\n\nmy_list = ['green', 'yellow', 'blue', 'red']\n\nfunc2(*my_list)  # Correct\nfunc2('green', 'yellow', 'blue', 'red')  # Correct  def func3(one, two, *args)\n  print(one)\n  print(two)\n  for stuff in args:\n    print(stuff)\n\nmy_list = ['green', 'yellow', 'blue', 'red']\n\nfunc3('required one', 'required two', *my_list)  # Correct",
            "title": "*args usage:"
        },
        {
            "location": "/python/args-kwargs/#kwargs-usage",
            "text": "def func4(**kwargs)\n  for key, value in kwargs.items():\n    print(key)\n    print(value)\n\nmy_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\nfunc4(**kwargs)  # Correct\nfunc4(key1 = 'value1', key2 = 'value2', key3 = 'value3')  # Correct",
            "title": "**kwargs usage:"
        },
        {
            "location": "/python/beautifulsoup4/",
            "text": "Web scrapping with Beautiful Soup 4\n\n\nRequired modules\n\n\npip install beautifulsoup4\npip install lxml\npip instal html5lib\npip install requests\n\n\n\n\nUsage\n\n\nfrom bs4 import BeautifulSoup\nimport requests\n\nsource = requests.get('http://example.com').text\nsoup = BeautifulSoup(source, 'lxml')\n\n\n\n\nReferences\n\n\nhttps://www.youtube.com/watch?v=ng2o98k983k",
            "title": "Web scrapping with Beautiful Soup 4"
        },
        {
            "location": "/python/beautifulsoup4/#web-scrapping-with-beautiful-soup-4",
            "text": "",
            "title": "Web scrapping with Beautiful Soup 4"
        },
        {
            "location": "/python/beautifulsoup4/#required-modules",
            "text": "pip install beautifulsoup4\npip install lxml\npip instal html5lib\npip install requests",
            "title": "Required modules"
        },
        {
            "location": "/python/beautifulsoup4/#usage",
            "text": "from bs4 import BeautifulSoup\nimport requests\n\nsource = requests.get('http://example.com').text\nsoup = BeautifulSoup(source, 'lxml')",
            "title": "Usage"
        },
        {
            "location": "/python/beautifulsoup4/#references",
            "text": "https://www.youtube.com/watch?v=ng2o98k983k",
            "title": "References"
        },
        {
            "location": "/python/builtin-functions/",
            "text": "Sorting lists\n\n\nsorted()\n returns a \nnew\n sorted list, leaving the original list unaffected. \nlist.sort()\n sorts the list \nin-place\n, mutating the list indices, and returns None (like all in-place operations).\n\n\nsorted()\n works on any iterable, not just lists. Strings, tuples, dictionaries (you'll get the keys), generators, etc., returning a list containing all elements, sorted.\n\n\n\n\nUse \nlist.sort()\n when you want to mutate the list, sorted() when you want a new sorted object back. Use \nsorted()\n when you want to sort something that is an iterable, not a list yet.\n\n\nFor lists, \nlist.sort()\n is faster than \nsorted()\n because it doesn't have to create a copy. For any other iterable, you have no choice.\n\n\nNo, you cannot retrieve the original positions. Once you called \nlist.sort()\n the original order is gone.\n\n\n\n\nUseful links:\n\n\nhttps://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python\nhttps://stackoverflow.com/questions/18761776/sort-list-of-dictionaries-by-multiple-keys-with-different-ordering\nhttps://stackoverflow.com/questions/16082954/python-how-to-sort-a-list-of-dictionaries-by-several-values",
            "title": "Sorting lists"
        },
        {
            "location": "/python/builtin-functions/#sorting-lists",
            "text": "sorted()  returns a  new  sorted list, leaving the original list unaffected.  list.sort()  sorts the list  in-place , mutating the list indices, and returns None (like all in-place operations).  sorted()  works on any iterable, not just lists. Strings, tuples, dictionaries (you'll get the keys), generators, etc., returning a list containing all elements, sorted.   Use  list.sort()  when you want to mutate the list, sorted() when you want a new sorted object back. Use  sorted()  when you want to sort something that is an iterable, not a list yet.  For lists,  list.sort()  is faster than  sorted()  because it doesn't have to create a copy. For any other iterable, you have no choice.  No, you cannot retrieve the original positions. Once you called  list.sort()  the original order is gone.",
            "title": "Sorting lists"
        },
        {
            "location": "/python/builtin-functions/#useful-links",
            "text": "https://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python\nhttps://stackoverflow.com/questions/18761776/sort-list-of-dictionaries-by-multiple-keys-with-different-ordering\nhttps://stackoverflow.com/questions/16082954/python-how-to-sort-a-list-of-dictionaries-by-several-values",
            "title": "Useful links:"
        },
        {
            "location": "/python/classes/",
            "text": "Classes and OOP (Object Oriented Programming)\n\n\nclass Foo:\n    a = 0  # <-- class variable\n\n    def __init__(self, b=0):\n        self.b = b  # <-- instance variable\n\n    def bar(self):  # <- instance method\n        return self.a + self.b\n\n    @classmethod\n    def foo(cls, c=12):  # <-- class method\n        return cls(c).bar()\n\ndef foobar():   # <-- function\n    print(Foo.foo())\n\n\n\n\nA function and a method are not the same thing, and a class and an instance are not the same thing, which is why a class variable/method and an instance variable/method are very definitely not the same things.\n\n\nA class is like a blueprint, it tells you about some thing you want to make. An instance is the thing that gets made. \n\n\nFor example, if you write up a blueprint for an airplane, the blueprint is like when you define a class. The airplanes that get made from that blueprint are like instances of a class. \n\n\nDefining a class looks like this:\n\n\nclass Airplane:\n  pass  \n\n\n\n\n(Normally you would have some more code instead of \npass\n. I'll explain that later.)\n\n\nNow once you define a class you can create instances of a class like this, \nAirplane()\n. For example,\n\n\nairplane1 = Airplane()\nairplane2 = Airplane()\n\n\n\n\nHere we created two instances of the Airplane class and put them in the variables \nairplane1\n and \nairplane2\n. The important thing here is that you can change \nairplane1\n without affecting \nairplane2\n. They're two separate instances.\n\n\nOkay now let's go back and talk about what goes inside a class. Let's take our Airplane class and fill it out:\n\n\nclass Airplane:\n    def __init__(self):\n        print \"A new instance got made!\"\n\n\n\n\nSo what's going on here? \n__init__\n is a function that gets run when you create an instance. That's it! So if you go back to where we created the two Airplane instances,\n\n\nairplane1 = Airplane()\nairplane2 = Airplane()\n\n\n\n\nwhat would happen is, \"A new instance got made!\" would be printed out twice.\n\n\nWhat about the \nself\n parameter? I think this would be easier to understand if we added a new method.\n\n\nclass Airplane:\n    def __init__(self):\n        print \"A new instance got made!\"\n    def fly(self):\n        print \"I'm flying!\"\n\n\n\n\nSo if you wanted to call this method you'd do something like this: \nairplane1.fly()\n. Actually this is the same thing as this: \nAirplane.fly(airplane1)\n. Both of these would do the same thing, i.e. print out \"I'm flying!\". So \nairplane1\n is the instance that we used to call our \nfly\n method. This instance is what gets passed to \nself\n. \n\n\nClasses\n\n\n# Function, this lives outside a class\ndef add(a, b):\n    return a + b\n\n\nclass Adder():\n\n    # __init__ roughly equivilant to a constructor in other languages\n    def __init__(self, a, b):\n        # Adding attributes to this instance of our class\n        self.a = a\n        self.b = b\n\n    # Method, This belongs to an instance of a class and must have self as first argument. self refers to an instance of a class\n    def add(self):\n        return self.a + self.b\n\n    # CLass Method, belongs to a class and is shared by every instance of the class, must have the class as first argument\n    @classmethod\n    def class_add(cls, x, y):\n        return x + y\n\n    # Static Method, Only belongs to the class for organisation, can't reference class or instance attributes\n    @staticmethod\n    def static_add(c, d):\n        return c + d\n\n\n# Let's start with an instance initialized with values for a and b\nfoo = Adder(1, 2)\n# we call the add method of foo which refernces the values we initialized the class with\nprint ('Instance result', foo.add())\n\n# Class method doesnt require an instance, note no () after Adder, we arent creating an instance, just referencing the class\nbar = Adder.class_add(1, 2)\nprint ('Class result', bar)\n\n# Static, similar to classmethod we don't need to create an instance\nbaz = Adder.static_add(1, 2)\nprint ('Static result', baz)\n\n# Finally we'll just use our add function\nspam = add(1, 2)\nprint ('Function result', spam)\n\n\n\n\nReferences:\n\n\n\n\nhttps://www.reddit.com/r/learnpython/comments/1cpu7x/explain_classes_init_and_self_like_im_five/",
            "title": "Classes and OOP (Object Oriented Programming)"
        },
        {
            "location": "/python/classes/#classes-and-oop-object-oriented-programming",
            "text": "class Foo:\n    a = 0  # <-- class variable\n\n    def __init__(self, b=0):\n        self.b = b  # <-- instance variable\n\n    def bar(self):  # <- instance method\n        return self.a + self.b\n\n    @classmethod\n    def foo(cls, c=12):  # <-- class method\n        return cls(c).bar()\n\ndef foobar():   # <-- function\n    print(Foo.foo())  A function and a method are not the same thing, and a class and an instance are not the same thing, which is why a class variable/method and an instance variable/method are very definitely not the same things.  A class is like a blueprint, it tells you about some thing you want to make. An instance is the thing that gets made.   For example, if you write up a blueprint for an airplane, the blueprint is like when you define a class. The airplanes that get made from that blueprint are like instances of a class.   Defining a class looks like this:  class Airplane:\n  pass    (Normally you would have some more code instead of  pass . I'll explain that later.)  Now once you define a class you can create instances of a class like this,  Airplane() . For example,  airplane1 = Airplane()\nairplane2 = Airplane()  Here we created two instances of the Airplane class and put them in the variables  airplane1  and  airplane2 . The important thing here is that you can change  airplane1  without affecting  airplane2 . They're two separate instances.  Okay now let's go back and talk about what goes inside a class. Let's take our Airplane class and fill it out:  class Airplane:\n    def __init__(self):\n        print \"A new instance got made!\"  So what's going on here?  __init__  is a function that gets run when you create an instance. That's it! So if you go back to where we created the two Airplane instances,  airplane1 = Airplane()\nairplane2 = Airplane()  what would happen is, \"A new instance got made!\" would be printed out twice.  What about the  self  parameter? I think this would be easier to understand if we added a new method.  class Airplane:\n    def __init__(self):\n        print \"A new instance got made!\"\n    def fly(self):\n        print \"I'm flying!\"  So if you wanted to call this method you'd do something like this:  airplane1.fly() . Actually this is the same thing as this:  Airplane.fly(airplane1) . Both of these would do the same thing, i.e. print out \"I'm flying!\". So  airplane1  is the instance that we used to call our  fly  method. This instance is what gets passed to  self .",
            "title": "Classes and OOP (Object Oriented Programming)"
        },
        {
            "location": "/python/classes/#classes",
            "text": "# Function, this lives outside a class\ndef add(a, b):\n    return a + b\n\n\nclass Adder():\n\n    # __init__ roughly equivilant to a constructor in other languages\n    def __init__(self, a, b):\n        # Adding attributes to this instance of our class\n        self.a = a\n        self.b = b\n\n    # Method, This belongs to an instance of a class and must have self as first argument. self refers to an instance of a class\n    def add(self):\n        return self.a + self.b\n\n    # CLass Method, belongs to a class and is shared by every instance of the class, must have the class as first argument\n    @classmethod\n    def class_add(cls, x, y):\n        return x + y\n\n    # Static Method, Only belongs to the class for organisation, can't reference class or instance attributes\n    @staticmethod\n    def static_add(c, d):\n        return c + d\n\n\n# Let's start with an instance initialized with values for a and b\nfoo = Adder(1, 2)\n# we call the add method of foo which refernces the values we initialized the class with\nprint ('Instance result', foo.add())\n\n# Class method doesnt require an instance, note no () after Adder, we arent creating an instance, just referencing the class\nbar = Adder.class_add(1, 2)\nprint ('Class result', bar)\n\n# Static, similar to classmethod we don't need to create an instance\nbaz = Adder.static_add(1, 2)\nprint ('Static result', baz)\n\n# Finally we'll just use our add function\nspam = add(1, 2)\nprint ('Function result', spam)",
            "title": "Classes"
        },
        {
            "location": "/python/classes/#references",
            "text": "https://www.reddit.com/r/learnpython/comments/1cpu7x/explain_classes_init_and_self_like_im_five/",
            "title": "References:"
        },
        {
            "location": "/python/csv/",
            "text": "CSV files\n\n\nCSV (Comma Separated Values) is a very popular import and export data format used in spreadsheets and databases. Each line in a CSV file is a data record. Each record consists of one or more fields, separated by commas. While CSV is a very simple data format, there can be many differecies, such as different delimiters, new lines, or quoting characters.\n\n\nReading CSV files\n\n\nReading of CSV files into memory:\n\n\n# example1.csv\n1/2/2014,5,8,red\n1/3/2014,5,2,green\n1/4/2014,9,1,blue\n\n\n\n\nimport csv\n\nwith open('example1.csv') as csvfile:\n    readCSV = csv.reader(csvfile, delimiter=',')\n    for row in readCSV:\n        print(row)\n        print(row[0])\n        print(row[0],row[1],row[2],)\n\n\n\n\nDictReader\n\n\nThe \ncsv.DictReader\n class operates like a regular reader but maps the information read into a dictionary. The keys for the dictionary can be passed in with the fieldnames parameter or inferred from the first row of the CSV file.\n\n\n# example2.csv\nmin,avg,max\n1, 5.5, 10\n2, 3.5, 5\n\n\n\n\nimport csv\n\nwith open('values.csv', 'r') as f:\n    reader = csv.DictReader(f)\n    for row in reader:\n        print(row['min'], row['avg'], row['max'])\n\n\n\n\nWriting to CSV files\n\n\nThe \ncsv.writer()\n method returns a writer object which converts the user's data into delimited strings on the given file-like object.\n\n\nimport csv\n\nnms = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]\n\nwith open('numbers2.csv', 'w') as f:\n    writer = csv.writer(f)\n    for row in nms:\n        writer.writerow(row)\n\n\n\n\nDictWriter\n\n\nThe csv.DictWriter class operates like a regular writer but maps Python dictionaries into CSV rows. The fieldnames parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow() method are written to the CSV file.\n\n\nimport csv\n\nwith open('names.csv', 'w') as f:\n    fnames = ['first_name', 'last_name']\n    writer = csv.DictWriter(f, fieldnames=fnames)    \n\n    writer.writeheader()  # writes the headers to the CSV file.\n    writer.writerow({'first_name' : 'John', 'last_name': 'Smith'})\n    writer.writerow({'first_name' : 'Robert', 'last_name': 'Brown'})\n    writer.writerow({'first_name' : 'Julia', 'last_name': 'Griffin'})\n\n\n\n\nQuoting CSV Files\n\n\nWith the CSV module, you can also perform a variety of quoting functions.\n\n\nThey are:\n\n\n\n\ncsv.QUOTE_ALL\n - Quote everything, regardless of type.\n\n\ncsv.QUOTE_MINIMAL\n - Quote fields with special characters\n\n\ncsv.QUOTE_NONNUMERIC\n - Quote all fields that are not integers or floats\n\n\ncsv.QUOTE_NONE\n - Do not quote anything on output",
            "title": "CSV files"
        },
        {
            "location": "/python/csv/#csv-files",
            "text": "CSV (Comma Separated Values) is a very popular import and export data format used in spreadsheets and databases. Each line in a CSV file is a data record. Each record consists of one or more fields, separated by commas. While CSV is a very simple data format, there can be many differecies, such as different delimiters, new lines, or quoting characters.",
            "title": "CSV files"
        },
        {
            "location": "/python/csv/#reading-csv-files",
            "text": "Reading of CSV files into memory:  # example1.csv\n1/2/2014,5,8,red\n1/3/2014,5,2,green\n1/4/2014,9,1,blue  import csv\n\nwith open('example1.csv') as csvfile:\n    readCSV = csv.reader(csvfile, delimiter=',')\n    for row in readCSV:\n        print(row)\n        print(row[0])\n        print(row[0],row[1],row[2],)",
            "title": "Reading CSV files"
        },
        {
            "location": "/python/csv/#dictreader",
            "text": "The  csv.DictReader  class operates like a regular reader but maps the information read into a dictionary. The keys for the dictionary can be passed in with the fieldnames parameter or inferred from the first row of the CSV file.  # example2.csv\nmin,avg,max\n1, 5.5, 10\n2, 3.5, 5  import csv\n\nwith open('values.csv', 'r') as f:\n    reader = csv.DictReader(f)\n    for row in reader:\n        print(row['min'], row['avg'], row['max'])",
            "title": "DictReader"
        },
        {
            "location": "/python/csv/#writing-to-csv-files",
            "text": "The  csv.writer()  method returns a writer object which converts the user's data into delimited strings on the given file-like object.  import csv\n\nnms = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]\n\nwith open('numbers2.csv', 'w') as f:\n    writer = csv.writer(f)\n    for row in nms:\n        writer.writerow(row)",
            "title": "Writing to CSV files"
        },
        {
            "location": "/python/csv/#dictwriter",
            "text": "The csv.DictWriter class operates like a regular writer but maps Python dictionaries into CSV rows. The fieldnames parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow() method are written to the CSV file.  import csv\n\nwith open('names.csv', 'w') as f:\n    fnames = ['first_name', 'last_name']\n    writer = csv.DictWriter(f, fieldnames=fnames)    \n\n    writer.writeheader()  # writes the headers to the CSV file.\n    writer.writerow({'first_name' : 'John', 'last_name': 'Smith'})\n    writer.writerow({'first_name' : 'Robert', 'last_name': 'Brown'})\n    writer.writerow({'first_name' : 'Julia', 'last_name': 'Griffin'})",
            "title": "DictWriter"
        },
        {
            "location": "/python/csv/#quoting-csv-files",
            "text": "With the CSV module, you can also perform a variety of quoting functions.  They are:   csv.QUOTE_ALL  - Quote everything, regardless of type.  csv.QUOTE_MINIMAL  - Quote fields with special characters  csv.QUOTE_NONNUMERIC  - Quote all fields that are not integers or floats  csv.QUOTE_NONE  - Do not quote anything on output",
            "title": "Quoting CSV Files"
        },
        {
            "location": "/python/django/",
            "text": "Building a Django site\n\n\nInstalling Django\n\n\npip install Django\n\n\nStart project\n\n\nNavigate via the terminal or command prompt to an area where you want to work on your project, then do:\n\n\ndjango-admin startproject mysite\n\n\nThis will create a directory called mysite. Within that directory, you have another one called mysite, along with a manage.py file. The manage.py file lets you easily interact with your project via the command line. The contents of the second mysite directory contain your settings and urls mainly. Broken down:\n\n\n/mysite/  REM Simple container, Call whatever you want.\n    manage.py  REM Lets you interact with your project via the command line.\n    /mysite/  REM Actual project directory.\n        __init__.py  REM Tells python this is a Python package.\n        settings.py  REM Settings for the project.\n        urls.py  REM URL rules. Django docs aptly describes as your table of contents.\n        wsgi.py  REM WSGI magic begins here. Worry about this when it comes time to actually deploy to a server.\n\n\n\n\nThe paradigm of Django is that either a website is an app, or a collection of apps in most cases. We currently have our website, called \"mysite\" for now. For now, run the following via the command line or terminal to run the local development server, which you can reach at http://127.0.0.1:8000. \n\n\ncd mysite\npython manage.py runserver\n\n\n\n\nCreate an app\n\n\npython manage.py startapp webapp\n\n\nNow a new directory exists, called webapp. In here, we see a lot of similar files, and some new ones:\n\n\nwebapp/\n    migrations/ \n    __init__.py\n    admin.py\n    apps.py\n    models.py\n    tests.py\n    views.py\n\n\n\n\nNext, we need to include our new app in our installed applications:\n\n\nOpen the \nmysite/settings.py\n file and add the \n'webapp'\n line:\n\n\n# ...this is just a slice of code within settings.py \n# do not delete the other code\n# just add 'webapp' to the list.\nINSTALLED_APPS = [\n    'webapp',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n\n\n\n\nMake migrations (databases)\n\n\nWhenever you define new models, you need to migrate: \n\n\npython manage.py makemigrations\n\n\nThe \nmakemigrations\n command tells Django that you've made some model changes, and you want to save them as a migration. Migrations are used any time you want Django to recognize changes to the models and database schema. \nAdding data to an existing database table, for example, is not something that needs a migration, changing that table's structure (by changing the model), would require a migration.\n You can also tell Django you want to make migrations for only a specific app, like: \npython manage.py makemigrations webapp\n\n\nOnce you've made migrations, nothing has actually happened yet. You can run a migrate, but there is one more check you can make. This will output the proposed SQL that will be run for you by Django when you migrate. The \n0001\n is the migration ID. You can see this on the \n0001_initial.py\n file in the migrations folder of your app.\n\n\npython manage.py sqlmigrate webapp 0001\n (Optional)\n\n\nIf all looks good, you can run the \nmigrate\n command. This will actually perform the migrations. If this is your first time doing this, you should see quite a bit has been migrated.\n\n\npython manage.py migrate\n\n\nAdmin control panel\n\n\nTo access the admin page, you visit /admin/, assuming the admin app is indeed installed. To login to the admin panel you need to create an user:\n\n\npython manage.py createsuperuser\n\n\nTo register a model create a webapp/admin.py file, and in it put:\n\n\nfrom django.contrib import admin\nfrom webapp.models import Post\n\nadmin.site.register(Post)\n\n\n\n\nHere, we are importing the admin, the Post model, and then we're registering the Post model.\n\n\nUsing MySQL database\n\n\nBy default Django works with SQLite database management system. First, create the MySQL database using the MySQL shell: \n\n\nCREATE DATABASE django_db;\n\n\nTo use MySQL in Django, instead of SQLite, do the following:\n\n\npip install mysqlclient\n\n\nGo to the main \nsettings.py\n file and modify the DATABASES section to:\n\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_db',\n        'USER': 'root',\n        'PASSWORD': '123456',\n        'HOST': 'localhost',\n        'PORT': ''\n    }\n}\n\n\n\n\nNow you can run the migrate command to create all tables Django needs: \npython manage.py migrate\n\n\nDjango authentication system\n\n\nBase project struture for this section:\n\n\nmysite/\n  manage.py\n\n  mysite/\n    __init__.py\n    settings.py\n    urls.py\n    wsgi.py\n\n  app1/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n    models.py\n    tests.py\n    views.py\n\n\n\n\n# mysite/urls.py\n\n\n\n\n\n# mysite/urls.py\n\nurlpatterns = [\n  ...\n  path('accounts/', include(django.contrib.auth.urls))\n]\n\n\n\n\nPerforming AJAX POST Requests in Django\n\n\nRef: http://coreymaynard.com/blog/performing-ajax-post-requests-in-django/\n\n\nA common pitfall that shows up when developing a Django application is when you try and make your first POST request to your server from AJAX. As a response you receive a helpful 403 FORBIDDEN notice, and not much other information. There's a fairly simple way of handling this issue in a seamless fashion,.\n\n\nFirstly, let's discuss the actual problem that is causing this. Django comes with a security feature called Cross Site Request Forgery protection. A CSRF attack is when some external malicious site contains a link with some JavaScript that is intended to perform an action on your web site using the credentials of a logged-in-user who visited the malicious site in their browser. To protect against this, Django adds a CSRF token to every request that must be included with every unsafe HTTP request method (POST, PUT, and DELETE). This random string is verified upon every request, and if it is not valid (or not present) the server will respond with 403 FORBIDDEN.\n\n\nSo, assuming you already have a Django project all setup and ready to go, we're going to create a view and a template to show the POST request in action. Just to keep things simple, we're going to do this in a separate app, so go ahead and create a new app and add it to your INSTALLED_APPS list. Inside of that app let's modify the views file and make it look like this:\n\n\nfrom django.views.generic import TemplateView\nfrom django.http import HttpResponse\n\nimport json\n\nclass PostExample(TemplateView):\n    template_name = 'start.html'\n\n    def post(self, request):\n        return HttpResponse(json.dumps({'key': 'value'}), mimetype=\"application/json\")\n\n\n\n\nWhat we're doing here is creating an incredibly basic view that on a GET request will respond with the \nstart.html\n template and on a post request will respond with a hard coded JSON dictionary. Now we need to add the URL for this view to the project:\n\n\nurl(r'^$', PostExample.as_view(), name='test-start'),\n\n\n\n\nThe template we're going to develop here will be equally simple, let's start with the following:\n\n\n<!DOCTYPE html>\n<html>\n<head>\n<script src=\"{{ STATIC_URL }}js/jquery-1.11.1.min.js\"></script>\n<script type=\"text/javascript\">\n$(document).ready(function() {\n    $(\"#post\").click(function(e) {\n        e.preventDefault();\n        var data = {\n            'foo': 'bar'\n        }\n\n        $.ajax({\n            \"type\": \"POST\",\n            \"dataType\": \"json\",\n            \"url\": \"/test/\",\n            \"data\": data,\n            \"success\": function(result) {\n                console.log(result);\n            },\n        });\n    });\n});\n</script>\n</head>\n<body>\n    <h1>PostExample</h1>\n    <p><a href=\"\" id=\"post\">Post Request</a></p>\n</body>\n</html>\n\n\n\n\nIf you were to go to that page and click the link, you instead of a lovely JSON response you would see the 403 FORBIDDEN notice. Let's take care of that. The way to solve this is by overriding the jQuery beforeSend method on an AJAX query and grabbing the CSRF token embedded in the request and including it in the POST headers. Create a new JavaScript file and add the following to it, and make sure to include it into your template:\n\n\nfunction getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie != '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {\n            // Only send the token to relative URLs i.e. locally.\n            xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n        }\n    }\n});\n\n\n\n\nWith that being done, all you have to do is add the CSRF token into the template like this:\n\n\n{% csrf_token %}\n\n\n\n\nThat takes care of it! You can now make AJAX POST requests from within your application, without doing any specific work on a per instance basis.",
            "title": "Building a Django site"
        },
        {
            "location": "/python/django/#building-a-django-site",
            "text": "",
            "title": "Building a Django site"
        },
        {
            "location": "/python/django/#installing-django",
            "text": "pip install Django",
            "title": "Installing Django"
        },
        {
            "location": "/python/django/#start-project",
            "text": "Navigate via the terminal or command prompt to an area where you want to work on your project, then do:  django-admin startproject mysite  This will create a directory called mysite. Within that directory, you have another one called mysite, along with a manage.py file. The manage.py file lets you easily interact with your project via the command line. The contents of the second mysite directory contain your settings and urls mainly. Broken down:  /mysite/  REM Simple container, Call whatever you want.\n    manage.py  REM Lets you interact with your project via the command line.\n    /mysite/  REM Actual project directory.\n        __init__.py  REM Tells python this is a Python package.\n        settings.py  REM Settings for the project.\n        urls.py  REM URL rules. Django docs aptly describes as your table of contents.\n        wsgi.py  REM WSGI magic begins here. Worry about this when it comes time to actually deploy to a server.  The paradigm of Django is that either a website is an app, or a collection of apps in most cases. We currently have our website, called \"mysite\" for now. For now, run the following via the command line or terminal to run the local development server, which you can reach at http://127.0.0.1:8000.   cd mysite\npython manage.py runserver",
            "title": "Start project"
        },
        {
            "location": "/python/django/#create-an-app",
            "text": "python manage.py startapp webapp  Now a new directory exists, called webapp. In here, we see a lot of similar files, and some new ones:  webapp/\n    migrations/ \n    __init__.py\n    admin.py\n    apps.py\n    models.py\n    tests.py\n    views.py  Next, we need to include our new app in our installed applications:  Open the  mysite/settings.py  file and add the  'webapp'  line:  # ...this is just a slice of code within settings.py \n# do not delete the other code\n# just add 'webapp' to the list.\nINSTALLED_APPS = [\n    'webapp',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]",
            "title": "Create an app"
        },
        {
            "location": "/python/django/#make-migrations-databases",
            "text": "Whenever you define new models, you need to migrate:   python manage.py makemigrations  The  makemigrations  command tells Django that you've made some model changes, and you want to save them as a migration. Migrations are used any time you want Django to recognize changes to the models and database schema.  Adding data to an existing database table, for example, is not something that needs a migration, changing that table's structure (by changing the model), would require a migration.  You can also tell Django you want to make migrations for only a specific app, like:  python manage.py makemigrations webapp  Once you've made migrations, nothing has actually happened yet. You can run a migrate, but there is one more check you can make. This will output the proposed SQL that will be run for you by Django when you migrate. The  0001  is the migration ID. You can see this on the  0001_initial.py  file in the migrations folder of your app.  python manage.py sqlmigrate webapp 0001  (Optional)  If all looks good, you can run the  migrate  command. This will actually perform the migrations. If this is your first time doing this, you should see quite a bit has been migrated.  python manage.py migrate",
            "title": "Make migrations (databases)"
        },
        {
            "location": "/python/django/#admin-control-panel",
            "text": "To access the admin page, you visit /admin/, assuming the admin app is indeed installed. To login to the admin panel you need to create an user:  python manage.py createsuperuser  To register a model create a webapp/admin.py file, and in it put:  from django.contrib import admin\nfrom webapp.models import Post\n\nadmin.site.register(Post)  Here, we are importing the admin, the Post model, and then we're registering the Post model.",
            "title": "Admin control panel"
        },
        {
            "location": "/python/django/#using-mysql-database",
            "text": "By default Django works with SQLite database management system. First, create the MySQL database using the MySQL shell:   CREATE DATABASE django_db;  To use MySQL in Django, instead of SQLite, do the following:  pip install mysqlclient  Go to the main  settings.py  file and modify the DATABASES section to:  DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_db',\n        'USER': 'root',\n        'PASSWORD': '123456',\n        'HOST': 'localhost',\n        'PORT': ''\n    }\n}  Now you can run the migrate command to create all tables Django needs:  python manage.py migrate",
            "title": "Using MySQL database"
        },
        {
            "location": "/python/django/#django-authentication-system",
            "text": "Base project struture for this section:  mysite/\n  manage.py\n\n  mysite/\n    __init__.py\n    settings.py\n    urls.py\n    wsgi.py\n\n  app1/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n    models.py\n    tests.py\n    views.py  # mysite/urls.py  # mysite/urls.py\n\nurlpatterns = [\n  ...\n  path('accounts/', include(django.contrib.auth.urls))\n]",
            "title": "Django authentication system"
        },
        {
            "location": "/python/django/#performing-ajax-post-requests-in-django",
            "text": "Ref: http://coreymaynard.com/blog/performing-ajax-post-requests-in-django/  A common pitfall that shows up when developing a Django application is when you try and make your first POST request to your server from AJAX. As a response you receive a helpful 403 FORBIDDEN notice, and not much other information. There's a fairly simple way of handling this issue in a seamless fashion,.  Firstly, let's discuss the actual problem that is causing this. Django comes with a security feature called Cross Site Request Forgery protection. A CSRF attack is when some external malicious site contains a link with some JavaScript that is intended to perform an action on your web site using the credentials of a logged-in-user who visited the malicious site in their browser. To protect against this, Django adds a CSRF token to every request that must be included with every unsafe HTTP request method (POST, PUT, and DELETE). This random string is verified upon every request, and if it is not valid (or not present) the server will respond with 403 FORBIDDEN.  So, assuming you already have a Django project all setup and ready to go, we're going to create a view and a template to show the POST request in action. Just to keep things simple, we're going to do this in a separate app, so go ahead and create a new app and add it to your INSTALLED_APPS list. Inside of that app let's modify the views file and make it look like this:  from django.views.generic import TemplateView\nfrom django.http import HttpResponse\n\nimport json\n\nclass PostExample(TemplateView):\n    template_name = 'start.html'\n\n    def post(self, request):\n        return HttpResponse(json.dumps({'key': 'value'}), mimetype=\"application/json\")  What we're doing here is creating an incredibly basic view that on a GET request will respond with the  start.html  template and on a post request will respond with a hard coded JSON dictionary. Now we need to add the URL for this view to the project:  url(r'^$', PostExample.as_view(), name='test-start'),  The template we're going to develop here will be equally simple, let's start with the following:  <!DOCTYPE html>\n<html>\n<head>\n<script src=\"{{ STATIC_URL }}js/jquery-1.11.1.min.js\"></script>\n<script type=\"text/javascript\">\n$(document).ready(function() {\n    $(\"#post\").click(function(e) {\n        e.preventDefault();\n        var data = {\n            'foo': 'bar'\n        }\n\n        $.ajax({\n            \"type\": \"POST\",\n            \"dataType\": \"json\",\n            \"url\": \"/test/\",\n            \"data\": data,\n            \"success\": function(result) {\n                console.log(result);\n            },\n        });\n    });\n});\n</script>\n</head>\n<body>\n    <h1>PostExample</h1>\n    <p><a href=\"\" id=\"post\">Post Request</a></p>\n</body>\n</html>  If you were to go to that page and click the link, you instead of a lovely JSON response you would see the 403 FORBIDDEN notice. Let's take care of that. The way to solve this is by overriding the jQuery beforeSend method on an AJAX query and grabbing the CSRF token embedded in the request and including it in the POST headers. Create a new JavaScript file and add the following to it, and make sure to include it into your template:  function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie != '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {\n            // Only send the token to relative URLs i.e. locally.\n            xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n        }\n    }\n});  With that being done, all you have to do is add the CSRF token into the template like this:  {% csrf_token %}  That takes care of it! You can now make AJAX POST requests from within your application, without doing any specific work on a per instance basis.",
            "title": "Performing AJAX POST Requests in Django"
        },
        {
            "location": "/python/email/",
            "text": "Sending e-mails with Python\n\n\nIn all examples I am using a gmail server to send emails. If you are not using a gmail address you need to insert the respective smtp server and possibly the port.\n\n\n\n\nGmail: smtp.gmail.com, port 587\n\n\nHotmail: smtp.live.com, port 587\n\n\nOutlook: smtp-mail.outlook.com, port 587\n\n\n\n\nVery basic example\n\n\nThis is a very barebones example. No subject is added to the email. \n\n\nimport smtplib\n\nsender = 'sender@gmail.com'\npwd = 'senderpassword'  # password for sender email\nreceiver = 'receiver@gmail.com'\nmsg = 'Hi there!'\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)  # smtp server and port for the sender email\nserver.ehlo()\nserver.starttls()  # starts a TLS encrypted connection\nserver.login(sender, pwd)\nserver.sendmail(sender, receiver, msg)\nserver.close()\n\nprint('Mail sent!')\n\n\n\n\n\n\nMore complete case\n\n\nThis uses the Python email library to help compose the email. You can add the subject to the email. \n\n\nimport smtplib\nfrom email.message import EmailMessage\n\nsender = 'sender@gmail.com'\npwd = 'senderpassword'  # password for sender email\nreceiver = 'receiver@gmail.com'\nmessage = 'Hi there!'\n\nmsg = EmailMessage()\nmsg.set_content(message)\nmsg['Subject'] = subject\nmsg['From'] = sender\nmsg['To'] = receiver\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.ehlo()\nserver.starttls()  # starts a TLS encrypted connection\nserver.login(sender, pwd)\nserver.sendmail(sender, receiver, msg.as_string())\nserver.close()\n\nprint('Mail sent!')\n\n\n\n\n\n\nHTML email\n\n\nHere\u2019s an example of how to create an HTML message with an alternative plain text version.\n\n\nimport smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# me == my email address\n# you == recipient's email address\nme = \"my@email.com\"\nyou = \"your@email.com\"\n\n# Create message container - the correct MIME type is multipart/alternative.\nmsg = MIMEMultipart('alternative')\nmsg['Subject'] = \"Link\"\nmsg['From'] = me\nmsg['To'] = you\n\n# Create the body of the message (a plain-text and an HTML version).\ntext = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.python.org\"\nhtml = \"\"\"\\\n<html>\n  <head></head>\n  <body>\n    <p>Hi!<br>\n       How are you?<br>\n       Here is the <a href=\"http://www.python.org\">link</a> you wanted.\n    </p>\n  </body>\n</html>\n\"\"\"\n\n# Record the MIME types of both parts - text/plain and text/html.\npart1 = MIMEText(text, 'plain')\npart2 = MIMEText(html, 'html')\n\n# Attach parts into message container.\n# According to RFC 2046, the last part of a multipart message, in this case\n# the HTML message, is best and preferred.\nmsg.attach(part1)\nmsg.attach(part2)\n\n# Send the message via local SMTP server.\ns = smtplib.SMTP('localhost')\n# sendmail function takes 3 arguments: sender's address, recipient's address\n# and message to send - here it is sent as one string.\ns.sendmail(me, you, msg.as_string())\ns.quit()",
            "title": "Sending e-mails with Python"
        },
        {
            "location": "/python/email/#sending-e-mails-with-python",
            "text": "In all examples I am using a gmail server to send emails. If you are not using a gmail address you need to insert the respective smtp server and possibly the port.   Gmail: smtp.gmail.com, port 587  Hotmail: smtp.live.com, port 587  Outlook: smtp-mail.outlook.com, port 587",
            "title": "Sending e-mails with Python"
        },
        {
            "location": "/python/email/#very-basic-example",
            "text": "This is a very barebones example. No subject is added to the email.   import smtplib\n\nsender = 'sender@gmail.com'\npwd = 'senderpassword'  # password for sender email\nreceiver = 'receiver@gmail.com'\nmsg = 'Hi there!'\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)  # smtp server and port for the sender email\nserver.ehlo()\nserver.starttls()  # starts a TLS encrypted connection\nserver.login(sender, pwd)\nserver.sendmail(sender, receiver, msg)\nserver.close()\n\nprint('Mail sent!')",
            "title": "Very basic example"
        },
        {
            "location": "/python/email/#more-complete-case",
            "text": "This uses the Python email library to help compose the email. You can add the subject to the email.   import smtplib\nfrom email.message import EmailMessage\n\nsender = 'sender@gmail.com'\npwd = 'senderpassword'  # password for sender email\nreceiver = 'receiver@gmail.com'\nmessage = 'Hi there!'\n\nmsg = EmailMessage()\nmsg.set_content(message)\nmsg['Subject'] = subject\nmsg['From'] = sender\nmsg['To'] = receiver\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.ehlo()\nserver.starttls()  # starts a TLS encrypted connection\nserver.login(sender, pwd)\nserver.sendmail(sender, receiver, msg.as_string())\nserver.close()\n\nprint('Mail sent!')",
            "title": "More complete case"
        },
        {
            "location": "/python/email/#html-email",
            "text": "Here\u2019s an example of how to create an HTML message with an alternative plain text version.  import smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# me == my email address\n# you == recipient's email address\nme = \"my@email.com\"\nyou = \"your@email.com\"\n\n# Create message container - the correct MIME type is multipart/alternative.\nmsg = MIMEMultipart('alternative')\nmsg['Subject'] = \"Link\"\nmsg['From'] = me\nmsg['To'] = you\n\n# Create the body of the message (a plain-text and an HTML version).\ntext = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.python.org\"\nhtml = \"\"\"\\\n<html>\n  <head></head>\n  <body>\n    <p>Hi!<br>\n       How are you?<br>\n       Here is the <a href=\"http://www.python.org\">link</a> you wanted.\n    </p>\n  </body>\n</html>\n\"\"\"\n\n# Record the MIME types of both parts - text/plain and text/html.\npart1 = MIMEText(text, 'plain')\npart2 = MIMEText(html, 'html')\n\n# Attach parts into message container.\n# According to RFC 2046, the last part of a multipart message, in this case\n# the HTML message, is best and preferred.\nmsg.attach(part1)\nmsg.attach(part2)\n\n# Send the message via local SMTP server.\ns = smtplib.SMTP('localhost')\n# sendmail function takes 3 arguments: sender's address, recipient's address\n# and message to send - here it is sent as one string.\ns.sendmail(me, you, msg.as_string())\ns.quit()",
            "title": "HTML email"
        },
        {
            "location": "/python/flask/",
            "text": "Building a Flask site\n\n\nInstalling Flask and other usefull Python modules\n\n\npip install Flask\npip install flask-mysqldb\npip install Flask-WTF\npip install passlib\n\n\n\n\nProject file structure\n\n\n/flask-site\n    /venv\n    /flask-site\n        __init__.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            about.html\n            ...\n\n\n\n\nThe \n__init__.py\n file\n\n\nfrom flask import Flask, render_template, flash, redirect, url_for, session, request, logging\n\napp = Flask(__name__)\n\n# Home page route\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# About page route\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\nif __name__ == '__main__':\n    app.secret_key = 'secret123'\n    app.run(debug=True)",
            "title": "Building a Flask site"
        },
        {
            "location": "/python/flask/#building-a-flask-site",
            "text": "",
            "title": "Building a Flask site"
        },
        {
            "location": "/python/flask/#installing-flask-and-other-usefull-python-modules",
            "text": "pip install Flask\npip install flask-mysqldb\npip install Flask-WTF\npip install passlib",
            "title": "Installing Flask and other usefull Python modules"
        },
        {
            "location": "/python/flask/#project-file-structure",
            "text": "/flask-site\n    /venv\n    /flask-site\n        __init__.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            about.html\n            ...",
            "title": "Project file structure"
        },
        {
            "location": "/python/flask/#the-__init__py-file",
            "text": "from flask import Flask, render_template, flash, redirect, url_for, session, request, logging\n\napp = Flask(__name__)\n\n# Home page route\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# About page route\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\nif __name__ == '__main__':\n    app.secret_key = 'secret123'\n    app.run(debug=True)",
            "title": "The __init__.py file"
        },
        {
            "location": "/python/hosting/",
            "text": "Hosting Python scripts and services\n\n\nHosting options:\n\n\n\n\nGoogle App Engine\n (Free Tier)\n\n\nAmazon EC2\n (Free Tier)\n\n\nPython Anywhaere\n (Free Tier)\n\n\nHeroku\n (Free Tier disconects when inactive, 7$/month Min)\n\n\nDigital Ocean\n (5$/month Min, 50$ credit from Github Student Pack)\n\n\nLinode\n (5$/month Min)\n\n\n\n\nUseful Software\n\n\n\n\nPuTTY\n - for SSH access\n\n\nWinSCP\n - To transfer files to the server\n\n\nFileZilla\n - An alternative to WinSCP\n\n\ngit\n - For pulling code from remote repository\n\n\n\n\nUsing git\n\n\n$ apt-get install git\n$ git clone <git url>\n\n\n\n\nUseful references\n\n\nRunning python scripts on a VPS",
            "title": "Hosting Python scripts and services"
        },
        {
            "location": "/python/hosting/#hosting-python-scripts-and-services",
            "text": "",
            "title": "Hosting Python scripts and services"
        },
        {
            "location": "/python/hosting/#hosting-options",
            "text": "Google App Engine  (Free Tier)  Amazon EC2  (Free Tier)  Python Anywhaere  (Free Tier)  Heroku  (Free Tier disconects when inactive, 7$/month Min)  Digital Ocean  (5$/month Min, 50$ credit from Github Student Pack)  Linode  (5$/month Min)",
            "title": "Hosting options:"
        },
        {
            "location": "/python/hosting/#useful-software",
            "text": "PuTTY  - for SSH access  WinSCP  - To transfer files to the server  FileZilla  - An alternative to WinSCP  git  - For pulling code from remote repository",
            "title": "Useful Software"
        },
        {
            "location": "/python/hosting/#using-git",
            "text": "$ apt-get install git\n$ git clone <git url>",
            "title": "Using git"
        },
        {
            "location": "/python/hosting/#useful-references",
            "text": "Running python scripts on a VPS",
            "title": "Useful references"
        },
        {
            "location": "/python/image-manipulation/",
            "text": "Image manipulation in Python\n\n\nThe \nPython Imaging Library\n (PIL) development has stagnated, with its last release in 2009. Luckily, there\u2019s an actively-developed fork of PIL called \nPillow\n.\n\nPillow\n is easier to install, runs on all operating systems, and supports Python 3.\n\n\nPillow\n\n\n\n\nPillow and PIL cannot co-exist in the same environment. Before installing Pillow, please uninstall PIL.\n\n\nPillow >= 2.0.0 supports Python versions 2.6, 2.7, 3.2, 3.3, 3.4\n\n\nBefore installing Pillow, you\u2019ll have to install Pillow\u2019s prerequisites. \nInstructions here\n.\n\n\n\n\nInstalation:\n\n\nWindows\n: \n\n\n$ pip install Pillow\n\n\nLinux (Debian or Ubuntu)\n: \n\n\nMake sure you have Python\u2019s development libraries installed. In Debian or Ubuntu: \n$ sudo apt-get install python3-dev python3-setuptools\n\nPrerequisites are installed on Ubuntu 12.04 LTS or Raspian Wheezy 7.0 with: \n$ sudo apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk\n\n\n$ pip install Pillow\n\n\nfrom PIL import Image, ImageFilter\n#Read image\nim = Image.open( 'image.jpg' )\n#Display image\nim.show()\n\n#Applying a filter to the image\nim_sharp = im.filter( ImageFilter.SHARPEN )\n#Saving the filtered image to a new file\nim_sharp.save( 'image_sharpened.jpg', 'JPEG' )\n\n#Splitting the image into its respective bands, i.e. Red, Green,\n#and Blue for RGB\nr,g,b = im_sharp.split()\n\n#Viewing EXIF data embedded in image\nexif_data = im._getexif()\nexif_data",
            "title": "Image manipulation in Python"
        },
        {
            "location": "/python/image-manipulation/#image-manipulation-in-python",
            "text": "The  Python Imaging Library  (PIL) development has stagnated, with its last release in 2009. Luckily, there\u2019s an actively-developed fork of PIL called  Pillow . Pillow  is easier to install, runs on all operating systems, and supports Python 3.",
            "title": "Image manipulation in Python"
        },
        {
            "location": "/python/image-manipulation/#pillow",
            "text": "Pillow and PIL cannot co-exist in the same environment. Before installing Pillow, please uninstall PIL.  Pillow >= 2.0.0 supports Python versions 2.6, 2.7, 3.2, 3.3, 3.4  Before installing Pillow, you\u2019ll have to install Pillow\u2019s prerequisites.  Instructions here .",
            "title": "Pillow"
        },
        {
            "location": "/python/image-manipulation/#instalation",
            "text": "Windows :   $ pip install Pillow  Linux (Debian or Ubuntu) :   Make sure you have Python\u2019s development libraries installed. In Debian or Ubuntu:  $ sudo apt-get install python3-dev python3-setuptools \nPrerequisites are installed on Ubuntu 12.04 LTS or Raspian Wheezy 7.0 with:  $ sudo apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk  $ pip install Pillow  from PIL import Image, ImageFilter\n#Read image\nim = Image.open( 'image.jpg' )\n#Display image\nim.show()\n\n#Applying a filter to the image\nim_sharp = im.filter( ImageFilter.SHARPEN )\n#Saving the filtered image to a new file\nim_sharp.save( 'image_sharpened.jpg', 'JPEG' )\n\n#Splitting the image into its respective bands, i.e. Red, Green,\n#and Blue for RGB\nr,g,b = im_sharp.split()\n\n#Viewing EXIF data embedded in image\nexif_data = im._getexif()\nexif_data",
            "title": "Instalation:"
        },
        {
            "location": "/python/imports/",
            "text": "Imports in Python\n\n\nNamespace\n\n\nFor example, you might be writing some code that has a function called \nfun()\n and there is another module available, which also has a function with the name \nfun()\n. Now the interpreter has no way of knowing which version of \nfun()\n function you are referring within your code.\n\n\nNamespace\n is designed to overcome this difficulty and is used to differentiate functions, classes, variables etc. with the same name, available in different modules.\n\n\nModule vs. Package\n\n\nA Python \nmodule\n is simply a Python source file, which can expose classes, functions and global variables. When imported from another Python source file, the file name is sometimes treated as a namespace.\n\n\nA Python \npackage\n is simply a directory of Python module(s).\n\n\n__init__.py\n\n\nThe \n__init__.py\n file is the first thing that gets executed when a package is loaded.\n\n\nMore on the \n__init__.py\n file in the \nPackages (with the \n__init__.py\n file) and Relative Imports\n section.\n\n\nRelative vs. Absolute Imports\n\n\nRelative imports\n - specific location of the modules to be imported are relative to the current package.\n\n\nAbsolute imports\n - an import where you fully specify the location of the entities being imported.\n\n\nRegular Imports\n\n\n\n\nAssume the following file structure.\n\n\nsomeDir/\n    main.py\n    siblingModule.py\n\n\n\n\nThe following shows different ways to import the module \nsiblingModule.py\n into \nmain.py\n.\n\n\n# siblingModule.py\n\ndef siblingModuleFun():\n    print('Hello from siblingModuleFun')\n\ndef siblingModuleFunTwo():\n    print('Hello from siblingModuleFunTwo')\n\n\n\n\n# main.py\n\n# Provides access to all exposed functions, global variables, classes, etc.\n# We need to specify the namespace explicitly, hence we always have to prepend the module name.\n# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules.\nimport siblingModule\n\nsiblingModule.siblingModuleFun() # Hello from siblingModuleFun\nsiblingModule.siblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n# If siblingModule is already defined in current namespace, we can use the 'as' keyword to give the module a different namespace identifier.\nimport siblingModule as sibMod\n\nsibMod.siblingModuleFun() # Hello from siblingModuleFun\nsibMod.siblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n# Only imports specific entities from a module.\n# Allows to access the entity without prepending module name.\n# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module name to help as reach the function.\nfrom siblingModule import siblingModuleFun\n\nsiblingModuleFun() # Hello from siblingModuleFun\n\nsiblingModuleFunTwo() # Error\nsiblingModule.siblingModuleFunTwo() # Error\n\n# Both 'from siblingModule import *' and 'import siblingModule' import all entities from the module.\n# With 'import siblingModule' you are allowed to have multiple function with the same name, from different modules.\n# With 'from siblingModule import *' the functions with the same name will overwrite any function from the imported module(s).\nfrom siblingModule import *\n\nsiblingModuleFun() # Hello from siblingModuleFun\nsiblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n\n\n\nLocal Imports\n\n\n\n\nImporting modules at the top of the script, is importing the module into the global scope, which means that any functions will be able to use it. \n\n\nA \nlocal import\n is when you import a module into local scope, which means that it exists only within the block that it was loaded in.\n\n\nimport globalModule  # Global scope\n\ndef funOne(a):\n\n    # Local scope\n    import localModule\n\n    globalModule.someFunction()\n    return localModule.someFunction()\n\ndef funTwo():\n\n    globalModule.someFunction()\n    return localModule.someFunction() # Error\n\nglobalModule.someFunction()\n\n\n\n\nOptional Imports\n\n\n\n\nOptional imports\n are used when you have a preferred module or package that you want to use, but you also want a fallback in case it something goes wrong.\n\n\nYou might use \noptional imports\n to support multiple operating system, resolve issues between different versions,  etc.\n\n\ntry:\n    # Import 'someModuleA' that is only available in Windows\n    import someModuleA\nexcept ImportError:\n    try:\n        # Import 'someModuleB' that is only available in Linux\n        import someModuleB\n    except ImportError:\n\n\n\n\nCircular Imports\n\n\n\n\nCircular imports\n happen when you create two modules that import each other.\n\n\n# A.py\n\nimport B\n\ndef Afun():\n    print('Hello from Afun')\n\nB.Bfun()\nAfun()\n\n\n\n\n# B.py\n\nimport A\n\ndef Bfun():\n    print('Hello from Bfun')\n\nA.Afun()\nBfun()\n\n\n\n\nIf you run either of these modules, you should receive an \nAttributeError\n. This happens because both modules are attempting to import each other. Basically what\u2019s happening here is that \nA.py\n is trying to import \nB.py\n, but it can\u2019t do that because \nB.py\n is attempting to import \nA.py\n, which is already being executed. To prevent this kind of thing from happening, refactor your code.\n\n\nShadowed imports\n\n\n\n\nShadow imports\n happen when the programmer creates a module with the same name as a standard Python module.\n\n\nIn this case, create a file named \nmath.py\n and put the following code inside it:\n\n\nimport math\n\ndef square_root(number):\n    return math.sqrt(number)\n\nsquare_root(72)\n\n\n\n\nWhen you run a Python script, the first place Python looks for a module called \nmath\n is in the currently running script\u2019s directory. In this case, it finds the module we\u2019re running and tries to use that. But our module doesn\u2019t have a function or attribute called \nsqrt\n, so an \nAttributeError\n is raised.\n\n\nPackages (without the \n__init__.py\n file)\n\n\n\n\nAssume the following file structure.\n\n\nsomeDir/\n    main.py\n    subModules/\n        subA.py\n        subSubModules/\n            subSubA.py\n\n\n\n\n# subA.py\n\ndef subAFun():\n    print('Hello from subAFun')\n\ndef subAFunTwo():\n    print('Hello from subAFunTwo')\n\n\n\n\n# subSubA.py\n\ndef subSubAFun():\n    print('Hello from subSubAFun')\n\ndef subSubAFunTwo():\n    print('Hello from subSubAFunTwo')\n\n\n\n\n# main.py\n\n# Provides access to all exposed functions, global variables, public classes, etc. in a module 'subA'.\n# We need to specify the namespace explicitly, hence we have to prepend the package name and/or module name.\n# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules/packages.\nimport subModules.subA\n\nsubModules.subA.subAFun() # Hello from subAFun\nsubModules.subA.subAFunTwo() # Hello from subAFunTwo\n\n# Only imports specific entities from a module.\n# Allows to access the entity without prepending module name.\n# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module/package name to help as reach the function.\nfrom subModules.subA import subAFun\n\nsubAFun() # Hello from subAFun\nsubAFunTwo() # Error\n\n# To me, this is the most clear way of import modules from subdirectories, and it allows to differentiate between namespaces.\nfrom subModules import subA\n\nsubA.subAFun() # Hello from subAFun\nsubA.subAFunTwo() # Hello from subAFunTwo\n\n\n\n\n# Importing all entities from a sub-submodule.\nimport subModules.subSubModules.subSubA\n\nsubModules.subSubModules.subSubA.subSubAFun() # Hello from subSubAFun\nsubModules.subSubModules.subSubA.subSubAFunTwo() # Hello from subSubAFunTwo\n\n# Importing a specific entity from a sub-submodule.\nfrom subModules.subSubModules.subSubA import subSubAFun\n\nsubSubAFun() # Hello from subSubAFun\nsubSubAFunTwo() # Error\n\n# Imports all entities.\n# Allows to differentiate between namespaces.\nfrom subModules.subSubModules import subSubA\n\nsubSubA.subSubAFun() # Hello from subSubAFun\nsubSubA.subSubAFunTwo() # Hello from subSubAFunTwo\n\n\n\n\nPackages (with the \n__init__.py\n file) and Relative Imports\n\n\n\n\n__init__.py\n\n\nThere are two main reasons for using the \n__init__.py\n file.\n\n\n1. For convenience,  other users will not need to know your module's exact location in the package hierarchy.\n\n\nsomeDir/\n    __init__.py\n    A.py\n    B.py\n    ...\n    Z.py\n\n\n\n\n# A.py\n\ndef add(x, y):\n    return x + y\n\n\n\n\n# __init__.py\n\nfrom A import *\nfrom B import *\n...\nfrom Z import *\n\n\n\n\nThen others can call \nadd(x, y)\n , without knowing \nA.py\n exists\n\n\nfrom someDir import add\n\n\n\n\nWithout \n__init__.py\n\n\nfrom someDir.A import add\n\n\n\n\n2. If you want something to be initialized as soon as the package gets executed.\n\n\nRelative Imports\n\n\nNote that relative imports are not specific to \n__init__.py\n files.\n\n\n'__main__'\n is the name of the scope in which top-level code executes. A module\u2019s\n__name__\n variable is set to \n'__main__'\n when read from standard input, a script, or from an interactive prompt.\n\n\nRelative imports use the module's \n__name__\n variable to determine where it is in a package.  When you use a relative import, such as \nfrom ..someDir import someModule\n, the two dots indicate to step up a level in the package hierarchy.  For instance, if your current module is \nmoduleA\n, then it's \n__name__\n variable is \nsomeDir.subDir.moduleA\n. Then, writing \nfrom ..moduleB import *\n in \nmoduleA\n means, go up a directory, and import everything from \nmoduleB\n. \nmoduleB\n would be found on the same level as the \nsubDir\n directory.\n\n\nHowever, if your module's name is \n__main__\n,  you cannot use \nfrom ..somePath import moduleName\n statements.\n\n\nLoading Modules with the Help of the \ninit.py\n File\n\n\nAssume the following file structure.\n\n\nsomeDir/\n    main.py\n    subModules/\n        __init__.py\n        subA.py\n        subSubModules/\n            __init__.py\n            subSubA.py\n\n\n\n\n# subA.py\n\ndef subAFun():\n    print('Hello from subAFun')\n\ndef subAFunTwo():\n    print('Hello from subAFunTwo')\n\n\n\n\n# subSubA.py\n\ndef subSubAFun():\n    print('Hello from subSubAFun')\n\ndef subSubAFunTwo():\n    print('Hello from subSubAFunTwo')\n\n\n\n\n# __init__.py from subDir\n\n# Adds 'subAFun()' and 'subAFunTwo()' to the 'subDir' namespace \nfrom .subA import *\n\n# The following two import statement do the same thing, they add 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace. The first one assumes '__init__.py' is empty in 'subSubDir', and the second one, assumes '__init__.py' in 'subSubDir' contains 'from .subSubA import *'.\n\n# Assumes '__init__.py' is empty in 'subSubDir'\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace\nfrom .subSubDir.subSubA import *\n\n# Assumes '__init__.py' in 'subSubDir' has 'from .subSubA import *'\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace\nfrom .subSubDir import *\n\n\n\n\n# __init__.py from subSubDir\n\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subSubDir' namespace\nfrom .subSubA import *\n\n\n\n\n# main.py\n\nimport subDir\n\nsubDir.subAFun() # Hello from subAFun\nsubDir.subAFunTwo() # Hello from subAFunTwo\nsubDir.subSubAFun() # Hello from subSubAFun\nsubDir.subSubAFunTwo() # Hello from subSubAFunTwo\n\n\n\n\nFrom the above, we can observe that it's almost as though \n__init__.py\n converts a package into a module, or more correctly makes a package behave like a module.\n\n\nTo access functions of \nsubA.py\n in \nsubSubA.py\n.\nOnly works if the \n__name__\n variable of \nsubSubA.py\n is not \n'__main__'\n\n\n# subSubA.py\n\nfrom ..subA import *\n\nsubAFun() # Hello from subAFun\nsubAFunTwo() # Hello from subAFunTwo",
            "title": "Imports in Python"
        },
        {
            "location": "/python/imports/#imports-in-python",
            "text": "",
            "title": "Imports in Python"
        },
        {
            "location": "/python/imports/#namespace",
            "text": "For example, you might be writing some code that has a function called  fun()  and there is another module available, which also has a function with the name  fun() . Now the interpreter has no way of knowing which version of  fun()  function you are referring within your code.  Namespace  is designed to overcome this difficulty and is used to differentiate functions, classes, variables etc. with the same name, available in different modules.",
            "title": "Namespace"
        },
        {
            "location": "/python/imports/#module-vs-package",
            "text": "A Python  module  is simply a Python source file, which can expose classes, functions and global variables. When imported from another Python source file, the file name is sometimes treated as a namespace.  A Python  package  is simply a directory of Python module(s).",
            "title": "Module vs. Package"
        },
        {
            "location": "/python/imports/#__init__py",
            "text": "The  __init__.py  file is the first thing that gets executed when a package is loaded.  More on the  __init__.py  file in the  Packages (with the  __init__.py  file) and Relative Imports  section.",
            "title": "__init__.py"
        },
        {
            "location": "/python/imports/#relative-vs-absolute-imports",
            "text": "Relative imports  - specific location of the modules to be imported are relative to the current package.  Absolute imports  - an import where you fully specify the location of the entities being imported.",
            "title": "Relative vs. Absolute Imports"
        },
        {
            "location": "/python/imports/#regular-imports",
            "text": "Assume the following file structure.  someDir/\n    main.py\n    siblingModule.py  The following shows different ways to import the module  siblingModule.py  into  main.py .  # siblingModule.py\n\ndef siblingModuleFun():\n    print('Hello from siblingModuleFun')\n\ndef siblingModuleFunTwo():\n    print('Hello from siblingModuleFunTwo')  # main.py\n\n# Provides access to all exposed functions, global variables, classes, etc.\n# We need to specify the namespace explicitly, hence we always have to prepend the module name.\n# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules.\nimport siblingModule\n\nsiblingModule.siblingModuleFun() # Hello from siblingModuleFun\nsiblingModule.siblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n# If siblingModule is already defined in current namespace, we can use the 'as' keyword to give the module a different namespace identifier.\nimport siblingModule as sibMod\n\nsibMod.siblingModuleFun() # Hello from siblingModuleFun\nsibMod.siblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n# Only imports specific entities from a module.\n# Allows to access the entity without prepending module name.\n# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module name to help as reach the function.\nfrom siblingModule import siblingModuleFun\n\nsiblingModuleFun() # Hello from siblingModuleFun\n\nsiblingModuleFunTwo() # Error\nsiblingModule.siblingModuleFunTwo() # Error\n\n# Both 'from siblingModule import *' and 'import siblingModule' import all entities from the module.\n# With 'import siblingModule' you are allowed to have multiple function with the same name, from different modules.\n# With 'from siblingModule import *' the functions with the same name will overwrite any function from the imported module(s).\nfrom siblingModule import *\n\nsiblingModuleFun() # Hello from siblingModuleFun\nsiblingModuleFunTwo() # Hello from siblingModuleFunTwo",
            "title": "Regular Imports"
        },
        {
            "location": "/python/imports/#local-imports",
            "text": "Importing modules at the top of the script, is importing the module into the global scope, which means that any functions will be able to use it.   A  local import  is when you import a module into local scope, which means that it exists only within the block that it was loaded in.  import globalModule  # Global scope\n\ndef funOne(a):\n\n    # Local scope\n    import localModule\n\n    globalModule.someFunction()\n    return localModule.someFunction()\n\ndef funTwo():\n\n    globalModule.someFunction()\n    return localModule.someFunction() # Error\n\nglobalModule.someFunction()",
            "title": "Local Imports"
        },
        {
            "location": "/python/imports/#optional-imports",
            "text": "Optional imports  are used when you have a preferred module or package that you want to use, but you also want a fallback in case it something goes wrong.  You might use  optional imports  to support multiple operating system, resolve issues between different versions,  etc.  try:\n    # Import 'someModuleA' that is only available in Windows\n    import someModuleA\nexcept ImportError:\n    try:\n        # Import 'someModuleB' that is only available in Linux\n        import someModuleB\n    except ImportError:",
            "title": "Optional Imports"
        },
        {
            "location": "/python/imports/#circular-imports",
            "text": "Circular imports  happen when you create two modules that import each other.  # A.py\n\nimport B\n\ndef Afun():\n    print('Hello from Afun')\n\nB.Bfun()\nAfun()  # B.py\n\nimport A\n\ndef Bfun():\n    print('Hello from Bfun')\n\nA.Afun()\nBfun()  If you run either of these modules, you should receive an  AttributeError . This happens because both modules are attempting to import each other. Basically what\u2019s happening here is that  A.py  is trying to import  B.py , but it can\u2019t do that because  B.py  is attempting to import  A.py , which is already being executed. To prevent this kind of thing from happening, refactor your code.",
            "title": "Circular Imports"
        },
        {
            "location": "/python/imports/#shadowed-imports",
            "text": "Shadow imports  happen when the programmer creates a module with the same name as a standard Python module.  In this case, create a file named  math.py  and put the following code inside it:  import math\n\ndef square_root(number):\n    return math.sqrt(number)\n\nsquare_root(72)  When you run a Python script, the first place Python looks for a module called  math  is in the currently running script\u2019s directory. In this case, it finds the module we\u2019re running and tries to use that. But our module doesn\u2019t have a function or attribute called  sqrt , so an  AttributeError  is raised.",
            "title": "Shadowed imports"
        },
        {
            "location": "/python/imports/#packages-without-the-__init__py-file",
            "text": "Assume the following file structure.  someDir/\n    main.py\n    subModules/\n        subA.py\n        subSubModules/\n            subSubA.py  # subA.py\n\ndef subAFun():\n    print('Hello from subAFun')\n\ndef subAFunTwo():\n    print('Hello from subAFunTwo')  # subSubA.py\n\ndef subSubAFun():\n    print('Hello from subSubAFun')\n\ndef subSubAFunTwo():\n    print('Hello from subSubAFunTwo')  # main.py\n\n# Provides access to all exposed functions, global variables, public classes, etc. in a module 'subA'.\n# We need to specify the namespace explicitly, hence we have to prepend the package name and/or module name.\n# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules/packages.\nimport subModules.subA\n\nsubModules.subA.subAFun() # Hello from subAFun\nsubModules.subA.subAFunTwo() # Hello from subAFunTwo\n\n# Only imports specific entities from a module.\n# Allows to access the entity without prepending module name.\n# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module/package name to help as reach the function.\nfrom subModules.subA import subAFun\n\nsubAFun() # Hello from subAFun\nsubAFunTwo() # Error\n\n# To me, this is the most clear way of import modules from subdirectories, and it allows to differentiate between namespaces.\nfrom subModules import subA\n\nsubA.subAFun() # Hello from subAFun\nsubA.subAFunTwo() # Hello from subAFunTwo  # Importing all entities from a sub-submodule.\nimport subModules.subSubModules.subSubA\n\nsubModules.subSubModules.subSubA.subSubAFun() # Hello from subSubAFun\nsubModules.subSubModules.subSubA.subSubAFunTwo() # Hello from subSubAFunTwo\n\n# Importing a specific entity from a sub-submodule.\nfrom subModules.subSubModules.subSubA import subSubAFun\n\nsubSubAFun() # Hello from subSubAFun\nsubSubAFunTwo() # Error\n\n# Imports all entities.\n# Allows to differentiate between namespaces.\nfrom subModules.subSubModules import subSubA\n\nsubSubA.subSubAFun() # Hello from subSubAFun\nsubSubA.subSubAFunTwo() # Hello from subSubAFunTwo",
            "title": "Packages (without the __init__.py file)"
        },
        {
            "location": "/python/imports/#packages-with-the-__init__py-file-and-relative-imports",
            "text": "",
            "title": "Packages (with the __init__.py file) and Relative Imports"
        },
        {
            "location": "/python/imports/#__init__py_1",
            "text": "There are two main reasons for using the  __init__.py  file.",
            "title": "__init__.py"
        },
        {
            "location": "/python/imports/#1-for-convenience-other-users-will-not-need-to-know-your-modules-exact-location-in-the-package-hierarchy",
            "text": "someDir/\n    __init__.py\n    A.py\n    B.py\n    ...\n    Z.py  # A.py\n\ndef add(x, y):\n    return x + y  # __init__.py\n\nfrom A import *\nfrom B import *\n...\nfrom Z import *  Then others can call  add(x, y)  , without knowing  A.py  exists  from someDir import add  Without  __init__.py  from someDir.A import add",
            "title": "1. For convenience,  other users will not need to know your module's exact location in the package hierarchy."
        },
        {
            "location": "/python/imports/#2-if-you-want-something-to-be-initialized-as-soon-as-the-package-gets-executed",
            "text": "",
            "title": "2. If you want something to be initialized as soon as the package gets executed."
        },
        {
            "location": "/python/imports/#relative-imports",
            "text": "Note that relative imports are not specific to  __init__.py  files.  '__main__'  is the name of the scope in which top-level code executes. A module\u2019s __name__  variable is set to  '__main__'  when read from standard input, a script, or from an interactive prompt.  Relative imports use the module's  __name__  variable to determine where it is in a package.  When you use a relative import, such as  from ..someDir import someModule , the two dots indicate to step up a level in the package hierarchy.  For instance, if your current module is  moduleA , then it's  __name__  variable is  someDir.subDir.moduleA . Then, writing  from ..moduleB import *  in  moduleA  means, go up a directory, and import everything from  moduleB .  moduleB  would be found on the same level as the  subDir  directory.  However, if your module's name is  __main__ ,  you cannot use  from ..somePath import moduleName  statements.",
            "title": "Relative Imports"
        },
        {
            "location": "/python/imports/#loading-modules-with-the-help-of-the-initpy-file",
            "text": "Assume the following file structure.  someDir/\n    main.py\n    subModules/\n        __init__.py\n        subA.py\n        subSubModules/\n            __init__.py\n            subSubA.py  # subA.py\n\ndef subAFun():\n    print('Hello from subAFun')\n\ndef subAFunTwo():\n    print('Hello from subAFunTwo')  # subSubA.py\n\ndef subSubAFun():\n    print('Hello from subSubAFun')\n\ndef subSubAFunTwo():\n    print('Hello from subSubAFunTwo')  # __init__.py from subDir\n\n# Adds 'subAFun()' and 'subAFunTwo()' to the 'subDir' namespace \nfrom .subA import *\n\n# The following two import statement do the same thing, they add 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace. The first one assumes '__init__.py' is empty in 'subSubDir', and the second one, assumes '__init__.py' in 'subSubDir' contains 'from .subSubA import *'.\n\n# Assumes '__init__.py' is empty in 'subSubDir'\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace\nfrom .subSubDir.subSubA import *\n\n# Assumes '__init__.py' in 'subSubDir' has 'from .subSubA import *'\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace\nfrom .subSubDir import *  # __init__.py from subSubDir\n\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subSubDir' namespace\nfrom .subSubA import *  # main.py\n\nimport subDir\n\nsubDir.subAFun() # Hello from subAFun\nsubDir.subAFunTwo() # Hello from subAFunTwo\nsubDir.subSubAFun() # Hello from subSubAFun\nsubDir.subSubAFunTwo() # Hello from subSubAFunTwo  From the above, we can observe that it's almost as though  __init__.py  converts a package into a module, or more correctly makes a package behave like a module.  To access functions of  subA.py  in  subSubA.py .\nOnly works if the  __name__  variable of  subSubA.py  is not  '__main__'  # subSubA.py\n\nfrom ..subA import *\n\nsubAFun() # Hello from subAFun\nsubAFunTwo() # Hello from subAFunTwo",
            "title": "Loading Modules with the Help of the init.py File"
        },
        {
            "location": "/python/magic-methods/",
            "text": "Introduction\n\n\nThis guide is the culmination of a few months' worth of blog posts. The subject is \nmagic methods\n.\n\n\nWhat are magic methods? They're everything in object-oriented Python. They're special methods that you can define to add \"magic\" to your classes. They're always surrounded by double underscores (e.g. \n__init__\n or \n__lt__\n). They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section (and that may very well be by design, since they're all detailed in the \nlanguage reference\n, along with boring syntax descriptions, etc.).\n\n\nSo, to fix what I perceived as a flaw in Python's documentation, I set out to provide some more plain-English, example-driven documentation for Python's magic methods. I started out with weekly blog posts, and now that I've finished with those, I've put together this guide.\n\n\nI hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it's just intended to be a user-friendly guide to Python's magic methods.\n\n\nConstruction and Initialization\n\n\nEveryone knows the most basic magic method, \n__init__\n. It's the way that we can define the initialization behavior of an object. However, when I call \nx = SomeClass()\n, \n__init__\n is not the first thing to get called. Actually, it's a method called \n__new__\n, which actually creates the instance, then passes any arguments at creation on to the initializer. At the other end of the object's lifespan, there's \n__del__\n. Let's take a closer look at these 3 magic methods:\n\n\n__new__(cls, [...)\n\n:    \n__new__\n is the first method to get called in an object's instantiation. It takes the class, then any other arguments that it will pass along to \n__init__\n. \n__new__\n is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don't want to go in to too much detail on \n__new__\n because it's not too useful, but it is covered in great detail \nin the Python docs\n.\n\n\n__init__(self, [...)\n\n:    The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called \nx = SomeClass(10, 'foo')\n, \n__init__\n would get passed \n10\n and \n'foo'\n as arguments. \n__init__\n is almost universally used in Python class definitions.\n\n\n__del__(self)\n\n:    If \n__new__\n and \n__init__\n formed the constructor of the object, \n__del__\n is the destructor. It doesn't implement behavior for the statement \ndel x\n (so that code would not translate to \nx.__del__()\n). Rather, it defines behavior for when an object is garbage collected. It can be quite useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that \n__del__\n will be executed if the object is still alive when the interpreter exits, so \n__del__\n can't serve as a replacement for good coding practices (like always closing a connection when you're done with it. In fact, \n__del__\n should almost never be used because of the precarious circumstances under which it is called; use it with caution!\n\n\nPutting it all together, here's an example of \n__init__\n and \n__del__\n in action:\n\n\n:::python\nfrom os.path import join\n\nclass FileObject:\n    '''Wrapper for file objects to make sure the file gets closed on deletion.'''\n\n    def __init__(self, filepath='~', filename='sample.txt'):\n        # open a file filename in filepath in read and write mode\n        self.file = open(join(filepath, filename), 'r+')\n\n    def __del__(self):\n        self.file.close()\n        del self.file\n\n\n\nMaking Operators Work on Custom Classes\n\n\nOne of the biggest advantages of using Python's magic methods is that they provide a simple way to make objects behave like built-in types. That means you can avoid ugly, counter-intuitive, and nonstandard ways of performing basic operators. In some languages, it's common to do something like this:\n\n\n:::python\nif instance.equals(other_instance):\n    # do something\n\n\n\nYou could certainly do this in Python, too, but this adds confusion and is unnecessarily verbose. Different libraries might use different names for the same operations, making the client do way more work than necessary. With the power of magic methods, however, we can define one method (\n__eq__\n, in this case), and say what we \nmean\n instead:\n\n\n:::python\nif instance == other_instance:\n    #do something\n\n\n\nThat's part of the power of magic methods. The vast majority of them allow us to define meaning for operators so that we can use them on our own classes just like they were built in types.\n\n\nComparison magic methods\n\n\nPython has a whole slew of magic methods designed to implement intuitive comparisons between objects using operators, not awkward method calls. They also provide a way to override the default Python behavior for comparisons of objects (by reference). Here's the list of those methods and what they do:\n\n\n__cmp__(self, other)\n\n:    \n__cmp__\n is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (<, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else). \n__cmp__\n should return a negative integer if \nself < other\n, zero if \nself == other\n, and positive if \nself > other\n. It's usually best to define each comparison you need rather than define them all at once, but \n__cmp__\n can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar criteria.\n\n\n__eq__(self, other)\n\n:    Defines behavior for the equality operator, \n==\n.\n\n\n__ne__(self, other)\n\n:    Defines behavior for the inequality operator, \n!=\n.\n\n\n__lt__(self, other)\n\n:    Defines behavior for the less-than operator, \n<\n.\n\n\n__gt__(self, other)\n\n:    Defines behavior for the greater-than operator, \n>\n.\n\n\n__le__(self, other)\n\n:    Defines behavior for the less-than-or-equal-to operator, \n<=\n.\n\n\n__ge__(self, other)\n\n:    Defines behavior for the greater-than-or-equal-to operator, \n>=\n.\n\n\nFor an example, consider a class to model a word. We might want to compare words lexicographically (by the alphabet), which is the default comparison behavior for strings, but we also might want to do it based on some other criterion, like length or number of syllables. In this example, we'll compare by length. Here's an implementation:\n\n\n:::python\nclass Word(str):\n    '''Class for words, defining comparison based on word length.'''\n\n    def __new__(cls, word):\n        # Note that we have to use __new__. This is because str is an immutable\n        # type, so we have to initialize it early (at creation)\n        if ' ' in word:\n            print \"Value contains spaces. Truncating to first space.\"\n            word = word[:word.index(' ')] # Word is now all chars before first space\n        return str.__new__(cls, word)\n\n    def __gt__(self, other):\n        return len(self) > len(other)\n    def __lt__(self, other):\n        return len(self) < len(other)\n    def __ge__(self, other):\n        return len(self) >= len(other)\n    def __le__(self, other):\n        return len(self) <= len(other)\n\n\n\nNow, we can create two \nWord\ns (by using \nWord('foo')\n and \nWord('bar')\n) and compare them based on length. Note, however, that we didn't define \n__eq__\n and \n__ne__\n. This is because this would lead to some weird behavior (notably that \nWord('foo') == Word('bar')\n would evaluate to true). It wouldn't make sense to test for equality based on length, so we fall back on \nstr\n's implementation of equality.\n\n\nNow would be a good time to note that you don't have to define every comparison magic method to get rich comparisons. The standard library has kindly provided us with a class decorator in the module \nfunctools\n that will define all rich comparison methods if you only define \n__eq__\n and one other (e.g. \n__gt__\n, \n__lt__\n, etc.) This feature is only available in Python 2.7, but when you get a chance it saves a great deal of time and effort. You can use it by placing \n@total_ordering\n above your class definition.\n\n\nNumeric magic methods\n\n\nJust like you can create ways for instances of your class to be compared with comparison operators, you can define behavior for numeric operators. Buckle your seat belts, folks...there's a lot of these. For organization's sake, I've split the numeric magic methods into 5 categories: unary operators, normal arithmetic operators, reflected arithmetic operators (more on this later), augmented assignment, and type conversions.\n\n\nUnary operators and functions\n\n\nUnary operators and functions only have one operand, e.g. negation, absolute value, etc.\n\n\n__pos__(self)\n\n:    Implements behavior for unary positive (e.g. \n+some_object\n)\n\n\n__neg__(self)\n\n:    Implements behavior for negation (e.g. \n-some_object\n)\n\n\n__abs__(self)\n\n:    Implements behavior for the built in \nabs()\n function.\n\n\n__invert__(self)\n\n:    Implements behavior for inversion using the \n~\n operator. For an explanation on what this does, see \nthe Wikipedia article on bitwise operations\n.\n\n\n__round__(self, n)\n\n:    Implements behavior for the built in \nround()\n function. \nn\n is the number of decimal places to round to.\n\n\n__floor__(self)\n\n:    Implements behavior for \nmath.floor()\n, i.e., rounding down to the nearest integer.\n\n\n__ceil__(self)\n\n:    Implements behavior for \nmath.ceil()\n, i.e., rounding up to the nearest integer.\n\n\n__trunc__(self)\n\n:    Implements behavior for \nmath.trunc()\n, i.e., truncating to an integral.\n\n\nNormal arithmetic operators\n\n\nNow, we cover the typical binary operators (and a function or two): +, -, * and the like. These are, for the most part, pretty self-explanatory.\n\n\n__add__(self, other)\n\n:    Implements addition.\n\n\n__sub__(self, other)\n\n:    Implements subtraction.\n\n\n__mul__(self, other)\n\n:    Implements multiplication.\n\n\n__floordiv__(self, other)\n\n:    Implements integer division using the \n//\n operator.\n\n\n__div__(self, other)\n\n:    Implements division using the \n/\n operator.\n\n\n__truediv__(self, other)\n\n:    Implements \ntrue\n division. Note that this only works when \nfrom __future__ import division\n is in effect.\n\n\n__mod__(self, other)\n\n:    Implements modulo using the \n%\n operator.\n\n\n__divmod__(self, other)\n\n:    Implements behavior for long division using the \ndivmod()\n built in function.\n\n\n__pow__\n\n:    Implements behavior for exponents using the \n**\n operator.\n\n\n__lshift__(self, other)\n\n:    Implements left bitwise shift using the \n<<\n operator.\n\n\n__rshift__(self, other)\n\n:    Implements right bitwise shift using the \n>>\n operator.\n\n\n__and__(self, other)\n\n:    Implements bitwise and using the \n&\n operator.\n\n\n__or__(self, other)\n\n:    Implements bitwise or using the \n|\n operator.\n\n\n__xor__(self, other)\n\n:    Implements bitwise xor using the \n^\n operator.\n\n\nReflected arithmetic operators\n\n\nYou know how I said I would get to reflected arithmetic in a bit? Some of you might think it's some big, scary, foreign concept. It's actually quite simple. Here's an example:\n\n\n:::python\nsome_object + other\n\n\n\nThat was \"normal\" addition. The reflected equivalent is the same thing, except with the operands switched around:\n\n\n:::python\nother + some_object\n\n\n\nSo, all of these magic methods do the same thing as their normal equivalents, except the perform the operation with other as the first operand and self as the second, rather than the other way around. In most cases, the result of a reflected operation is the same as its normal equivalent, so you may just end up defining \n__radd__\n as calling \n__add__\n and so on. Note that the object on the left hand side of the operator (\nother\n in the example) must not define (or return \nNotImplemented\n) for its definition of the non-reflected version of an operation. For instance, in the example, \nsome_object.__radd__\n will only be called if \nother\n does not define \n__add__\n.\n\n\n__radd__(self, other)\n\n:    Implements reflected addition.\n\n\n__rsub__(self, other)\n\n:    Implements reflected subtraction.\n\n\n__rmul__(self, other)\n\n:    Implements reflected multiplication.\n\n\n__rfloordiv__(self, other)\n\n:    Implements reflected integer division using the \n//\n operator.\n\n\n__rdiv__(self, other)\n\n:    Implements reflected division using the \n/\n operator.\n\n\n__rtruediv__(self, other)\n\n:    Implements reflected \ntrue\n division. Note that this only works when \nfrom __future__ import division\n is in effect.\n\n\n__rmod__(self, other)\n\n:    Implements reflected modulo using the \n%\n operator.\n\n\n__rdivmod__(self, other)\n\n:    Implements behavior for long division using the \ndivmod()\n built in function, when \ndivmod(other, self)\n is called.\n\n\n__rpow__\n\n:    Implements behavior for reflected exponents using the \n**\n operator.\n\n\n__rlshift__(self, other)\n\n:    Implements reflected left bitwise shift using the \n<<\n operator.\n\n\n__rrshift__(self, other)\n\n:    Implements reflected right bitwise shift using the \n>>\n operator.\n\n\n__rand__(self, other)\n\n:    Implements reflected bitwise and using the \n&\n operator.\n\n\n__ror__(self, other)\n\n:    Implements reflected bitwise or using the \n|\n operator.\n\n\n__rxor__(self, other)\n\n:    Implements reflected bitwise xor using the \n^\n operator.\n\n\nAugmented assignment\n\n\nPython also has a wide variety of magic methods to allow custom behavior to be defined for augmented assignment. You're probably already familiar with augmented assignment, it combines \"normal\" operators with assignment. If you still don't know what I'm talking about, here's an example:\n\n\n:::python\nx = 5\nx += 1 # in other words x = x + 1\n\n\n\nEach of these methods should return the value that the variable on the left hand side should be assigned to (for instance, for \na += b\n, \n__iadd__\n might return \na + b\n, which would be assigned to \na\n). Here's the list:\n\n\n__iadd__(self, other)\n\n:    Implements addition with assignment.\n\n\n__isub__(self, other)\n\n:    Implements subtraction with assignment.\n\n\n__imul__(self, other)\n\n:    Implements multiplication with assignment.\n\n\n__ifloordiv__(self, other)\n\n:    Implements integer division with assignment using the \n//=\n operator.\n\n\n__idiv__(self, other)\n\n:    Implements division with assignment using the \n/=\n operator.\n\n\n__itruediv__(self, other)\n\n:    Implements \ntrue\n division with assignment. Note that this only works when \nfrom __future__ import division\n is in effect.\n\n\n__imod__(self, other)\n\n:    Implements modulo with assignment using the \n%=\n operator.\n\n\n__ipow__\n\n:    Implements behavior for exponents with assignment using the \n**=\n operator.\n\n\n__ilshift__(self, other)\n\n:    Implements left bitwise shift with assignment using the \n<<=\n operator.\n\n\n__irshift__(self, other)\n\n:    Implements right bitwise shift with assignment using the \n>>=\n operator.\n\n\n__iand__(self, other)\n\n:    Implements bitwise and with assignment using the \n&=\n operator.\n\n\n__ior__(self, other)\n\n:    Implements bitwise or with assignment using the \n|=\n operator.\n\n\n__ixor__(self, other)\n\n:    Implements bitwise xor with assignment using the \n^=\n operator.\n\n\nType conversion magic methods\n\n\nPython also has an array of magic methods designed to implement behavior for built in type conversion functions like \nfloat()\n. Here they are:\n\n\n__int__(self)\n\n:    Implements type conversion to int.\n\n\n__long__(self)\n\n:    Implements type conversion to long.\n\n\n__float__(self)\n\n:    Implements type conversion to float.\n\n\n__complex__(self)\n\n:    Implements type conversion to complex.\n\n\n__oct__(self)\n\n:    Implements type conversion to octal.\n\n\n__hex__(self)\n\n:    Implements type conversion to hexadecimal.\n\n\n__index__(self)\n\n:    Implements type conversion to an int when the object is used in a slice expression. If you define a custom numeric type that might be used in slicing, you should define \n__index__\n.\n\n\n__trunc__(self)\n\n:    Called when \nmath.trunc(self)\n is called. \n__trunc__\n should return the value of `self truncated to an integral type (usually a long).\n\n\n__coerce__(self, other)\n\n:    Method to implement mixed mode arithmetic. \n__coerce__\n should return \nNone\n if type conversion is impossible. Otherwise, it should return a pair (2-tuple) of \nself\n and \nother\n, manipulated to have the same type.\n\n\nRepresenting your Classes\n\n\nIt's often useful to have a string representation of a class. In Python, there are a few methods that you can implement in your class definition to customize how built in functions that return representations of your class behave.\n\n\n__str__(self)\n\n:    Defines behavior for when \nstr()\n is called on an instance of your class.\n\n\n__repr__(self)\n\n:    Defines behavior for when \nrepr()\n is called on an instance of your class. The major difference between \nstr()\n and \nrepr()\n is intended audience. \nrepr()\n is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas \nstr()\n is intended to be human-readable.\n\n\n__unicode__(self)\n\n:    Defines behavior for when \nunicode()\n is called on an instance of your class. \nunicode()\n is like \nstr()\n, but it returns a unicode string. Be wary: if a client calls \nstr()\n on an instance of your class and you've only defined \n__unicode__()\n, it won't work. You should always try to define \n__str__()\n as well in case someone doesn't have the luxury of using unicode.\n\n\n__format__(self, formatstr)\n\n:    Defines behavior for when an instance of your class is used in new-style string formatting. For instance, \n\"Hello, {0:abc}!\".format(a)\n would lead to the call \na.__format__(\"abc\")\n. This can be useful for defining your own numerical or string types that you might like to give special formatting options.\n\n\n__hash__(self)\n\n:    Defines behavior for when \nhash()\n is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing \n__eq__\n as well. Live by the following rule: \na == b\n implies \nhash(a) == hash(b)\n.\n\n\n__nonzero__(self)\n\n:    Defines behavior for when \nbool()\n is called on an instance of your class. Should return \nTrue\n or \nFalse\n, depending on whether you would want to consider the instance to be \nTrue\n or \nFalse\n.\n\n\n__dir__(self)\n\n:    Defines behavior for when \ndir()\n is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing \n__dir__\n is unnecessary, but it can be vitally important for interactive use of your classes if you redefine \n__getattr__\n or \n__getattribute__\n (which you will see in the next section) or are otherwise dynamically generating attributes.\n\n\n__sizeof__(self)\n\n:    Defines behavior for when \nsys.getsizeof()\n is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of it.\n\n\nWe're pretty much done with the boring (and example-free) part of the magic methods guide. Now that we've covered some of the more basic magic methods, it's time to move to more advanced material.\n\n\nControlling Attribute Access\n\n\nMany people coming to Python from other languages complain that it lacks true encapsulation for classes; that is, there's no way to define private attributes with public getter and setters. This couldn't be farther than the truth: it just happens that Python accomplishes a great deal of encapsulation through \"magic\", instead of explicit modifiers for methods or fields. Take a look:\n\n\n__getattr__(self, name)\n\n:    You can define behavior for when a user attempts to access an attribute that doesn't exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes (you can still choose to compute and return that attribute, if you wish), or deftly handing an \nAttributeError\n. It only gets called when a nonexistent attribute is accessed, however, so it isn't a true encapsulation solution.\n\n\n__setattr__(self, name, value)\n\n:    Unlike \n__getattr__\n, \n__setattr__\n is an encapsulation solution. It allows you to define behavior for assignment to an attribute regardless of whether or not that attribute exists, meaning you can define custom rules for any changes in the values of attributes. However, you have to be careful with how you use \n__setattr__\n, as the example at the end of the list will show.\n\n\n__delattr__(self, name)\n\n:    This is the exact same as \n__setattr__\n, but for deleting attributes instead of setting them. The same precautions need to be taken as with \n__setattr__\n as well in order to prevent infinite recursion (calling \ndel self.name\n in the implementation of \n__delattr__\n would cause infinite recursion).\n\n\n__getattribute__(self, name)\n\n:    After all this, \n__getattribute__\n fits in pretty well with its companions \n__setattr__\n and \n__delattr__\n. However, I don't recommend you use it. \n__getattribute__\n can only be used with new-style classes (all classes are new-style in the newest versions of Python, and in older versions you can make a class new-style by subclassing \nobject\n. It allows you to define rules for whenever an attribute's value is accessed. It suffers from some similar infinite recursion problems as its partners-in-crime (this time you call the base class's \n__getattribute__\n method to prevent this). It also mainly obviates the need for \n__getattr__\n, which, when \n__getattribute__\n is implemented, only gets called if it is called explicitly or an \nAttributeError\n is raised. This method can be used (after all, it's your choice), but I don't recommend it because it has a small use case (it's far more rare that we need special behavior to retrieve a value than to assign to it) and because it can be really difficult to implement bug-free.\n\n\nYou can easily cause a problem in your definitions of any of the methods controlling attribute access. Consider this example:\n\n\n:::python\ndef __setattr__(self, name, value):\n    self.name = value\n    # since every time an attribute is assigned, __setattr__() is called, this\n    # is recursion.\n    # so this really means self.__setattr__('name', value). Since the method\n    # keeps calling itself, the recursion goes on forever causing a crash\n\ndef __setattr__(self, name, value):\n    self.__dict__[name] = value # assigning to the dict of names in the class\n    # define custom behavior here\n\n\n\nAgain, Python's magic methods are incredibly powerful, and with great power comes great responsibility. It's important to know the proper way to use magic methods so you don't break any code.\n\n\nSo, what have we learned about custom attribute access in Python? It's not to be used lightly. In fact, it tends to be excessively powerful and counter-intuitive. But the reason why it exists is to scratch a certain itch: Python doesn't seek to make bad things impossible, but just to make them difficult. Freedom is paramount, so you can really do whatever you want. Here's an example of some of the special attribute access methods in action (note that we use \nsuper\n because not all classes have an attribute \n__dict__\n):\n\n\n:::python\nclass AccessCounter(object):\n    '''A class that contains a value and implements an access counter.\n    The counter increments each time the value is changed.'''\n\n    def __init__(self, val):\n        super(AccessCounter, self).__setattr__('counter', 0)\n        super(AccessCounter, self).__setattr__('value', val)\n\n    def __setattr__(self, name, value):\n        if name == 'value':\n            super(AccessCounter, self).__setattr__('counter', self.counter + 1)\n        # Make this unconditional.\n        # If you want to prevent other attributes to be set, raise AttributeError(name)\n        super(AccessCounter, self).__setattr__(name, value)\n\n    def __delattr__(self, name):\n        if name == 'value':\n            super(AccessCounter, self).__setattr__('counter', self.counter + 1)\n        super(AccessCounter, self).__delattr__(name)\n\n\n\nMaking Custom Sequences\n\n\nThere's a number of ways to get your Python classes to act like built in sequences (\ndict\n, \ntuple\n, \nlist\n, \nstr\n, etc.). These are by far my favorite magic methods in Python because of the absurd degree of control they give you and the way that they magically make a whole array of global functions work beautifully on instances of your class. But before we get down to the good stuff, a quick word on requirements.\n\n\nRequirements\n\n\nNow that we're talking about creating your own sequences in Python, it's time to talk about \nprotocols\n. Protocols are somewhat similar to interfaces in other languages in that they give you a set of methods you must define. However, in Python protocols are totally informal and require no explicit declarations to implement. Rather, they're more like guidelines.\n\n\nWhy are we talking about protocols now? Because implementing custom container types in Python involves using some of these protocols. First, there's the protocol for defining immutable containers: to make an immutable container, you need only define \n__len__\n and \n__getitem__\n (more on these later). The mutable container protocol requires everything that immutable containers require plus \n__setitem__\n and \n__delitem__\n. Lastly, if you want your object to be iterable, you'll have to define \n__iter__\n, which returns an iterator. That iterator must conform to an iterator protocol, which requires iterators to have methods called \n__iter__\n(returning itself) and \nnext\n.\n\n\nThe magic behind containers\n\n\nWithout any more wait, here are the magic methods that containers use:\n\n\n__len__(self)\n\n:    Returns the length of the container. Part of the protocol for both immutable and mutable containers.\n\n\n__getitem__(self, key)\n\n:    Defines behavior for when an item is accessed, using the notation \nself[key]\n. This is also part of both the mutable and immutable container protocols. It should also raise appropriate exceptions: \nTypeError\n if the type of the key is wrong and \nKeyError\n if there is no corresponding value for the key.\n\n\n__setitem__(self, key, value)\n\n:    Defines behavior for when an item is assigned to, using the notation \nself[nkey] = value\n. This is part of the mutable container protocol. Again, you should raise \nKeyError\n and \nTypeError\n where appropriate.\n\n\n__delitem__(self, key)\n\n:    Defines behavior for when an item is deleted (e.g. \ndel self[key]\n). This is only part of the mutable container protocol. You must raise the appropriate exceptions when an invalid key is used.\n\n\n__iter__(self)\n\n:    Should return an iterator for the container. Iterators are returned in a number of contexts, most notably by the \niter()\n built in function and when a container is looped over using the form \nfor x in container:\n. Iterators are their own objects, and they also must define an \n__iter__\n method that returns \nself\n.\n\n\n__reversed__(self)\n\n:    Called to implement behavior for the \nreversed()\n built in function. Should return a reversed version of the sequence. Implement this only if the sequence class is ordered, like list or tuple.\n\n\n__contains__(self, item)\n\n:    \n__contains__\n defines behavior for membership tests using \nin\n and \nnot in\n. Why isn't this part of a sequence protocol, you ask? Because when \n__contains__\n isn't defined, Python just iterates over the sequence and returns \nTrue\n if it comes across the item it's looking for.\n\n\n__missing__(self, key)\n\n:    \n__missing__\n is used in subclasses of \ndict\n. It defines behavior for whenever a key is accessed that does not exist in a dictionary (so, for instance, if I had a dictionary \nd\n and said \nd[\"george\"]\n when \n\"george\"\n is not a key in the dict, \nd.__missing__(\"george\")\n would be called).\n\n\nAn example\n\n\nFor our example, let's look at a list that implements some functional constructs that you might be used to from other languages (Haskell, for example).\n\n\n:::python\nclass FunctionalList:\n    '''A class wrapping a list with some extra functional magic, like head,\n    tail, init, last, drop, and take.'''\n\n    def __init__(self, values=None):\n        if values is None:\n            self.values = []\n        else:\n            self.values = values\n\n    def __len__(self):\n        return len(self.values)\n\n    def __getitem__(self, key):\n        # if key is of invalid type or value, the list values will raise the error\n        return self.values[key]\n\n    def __setitem__(self, key, value):\n        self.values[key] = value\n\n    def __delitem__(self, key):\n        del self.values[key]\n\n    def __iter__(self):\n        return iter(self.values)\n\n    def __reversed__(self):\n        return reversed(self.values)\n\n    def append(self, value):\n        self.values.append(value)\n    def head(self):\n        # get the first element\n        return self.values[0]\n    def tail(self):\n        # get all elements after the first\n        return self.values[1:]\n    def init(self):\n        # get elements up to the last\n        return self.values[:-1]\n    def last(self):\n        # get last element\n        return self.values[-1]\n    def drop(self, n):\n        # get all elements except first n\n        return self.values[n:]\n    def take(self, n):\n        # get first n elements\n        return self.values[:n]\n\n\n\nThere you have it, a (marginally) useful example of how to implement your own sequence. Of course, there are more useful applications of custom sequences, but quite a few of them are already implemented in the standard library (batteries included, right?), like \nCounter\n, \nOrderedDict\n, and \nNamedTuple\n.\n\n\nReflection\n\n\nYou can also control how reflection using the built in functions \nisinstance()\n and \nissubclass()\nbehaves by defining magic methods. The magic methods are:\n\n\n__instancecheck__(self, instance)\n\n:    Checks if an instance is an instance of the class you defined (e.g. \nisinstance(instance, class)\n.\n\n\n__subclasscheck__(self, subclass)\n\n:    Checks if a class subclasses the class you defined (e.g. \nissubclass(subclass, class)\n).\n\n\nThe use case for these magic methods might seem small, and that may very well be true. I won't spend too much more time on reflection magic methods because they aren't very important, but they reflect something important about object-oriented programming in Python and Python in general: there is almost always an easy way to do something, even if it's rarely necessary. These magic methods might not seem useful, but if you ever need them you'll be glad that they're there (and that you read this guide!).\n\n\nCallable Objects\n\n\nAs you may already know, in Python, functions are first-class objects. This means that they can be passed to functions and methods just as if they were objects of any other kind. This is an incredibly powerful feature.\n\n\nA special magic method in Python allows instances of your classes to behave as if they were functions, so that you can \"call\" them, pass them to functions that take functions as arguments, and so on. This is another powerful convenience feature that makes programming in Python that much sweeter.\n\n\n__call__(self, [args...])\n\n:    Allows an instance of a class to be called as a function. Essentially, this means that \nx()\n is the same as \nx.__call__()\n. Note that \n__call__\n takes a variable number of arguments; this means that you define \n__call__\n as you would any other function, taking however many arguments you'd like it to.\n\n\n__call__\n can be particularly useful in classes with instances that need to often change state. \"Calling\" the instance can be an intuitive and elegant way to change the object's state. An example might be a class representing an entity's position on a plane:\n\n\n:::python\nclass Entity:\n    '''Class to represent an entity. Callable to update the entity's position.'''\n\n    def __init__(self, size, x, y):\n        self.x, self.y = x, y\n        self.size = size\n\n    def __call__(self, x, y):\n        '''Change the position of the entity.'''\n        self.x, self.y = x, y\n\n    # snip...\n\n\n\nContext Managers\n\n\nIn Python 2.5, a new keyword was introduced in Python along with a new method for code reuse: the \nwith\n statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library), but not until \nPEP 343\n was accepted did it achieve status as a first-class language construct. You may have seen \nwith\n statements before:\n\n\n:::python\nwith open('foo.txt') as bar:\n    # perform some action with bar\n\n\n\nContext managers allow setup and cleanup actions to be taken for objects when their creation is wrapped with a \nwith\n statement. The behavior of the context manager is determined by two magic methods:\n\n\n__enter__(self)\n\n:    Defines what the context manager should do at the beginning of the block created by the \nwith\n statement. Note that the return value of \n__enter__\n is bound to the \ntarget\n of the \nwith\n statement, or the name after the \nas\n.\n\n\n__exit__(self, exception_type, exception_value, traceback)\n\n:    Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, \nexception_type\n, \nexception_value\n, and \ntraceback\n will be \nNone\n. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure \n__exit__\n returns \nTrue\n after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.\n\n\n__enter__\n and \n__exit__\n can be useful for specific classes that have well-defined and common behavior for setup and cleanup. You can also use these methods to create generic context managers that wrap other objects. Here's an example:\n\n\n:::python\nclass Closer:\n    '''A context manager to automatically close an object with a close method\n    in a with statement.'''\n\n    def __init__(self, obj):\n        self.obj = obj\n\n    def __enter__(self):\n        return self.obj # bound to target\n\n    def __exit__(self, exception_type, exception_val, trace):\n        try:\n           self.obj.close()\n        except AttributeError: # obj isn't closable\n           print 'Not closable.'\n           return True # exception handled successfully\n\n\n\nHere's an example of \nCloser\n in action, using an FTP connection to demonstrate it (a closable socket):\n\n\n:::pythonconsole\n>>> from magicmethods import Closer\n>>> from ftplib import FTP\n>>> with Closer(FTP('ftp.somesite.com')) as conn:\n...     conn.dir()\n...\n# output omitted for brevity\n>>> conn.dir()\n# long AttributeError message, can't use a connection that's closed\n>>> with Closer(int(5)) as i:\n...     i += 1\n...\nNot closable.\n>>> i\n6\n\n\n\nSee how our wrapper gracefully handled both proper and improper uses? That's the power of context managers and magic methods. Note that the Python standard library includes a module \ncontextlib\n that contains a context manager, \ncontextlib.closing()\n, that does approximately the same thing (without any handling of the case where an object does not have a \nclose()\n method).\n\n\nAbstract Base Classes\n\n\nSee http://docs.python.org/2/library/abc.html.\n\n\nBuilding Descriptor Objects\n\n\nDescriptors are classes which, when accessed through either getting, setting, or deleting, can also alter other objects. Descriptors aren't meant to stand alone; rather, they're meant to be held by an owner class. Descriptors can be useful when building object-oriented databases or classes that have attributes whose values are dependent on each other. Descriptors are particularly useful when representing attributes in several different units of measurement or representing computed attributes (like distance from the origin in a class to represent a point on a grid).\n\n\nTo be a descriptor, a class must have at least one of \n__get__\n, \n__set__\n, and \n__delete__\n implemented. Let's take a look at those magic methods:\n\n\n__get__(self, instance, owner)\n\n:    Define behavior for when the descriptor's value is retrieved. \ninstance\n is the instance of the owner object. \nowner\n is the owner class itself.\n\n\n__set__(self, instance, value)\n\n:    Define behavior for when the descriptor's value is changed. \ninstance\n is the instance of the owner class and \nvalue\n is the value to set the descriptor to.\n\n\n__delete__(self, instance)\n\n:    Define behavior for when the descriptor's value is deleted. \ninstance\n is the instance of the owner object.\n\n\nNow, an example of a useful application of descriptors: unit conversions.\n\n\n:::python\nclass Meter(object):\n    '''Descriptor for a meter.'''\n\n    def __init__(self, value=0.0):\n        self.value = float(value)\n    def __get__(self, instance, owner):\n        return self.value\n    def __set__(self, instance, value):\n        self.value = float(value)\n\nclass Foot(object):\n    '''Descriptor for a foot.'''\n\n    def __get__(self, instance, owner):\n        return instance.meter * 3.2808\n    def __set__(self, instance, value):\n        instance.meter = float(value) / 3.2808\n\nclass Distance(object):\n    '''Class to represent distance holding two descriptors for feet and\n    meters.'''\n    meter = Meter()\n    foot = Foot()\n\n\n\nCopying\n\n\nSometimes, particularly when dealing with mutable objects, you want to be able to copy an object and make changes without affecting what you copied from. This is where Python's \ncopy\n comes into play. However (fortunately), Python modules are not sentient, so we don't have to worry about a Linux-based robot uprising, but we do have to tell Python how to efficiently copy things.\n\n\n__copy__(self)\n\n:   Defines behavior for \ncopy.copy()\n for instances of your class. \ncopy.copy()\n returns a \nshallow copy\n of your object -- this means that, while the instance itself is a new instance, all of its data is referenced -- i.e., the object itself is copied, but its data is still referenced (and hence changes to data in a shallow copy may cause changes in the original).\n\n\n__deepcopy__(self, memodict={})\n\n:    Defines behavior for \ncopy.deepcopy()\n for instances of your class. \ncopy.deepcopy()\n returns a \ndeep copy\n of your object -- the object \nand\n its data are both copied. \nmemodict\n is a cache of previously copied objects -- this optimizes copying and prevents infinite recursion when copying recursive data structures. When you want to deep copy an individual attribute, call \ncopy.deepcopy()\n on that attribute with \nmemodict\n as the first argument.\n\n\nWhat are some use cases for these magic methods? As always, in any case where you need more fine-grained control than what the default behavior gives you. For instance, if you are attempting to copy an object that stores a cache as a dictionary (which might be large), it might not make sense to copy the cache as well -- if the cache can be shared in memory between instances, then it should be.\n\n\nPickling Your Objects\n\n\nIf you spend time with other Pythonistas, chances are you've at least heard of pickling. Pickling is a serialization process for Python data structures, and can be incredibly useful when you need to store an object and retrieve it later (usually for caching). It's also a major source of worries and confusion.\n\n\nPickling is so important that it doesn't just have its own module (\npickle\n), but its own \nprotocol\n and the magic methods to go with it. But first, a brief word on how to pickle existing types(feel free to skip it if you already know).\n\n\nPickling: A Quick Soak in the Brine\n\n\nLet's dive into pickling. Say you have a dictionary that you want to store and retrieve later. You couldwrite it's contents to a file, carefully making sure that you write correct syntax, then retrieve it using either \nexec()\n or processing the file input. But this is precarious at best: if you store important data in plain text, it could be corrupted or changed in any number of ways to make your program crash or worse run malicious code on your computer. Instead, we're going to pickle it:\n\n\n:::python\nimport pickle\n\ndata = {'foo': [1, 2, 3],\n        'bar': ('Hello', 'world!'),\n        'baz': True}\njar = open('data.pkl', 'wb')\npickle.dump(data, jar) # write the pickled data to the file jar\njar.close()\n\n\n\nNow, a few hours later, we want it back. All we have to do is unpickle it:\n\n\n:::python\nimport pickle\n\npkl_file = open('data.pkl', 'rb') # connect to the pickled data\ndata = pickle.load(pkl_file) # load it into a variable\nprint data\npkl_file.close()\n\n\n\nWhat happens? Exactly what you expect. It's just like we had \ndata\n all along.\n\n\nNow, for a word of caution: pickling is not perfect. Pickle files are easily corrupted on accident and on purpose. Pickling may be more secure than using flat text files, but it still can be used to run malicious code. It's also incompatible across different versions of Python, so don't expect to distribute pickled objects and expect people to be able to open them. However, it can also be a powerful tool for caching and other common serialization tasks.\n\n\nPickling your own Objects\n\n\nPickling isn't just for built-in types. It's for any class that follows the pickle protocol. The pickle protocol has four optional methods for Python objects to customize how they act (it's a bit different for C extensions, but that's not in our scope):\n\n\n__getinitargs__(self)\n\n:    If you'd like for \n__init__\n to be called when your class is unpickled, you can define \n__getinitargs__\n, which should return a tuple of the arguments that you'd like to be passed to  \n__init__\n. Note that this method will only work for old-style classes.\n\n\n__getnewargs__(self)\n\n:    For new-style classes, you can influence what arguments get passed to \n__new__\n upon unpickling. This method should also return a tuple of arguments that will then be passed to \n__new__\n.\n\n\n__getstate__(self)\n\n:    Instead of the object's \n__dict__\n attribute being stored, you can return a custom state to be stored when the object is pickled. That state will be used by \n__setstate__\n when the object is unpickled.\n\n\n__setstate__(self, state)\n\n:    When the object is unpickled, if \n__setstate__\n is defined the object's state will be passed to it instead of directly applied to the object's \n__dict__\n. This goes hand in hand with \n__getstate__\n: when both are defined, you can represent the object's pickled state however you want with whatever you want.\n\n\n__reduce__(self)\n\n:    When defining extension types (i.e., types implemented using Python's C API), you have to tell Python how to pickle them if you want them to pickle them. \n__reduce__()\n is called when an object defining it is pickled. It can either return a string representing a global name that Python will look up and pickle, or a tuple. The tuple contains between 2 and 5 elements: a callable object that is called to recreate the object, a tuple of arguments for that callable object, state to be passed to \n__setstate__\n (optional), an iterator yielding list items to be pickled (optional),  and an iterator yielding dictionary items to be pickled (optional).\n\n\n__reduce_ex__(self)\n\n:    \n__reduce_ex__\n exists for compatibility. If it is defined, \n__reduce_ex__\n will be called over \n__reduce__\n on pickling. \n__reduce__\n can be defined as well for older versions of the pickling API that did not support \n__reduce_ex__\n.\n\n\nAn Example\n\n\nOur example is a \nSlate\n, which remembers what its values have been and when those values were written to it. However, this particular slate goes blank each time it is pickled: the current value will not be saved.\n\n\n:::python\nimport time\n\nclass Slate:\n    '''Class to store a string and a changelog, and forget its value when\n    pickled.'''\n\n    def __init__(self, value):\n        self.value = value\n        self.last_change = time.asctime()\n        self.history = {}\n\n    def change(self, new_value):\n        # Change the value. Commit last value to history\n        self.history[self.last_change] = self.value\n        self.value = new_value\n        self.last_change = time.asctime()\n\n    def print_changes(self):\n        print 'Changelog for Slate object:'\n        for k, v in self.history.items():\n            print '%s\\t %s' % (k, v)\n\n    def __getstate__(self):\n        # Deliberately do not return self.value or self.last_change.\n        # We want to have a \"blank slate\" when we unpickle.\n        return self.history\n\n    def __setstate__(self, state):\n        # Make self.history = state and last_change and value undefined\n        self.history = state\n        self.value, self.last_change = None, None\n\n\n\nConclusion\n\n\nThe goal of this guide is to bring something to anyone that reads it, regardless of their experience with Python or object-oriented programming. If you're just getting started with Python, you've gained valuable knowledge of the basics of writing feature-rich, elegant, and easy-to-use classes. If you're an intermediate Python programmer, you've probably picked up some slick new concepts and strategies and some good ways to reduce the amount of code written by you and clients. If you're an expert Pythonista, you've been refreshed on some of the stuff you might have forgotten about and maybe picked up a few new tricks along the way. Whatever your experience level, I hope that this trip through Python's special methods has been truly magical. (I couldn't resist the final pun!)\n\n\nReferences\n\n\nhttps://github.com/RafeKettler/magicmethods/blob/master/magicmethods.markdown",
            "title": "Magic methods"
        },
        {
            "location": "/python/magic-methods/#introduction",
            "text": "This guide is the culmination of a few months' worth of blog posts. The subject is  magic methods .  What are magic methods? They're everything in object-oriented Python. They're special methods that you can define to add \"magic\" to your classes. They're always surrounded by double underscores (e.g.  __init__  or  __lt__ ). They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section (and that may very well be by design, since they're all detailed in the  language reference , along with boring syntax descriptions, etc.).  So, to fix what I perceived as a flaw in Python's documentation, I set out to provide some more plain-English, example-driven documentation for Python's magic methods. I started out with weekly blog posts, and now that I've finished with those, I've put together this guide.  I hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it's just intended to be a user-friendly guide to Python's magic methods.",
            "title": "Introduction"
        },
        {
            "location": "/python/magic-methods/#construction-and-initialization",
            "text": "Everyone knows the most basic magic method,  __init__ . It's the way that we can define the initialization behavior of an object. However, when I call  x = SomeClass() ,  __init__  is not the first thing to get called. Actually, it's a method called  __new__ , which actually creates the instance, then passes any arguments at creation on to the initializer. At the other end of the object's lifespan, there's  __del__ . Let's take a closer look at these 3 magic methods:  __new__(cls, [...) \n:     __new__  is the first method to get called in an object's instantiation. It takes the class, then any other arguments that it will pass along to  __init__ .  __new__  is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don't want to go in to too much detail on  __new__  because it's not too useful, but it is covered in great detail  in the Python docs .  __init__(self, [...) \n:    The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called  x = SomeClass(10, 'foo') ,  __init__  would get passed  10  and  'foo'  as arguments.  __init__  is almost universally used in Python class definitions.  __del__(self) \n:    If  __new__  and  __init__  formed the constructor of the object,  __del__  is the destructor. It doesn't implement behavior for the statement  del x  (so that code would not translate to  x.__del__() ). Rather, it defines behavior for when an object is garbage collected. It can be quite useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that  __del__  will be executed if the object is still alive when the interpreter exits, so  __del__  can't serve as a replacement for good coding practices (like always closing a connection when you're done with it. In fact,  __del__  should almost never be used because of the precarious circumstances under which it is called; use it with caution!  Putting it all together, here's an example of  __init__  and  __del__  in action:  :::python\nfrom os.path import join\n\nclass FileObject:\n    '''Wrapper for file objects to make sure the file gets closed on deletion.'''\n\n    def __init__(self, filepath='~', filename='sample.txt'):\n        # open a file filename in filepath in read and write mode\n        self.file = open(join(filepath, filename), 'r+')\n\n    def __del__(self):\n        self.file.close()\n        del self.file",
            "title": "Construction and Initialization"
        },
        {
            "location": "/python/magic-methods/#making-operators-work-on-custom-classes",
            "text": "One of the biggest advantages of using Python's magic methods is that they provide a simple way to make objects behave like built-in types. That means you can avoid ugly, counter-intuitive, and nonstandard ways of performing basic operators. In some languages, it's common to do something like this:  :::python\nif instance.equals(other_instance):\n    # do something  You could certainly do this in Python, too, but this adds confusion and is unnecessarily verbose. Different libraries might use different names for the same operations, making the client do way more work than necessary. With the power of magic methods, however, we can define one method ( __eq__ , in this case), and say what we  mean  instead:  :::python\nif instance == other_instance:\n    #do something  That's part of the power of magic methods. The vast majority of them allow us to define meaning for operators so that we can use them on our own classes just like they were built in types.",
            "title": "Making Operators Work on Custom Classes"
        },
        {
            "location": "/python/magic-methods/#comparison-magic-methods",
            "text": "Python has a whole slew of magic methods designed to implement intuitive comparisons between objects using operators, not awkward method calls. They also provide a way to override the default Python behavior for comparisons of objects (by reference). Here's the list of those methods and what they do:  __cmp__(self, other) \n:     __cmp__  is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (<, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else).  __cmp__  should return a negative integer if  self < other , zero if  self == other , and positive if  self > other . It's usually best to define each comparison you need rather than define them all at once, but  __cmp__  can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar criteria.  __eq__(self, other) \n:    Defines behavior for the equality operator,  == .  __ne__(self, other) \n:    Defines behavior for the inequality operator,  != .  __lt__(self, other) \n:    Defines behavior for the less-than operator,  < .  __gt__(self, other) \n:    Defines behavior for the greater-than operator,  > .  __le__(self, other) \n:    Defines behavior for the less-than-or-equal-to operator,  <= .  __ge__(self, other) \n:    Defines behavior for the greater-than-or-equal-to operator,  >= .  For an example, consider a class to model a word. We might want to compare words lexicographically (by the alphabet), which is the default comparison behavior for strings, but we also might want to do it based on some other criterion, like length or number of syllables. In this example, we'll compare by length. Here's an implementation:  :::python\nclass Word(str):\n    '''Class for words, defining comparison based on word length.'''\n\n    def __new__(cls, word):\n        # Note that we have to use __new__. This is because str is an immutable\n        # type, so we have to initialize it early (at creation)\n        if ' ' in word:\n            print \"Value contains spaces. Truncating to first space.\"\n            word = word[:word.index(' ')] # Word is now all chars before first space\n        return str.__new__(cls, word)\n\n    def __gt__(self, other):\n        return len(self) > len(other)\n    def __lt__(self, other):\n        return len(self) < len(other)\n    def __ge__(self, other):\n        return len(self) >= len(other)\n    def __le__(self, other):\n        return len(self) <= len(other)  Now, we can create two  Word s (by using  Word('foo')  and  Word('bar') ) and compare them based on length. Note, however, that we didn't define  __eq__  and  __ne__ . This is because this would lead to some weird behavior (notably that  Word('foo') == Word('bar')  would evaluate to true). It wouldn't make sense to test for equality based on length, so we fall back on  str 's implementation of equality.  Now would be a good time to note that you don't have to define every comparison magic method to get rich comparisons. The standard library has kindly provided us with a class decorator in the module  functools  that will define all rich comparison methods if you only define  __eq__  and one other (e.g.  __gt__ ,  __lt__ , etc.) This feature is only available in Python 2.7, but when you get a chance it saves a great deal of time and effort. You can use it by placing  @total_ordering  above your class definition.",
            "title": "Comparison magic methods"
        },
        {
            "location": "/python/magic-methods/#numeric-magic-methods",
            "text": "Just like you can create ways for instances of your class to be compared with comparison operators, you can define behavior for numeric operators. Buckle your seat belts, folks...there's a lot of these. For organization's sake, I've split the numeric magic methods into 5 categories: unary operators, normal arithmetic operators, reflected arithmetic operators (more on this later), augmented assignment, and type conversions.",
            "title": "Numeric magic methods"
        },
        {
            "location": "/python/magic-methods/#unary-operators-and-functions",
            "text": "Unary operators and functions only have one operand, e.g. negation, absolute value, etc.  __pos__(self) \n:    Implements behavior for unary positive (e.g.  +some_object )  __neg__(self) \n:    Implements behavior for negation (e.g.  -some_object )  __abs__(self) \n:    Implements behavior for the built in  abs()  function.  __invert__(self) \n:    Implements behavior for inversion using the  ~  operator. For an explanation on what this does, see  the Wikipedia article on bitwise operations .  __round__(self, n) \n:    Implements behavior for the built in  round()  function.  n  is the number of decimal places to round to.  __floor__(self) \n:    Implements behavior for  math.floor() , i.e., rounding down to the nearest integer.  __ceil__(self) \n:    Implements behavior for  math.ceil() , i.e., rounding up to the nearest integer.  __trunc__(self) \n:    Implements behavior for  math.trunc() , i.e., truncating to an integral.",
            "title": "Unary operators and functions"
        },
        {
            "location": "/python/magic-methods/#normal-arithmetic-operators",
            "text": "Now, we cover the typical binary operators (and a function or two): +, -, * and the like. These are, for the most part, pretty self-explanatory.  __add__(self, other) \n:    Implements addition.  __sub__(self, other) \n:    Implements subtraction.  __mul__(self, other) \n:    Implements multiplication.  __floordiv__(self, other) \n:    Implements integer division using the  //  operator.  __div__(self, other) \n:    Implements division using the  /  operator.  __truediv__(self, other) \n:    Implements  true  division. Note that this only works when  from __future__ import division  is in effect.  __mod__(self, other) \n:    Implements modulo using the  %  operator.  __divmod__(self, other) \n:    Implements behavior for long division using the  divmod()  built in function.  __pow__ \n:    Implements behavior for exponents using the  **  operator.  __lshift__(self, other) \n:    Implements left bitwise shift using the  <<  operator.  __rshift__(self, other) \n:    Implements right bitwise shift using the  >>  operator.  __and__(self, other) \n:    Implements bitwise and using the  &  operator.  __or__(self, other) \n:    Implements bitwise or using the  |  operator.  __xor__(self, other) \n:    Implements bitwise xor using the  ^  operator.",
            "title": "Normal arithmetic operators"
        },
        {
            "location": "/python/magic-methods/#reflected-arithmetic-operators",
            "text": "You know how I said I would get to reflected arithmetic in a bit? Some of you might think it's some big, scary, foreign concept. It's actually quite simple. Here's an example:  :::python\nsome_object + other  That was \"normal\" addition. The reflected equivalent is the same thing, except with the operands switched around:  :::python\nother + some_object  So, all of these magic methods do the same thing as their normal equivalents, except the perform the operation with other as the first operand and self as the second, rather than the other way around. In most cases, the result of a reflected operation is the same as its normal equivalent, so you may just end up defining  __radd__  as calling  __add__  and so on. Note that the object on the left hand side of the operator ( other  in the example) must not define (or return  NotImplemented ) for its definition of the non-reflected version of an operation. For instance, in the example,  some_object.__radd__  will only be called if  other  does not define  __add__ .  __radd__(self, other) \n:    Implements reflected addition.  __rsub__(self, other) \n:    Implements reflected subtraction.  __rmul__(self, other) \n:    Implements reflected multiplication.  __rfloordiv__(self, other) \n:    Implements reflected integer division using the  //  operator.  __rdiv__(self, other) \n:    Implements reflected division using the  /  operator.  __rtruediv__(self, other) \n:    Implements reflected  true  division. Note that this only works when  from __future__ import division  is in effect.  __rmod__(self, other) \n:    Implements reflected modulo using the  %  operator.  __rdivmod__(self, other) \n:    Implements behavior for long division using the  divmod()  built in function, when  divmod(other, self)  is called.  __rpow__ \n:    Implements behavior for reflected exponents using the  **  operator.  __rlshift__(self, other) \n:    Implements reflected left bitwise shift using the  <<  operator.  __rrshift__(self, other) \n:    Implements reflected right bitwise shift using the  >>  operator.  __rand__(self, other) \n:    Implements reflected bitwise and using the  &  operator.  __ror__(self, other) \n:    Implements reflected bitwise or using the  |  operator.  __rxor__(self, other) \n:    Implements reflected bitwise xor using the  ^  operator.",
            "title": "Reflected arithmetic operators"
        },
        {
            "location": "/python/magic-methods/#augmented-assignment",
            "text": "Python also has a wide variety of magic methods to allow custom behavior to be defined for augmented assignment. You're probably already familiar with augmented assignment, it combines \"normal\" operators with assignment. If you still don't know what I'm talking about, here's an example:  :::python\nx = 5\nx += 1 # in other words x = x + 1  Each of these methods should return the value that the variable on the left hand side should be assigned to (for instance, for  a += b ,  __iadd__  might return  a + b , which would be assigned to  a ). Here's the list:  __iadd__(self, other) \n:    Implements addition with assignment.  __isub__(self, other) \n:    Implements subtraction with assignment.  __imul__(self, other) \n:    Implements multiplication with assignment.  __ifloordiv__(self, other) \n:    Implements integer division with assignment using the  //=  operator.  __idiv__(self, other) \n:    Implements division with assignment using the  /=  operator.  __itruediv__(self, other) \n:    Implements  true  division with assignment. Note that this only works when  from __future__ import division  is in effect.  __imod__(self, other) \n:    Implements modulo with assignment using the  %=  operator.  __ipow__ \n:    Implements behavior for exponents with assignment using the  **=  operator.  __ilshift__(self, other) \n:    Implements left bitwise shift with assignment using the  <<=  operator.  __irshift__(self, other) \n:    Implements right bitwise shift with assignment using the  >>=  operator.  __iand__(self, other) \n:    Implements bitwise and with assignment using the  &=  operator.  __ior__(self, other) \n:    Implements bitwise or with assignment using the  |=  operator.  __ixor__(self, other) \n:    Implements bitwise xor with assignment using the  ^=  operator.",
            "title": "Augmented assignment"
        },
        {
            "location": "/python/magic-methods/#type-conversion-magic-methods",
            "text": "Python also has an array of magic methods designed to implement behavior for built in type conversion functions like  float() . Here they are:  __int__(self) \n:    Implements type conversion to int.  __long__(self) \n:    Implements type conversion to long.  __float__(self) \n:    Implements type conversion to float.  __complex__(self) \n:    Implements type conversion to complex.  __oct__(self) \n:    Implements type conversion to octal.  __hex__(self) \n:    Implements type conversion to hexadecimal.  __index__(self) \n:    Implements type conversion to an int when the object is used in a slice expression. If you define a custom numeric type that might be used in slicing, you should define  __index__ .  __trunc__(self) \n:    Called when  math.trunc(self)  is called.  __trunc__  should return the value of `self truncated to an integral type (usually a long).  __coerce__(self, other) \n:    Method to implement mixed mode arithmetic.  __coerce__  should return  None  if type conversion is impossible. Otherwise, it should return a pair (2-tuple) of  self  and  other , manipulated to have the same type.",
            "title": "Type conversion magic methods"
        },
        {
            "location": "/python/magic-methods/#representing-your-classes",
            "text": "It's often useful to have a string representation of a class. In Python, there are a few methods that you can implement in your class definition to customize how built in functions that return representations of your class behave.  __str__(self) \n:    Defines behavior for when  str()  is called on an instance of your class.  __repr__(self) \n:    Defines behavior for when  repr()  is called on an instance of your class. The major difference between  str()  and  repr()  is intended audience.  repr()  is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas  str()  is intended to be human-readable.  __unicode__(self) \n:    Defines behavior for when  unicode()  is called on an instance of your class.  unicode()  is like  str() , but it returns a unicode string. Be wary: if a client calls  str()  on an instance of your class and you've only defined  __unicode__() , it won't work. You should always try to define  __str__()  as well in case someone doesn't have the luxury of using unicode.  __format__(self, formatstr) \n:    Defines behavior for when an instance of your class is used in new-style string formatting. For instance,  \"Hello, {0:abc}!\".format(a)  would lead to the call  a.__format__(\"abc\") . This can be useful for defining your own numerical or string types that you might like to give special formatting options.  __hash__(self) \n:    Defines behavior for when  hash()  is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing  __eq__  as well. Live by the following rule:  a == b  implies  hash(a) == hash(b) .  __nonzero__(self) \n:    Defines behavior for when  bool()  is called on an instance of your class. Should return  True  or  False , depending on whether you would want to consider the instance to be  True  or  False .  __dir__(self) \n:    Defines behavior for when  dir()  is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing  __dir__  is unnecessary, but it can be vitally important for interactive use of your classes if you redefine  __getattr__  or  __getattribute__  (which you will see in the next section) or are otherwise dynamically generating attributes.  __sizeof__(self) \n:    Defines behavior for when  sys.getsizeof()  is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of it.  We're pretty much done with the boring (and example-free) part of the magic methods guide. Now that we've covered some of the more basic magic methods, it's time to move to more advanced material.",
            "title": "Representing your Classes"
        },
        {
            "location": "/python/magic-methods/#controlling-attribute-access",
            "text": "Many people coming to Python from other languages complain that it lacks true encapsulation for classes; that is, there's no way to define private attributes with public getter and setters. This couldn't be farther than the truth: it just happens that Python accomplishes a great deal of encapsulation through \"magic\", instead of explicit modifiers for methods or fields. Take a look:  __getattr__(self, name) \n:    You can define behavior for when a user attempts to access an attribute that doesn't exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes (you can still choose to compute and return that attribute, if you wish), or deftly handing an  AttributeError . It only gets called when a nonexistent attribute is accessed, however, so it isn't a true encapsulation solution.  __setattr__(self, name, value) \n:    Unlike  __getattr__ ,  __setattr__  is an encapsulation solution. It allows you to define behavior for assignment to an attribute regardless of whether or not that attribute exists, meaning you can define custom rules for any changes in the values of attributes. However, you have to be careful with how you use  __setattr__ , as the example at the end of the list will show.  __delattr__(self, name) \n:    This is the exact same as  __setattr__ , but for deleting attributes instead of setting them. The same precautions need to be taken as with  __setattr__  as well in order to prevent infinite recursion (calling  del self.name  in the implementation of  __delattr__  would cause infinite recursion).  __getattribute__(self, name) \n:    After all this,  __getattribute__  fits in pretty well with its companions  __setattr__  and  __delattr__ . However, I don't recommend you use it.  __getattribute__  can only be used with new-style classes (all classes are new-style in the newest versions of Python, and in older versions you can make a class new-style by subclassing  object . It allows you to define rules for whenever an attribute's value is accessed. It suffers from some similar infinite recursion problems as its partners-in-crime (this time you call the base class's  __getattribute__  method to prevent this). It also mainly obviates the need for  __getattr__ , which, when  __getattribute__  is implemented, only gets called if it is called explicitly or an  AttributeError  is raised. This method can be used (after all, it's your choice), but I don't recommend it because it has a small use case (it's far more rare that we need special behavior to retrieve a value than to assign to it) and because it can be really difficult to implement bug-free.  You can easily cause a problem in your definitions of any of the methods controlling attribute access. Consider this example:  :::python\ndef __setattr__(self, name, value):\n    self.name = value\n    # since every time an attribute is assigned, __setattr__() is called, this\n    # is recursion.\n    # so this really means self.__setattr__('name', value). Since the method\n    # keeps calling itself, the recursion goes on forever causing a crash\n\ndef __setattr__(self, name, value):\n    self.__dict__[name] = value # assigning to the dict of names in the class\n    # define custom behavior here  Again, Python's magic methods are incredibly powerful, and with great power comes great responsibility. It's important to know the proper way to use magic methods so you don't break any code.  So, what have we learned about custom attribute access in Python? It's not to be used lightly. In fact, it tends to be excessively powerful and counter-intuitive. But the reason why it exists is to scratch a certain itch: Python doesn't seek to make bad things impossible, but just to make them difficult. Freedom is paramount, so you can really do whatever you want. Here's an example of some of the special attribute access methods in action (note that we use  super  because not all classes have an attribute  __dict__ ):  :::python\nclass AccessCounter(object):\n    '''A class that contains a value and implements an access counter.\n    The counter increments each time the value is changed.'''\n\n    def __init__(self, val):\n        super(AccessCounter, self).__setattr__('counter', 0)\n        super(AccessCounter, self).__setattr__('value', val)\n\n    def __setattr__(self, name, value):\n        if name == 'value':\n            super(AccessCounter, self).__setattr__('counter', self.counter + 1)\n        # Make this unconditional.\n        # If you want to prevent other attributes to be set, raise AttributeError(name)\n        super(AccessCounter, self).__setattr__(name, value)\n\n    def __delattr__(self, name):\n        if name == 'value':\n            super(AccessCounter, self).__setattr__('counter', self.counter + 1)\n        super(AccessCounter, self).__delattr__(name)",
            "title": "Controlling Attribute Access"
        },
        {
            "location": "/python/magic-methods/#making-custom-sequences",
            "text": "There's a number of ways to get your Python classes to act like built in sequences ( dict ,  tuple ,  list ,  str , etc.). These are by far my favorite magic methods in Python because of the absurd degree of control they give you and the way that they magically make a whole array of global functions work beautifully on instances of your class. But before we get down to the good stuff, a quick word on requirements.",
            "title": "Making Custom Sequences"
        },
        {
            "location": "/python/magic-methods/#requirements",
            "text": "Now that we're talking about creating your own sequences in Python, it's time to talk about  protocols . Protocols are somewhat similar to interfaces in other languages in that they give you a set of methods you must define. However, in Python protocols are totally informal and require no explicit declarations to implement. Rather, they're more like guidelines.  Why are we talking about protocols now? Because implementing custom container types in Python involves using some of these protocols. First, there's the protocol for defining immutable containers: to make an immutable container, you need only define  __len__  and  __getitem__  (more on these later). The mutable container protocol requires everything that immutable containers require plus  __setitem__  and  __delitem__ . Lastly, if you want your object to be iterable, you'll have to define  __iter__ , which returns an iterator. That iterator must conform to an iterator protocol, which requires iterators to have methods called  __iter__ (returning itself) and  next .",
            "title": "Requirements"
        },
        {
            "location": "/python/magic-methods/#the-magic-behind-containers",
            "text": "Without any more wait, here are the magic methods that containers use:  __len__(self) \n:    Returns the length of the container. Part of the protocol for both immutable and mutable containers.  __getitem__(self, key) \n:    Defines behavior for when an item is accessed, using the notation  self[key] . This is also part of both the mutable and immutable container protocols. It should also raise appropriate exceptions:  TypeError  if the type of the key is wrong and  KeyError  if there is no corresponding value for the key.  __setitem__(self, key, value) \n:    Defines behavior for when an item is assigned to, using the notation  self[nkey] = value . This is part of the mutable container protocol. Again, you should raise  KeyError  and  TypeError  where appropriate.  __delitem__(self, key) \n:    Defines behavior for when an item is deleted (e.g.  del self[key] ). This is only part of the mutable container protocol. You must raise the appropriate exceptions when an invalid key is used.  __iter__(self) \n:    Should return an iterator for the container. Iterators are returned in a number of contexts, most notably by the  iter()  built in function and when a container is looped over using the form  for x in container: . Iterators are their own objects, and they also must define an  __iter__  method that returns  self .  __reversed__(self) \n:    Called to implement behavior for the  reversed()  built in function. Should return a reversed version of the sequence. Implement this only if the sequence class is ordered, like list or tuple.  __contains__(self, item) \n:     __contains__  defines behavior for membership tests using  in  and  not in . Why isn't this part of a sequence protocol, you ask? Because when  __contains__  isn't defined, Python just iterates over the sequence and returns  True  if it comes across the item it's looking for.  __missing__(self, key) \n:     __missing__  is used in subclasses of  dict . It defines behavior for whenever a key is accessed that does not exist in a dictionary (so, for instance, if I had a dictionary  d  and said  d[\"george\"]  when  \"george\"  is not a key in the dict,  d.__missing__(\"george\")  would be called).",
            "title": "The magic behind containers"
        },
        {
            "location": "/python/magic-methods/#an-example",
            "text": "For our example, let's look at a list that implements some functional constructs that you might be used to from other languages (Haskell, for example).  :::python\nclass FunctionalList:\n    '''A class wrapping a list with some extra functional magic, like head,\n    tail, init, last, drop, and take.'''\n\n    def __init__(self, values=None):\n        if values is None:\n            self.values = []\n        else:\n            self.values = values\n\n    def __len__(self):\n        return len(self.values)\n\n    def __getitem__(self, key):\n        # if key is of invalid type or value, the list values will raise the error\n        return self.values[key]\n\n    def __setitem__(self, key, value):\n        self.values[key] = value\n\n    def __delitem__(self, key):\n        del self.values[key]\n\n    def __iter__(self):\n        return iter(self.values)\n\n    def __reversed__(self):\n        return reversed(self.values)\n\n    def append(self, value):\n        self.values.append(value)\n    def head(self):\n        # get the first element\n        return self.values[0]\n    def tail(self):\n        # get all elements after the first\n        return self.values[1:]\n    def init(self):\n        # get elements up to the last\n        return self.values[:-1]\n    def last(self):\n        # get last element\n        return self.values[-1]\n    def drop(self, n):\n        # get all elements except first n\n        return self.values[n:]\n    def take(self, n):\n        # get first n elements\n        return self.values[:n]  There you have it, a (marginally) useful example of how to implement your own sequence. Of course, there are more useful applications of custom sequences, but quite a few of them are already implemented in the standard library (batteries included, right?), like  Counter ,  OrderedDict , and  NamedTuple .",
            "title": "An example"
        },
        {
            "location": "/python/magic-methods/#reflection",
            "text": "You can also control how reflection using the built in functions  isinstance()  and  issubclass() behaves by defining magic methods. The magic methods are:  __instancecheck__(self, instance) \n:    Checks if an instance is an instance of the class you defined (e.g.  isinstance(instance, class) .  __subclasscheck__(self, subclass) \n:    Checks if a class subclasses the class you defined (e.g.  issubclass(subclass, class) ).  The use case for these magic methods might seem small, and that may very well be true. I won't spend too much more time on reflection magic methods because they aren't very important, but they reflect something important about object-oriented programming in Python and Python in general: there is almost always an easy way to do something, even if it's rarely necessary. These magic methods might not seem useful, but if you ever need them you'll be glad that they're there (and that you read this guide!).",
            "title": "Reflection"
        },
        {
            "location": "/python/magic-methods/#callable-objects",
            "text": "As you may already know, in Python, functions are first-class objects. This means that they can be passed to functions and methods just as if they were objects of any other kind. This is an incredibly powerful feature.  A special magic method in Python allows instances of your classes to behave as if they were functions, so that you can \"call\" them, pass them to functions that take functions as arguments, and so on. This is another powerful convenience feature that makes programming in Python that much sweeter.  __call__(self, [args...]) \n:    Allows an instance of a class to be called as a function. Essentially, this means that  x()  is the same as  x.__call__() . Note that  __call__  takes a variable number of arguments; this means that you define  __call__  as you would any other function, taking however many arguments you'd like it to.  __call__  can be particularly useful in classes with instances that need to often change state. \"Calling\" the instance can be an intuitive and elegant way to change the object's state. An example might be a class representing an entity's position on a plane:  :::python\nclass Entity:\n    '''Class to represent an entity. Callable to update the entity's position.'''\n\n    def __init__(self, size, x, y):\n        self.x, self.y = x, y\n        self.size = size\n\n    def __call__(self, x, y):\n        '''Change the position of the entity.'''\n        self.x, self.y = x, y\n\n    # snip...",
            "title": "Callable Objects"
        },
        {
            "location": "/python/magic-methods/#context-managers",
            "text": "In Python 2.5, a new keyword was introduced in Python along with a new method for code reuse: the  with  statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library), but not until  PEP 343  was accepted did it achieve status as a first-class language construct. You may have seen  with  statements before:  :::python\nwith open('foo.txt') as bar:\n    # perform some action with bar  Context managers allow setup and cleanup actions to be taken for objects when their creation is wrapped with a  with  statement. The behavior of the context manager is determined by two magic methods:  __enter__(self) \n:    Defines what the context manager should do at the beginning of the block created by the  with  statement. Note that the return value of  __enter__  is bound to the  target  of the  with  statement, or the name after the  as .  __exit__(self, exception_type, exception_value, traceback) \n:    Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully,  exception_type ,  exception_value , and  traceback  will be  None . Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure  __exit__  returns  True  after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.  __enter__  and  __exit__  can be useful for specific classes that have well-defined and common behavior for setup and cleanup. You can also use these methods to create generic context managers that wrap other objects. Here's an example:  :::python\nclass Closer:\n    '''A context manager to automatically close an object with a close method\n    in a with statement.'''\n\n    def __init__(self, obj):\n        self.obj = obj\n\n    def __enter__(self):\n        return self.obj # bound to target\n\n    def __exit__(self, exception_type, exception_val, trace):\n        try:\n           self.obj.close()\n        except AttributeError: # obj isn't closable\n           print 'Not closable.'\n           return True # exception handled successfully  Here's an example of  Closer  in action, using an FTP connection to demonstrate it (a closable socket):  :::pythonconsole\n>>> from magicmethods import Closer\n>>> from ftplib import FTP\n>>> with Closer(FTP('ftp.somesite.com')) as conn:\n...     conn.dir()\n...\n# output omitted for brevity\n>>> conn.dir()\n# long AttributeError message, can't use a connection that's closed\n>>> with Closer(int(5)) as i:\n...     i += 1\n...\nNot closable.\n>>> i\n6  See how our wrapper gracefully handled both proper and improper uses? That's the power of context managers and magic methods. Note that the Python standard library includes a module  contextlib  that contains a context manager,  contextlib.closing() , that does approximately the same thing (without any handling of the case where an object does not have a  close()  method).",
            "title": "Context Managers"
        },
        {
            "location": "/python/magic-methods/#abstract-base-classes",
            "text": "See http://docs.python.org/2/library/abc.html.",
            "title": "Abstract Base Classes"
        },
        {
            "location": "/python/magic-methods/#building-descriptor-objects",
            "text": "Descriptors are classes which, when accessed through either getting, setting, or deleting, can also alter other objects. Descriptors aren't meant to stand alone; rather, they're meant to be held by an owner class. Descriptors can be useful when building object-oriented databases or classes that have attributes whose values are dependent on each other. Descriptors are particularly useful when representing attributes in several different units of measurement or representing computed attributes (like distance from the origin in a class to represent a point on a grid).  To be a descriptor, a class must have at least one of  __get__ ,  __set__ , and  __delete__  implemented. Let's take a look at those magic methods:  __get__(self, instance, owner) \n:    Define behavior for when the descriptor's value is retrieved.  instance  is the instance of the owner object.  owner  is the owner class itself.  __set__(self, instance, value) \n:    Define behavior for when the descriptor's value is changed.  instance  is the instance of the owner class and  value  is the value to set the descriptor to.  __delete__(self, instance) \n:    Define behavior for when the descriptor's value is deleted.  instance  is the instance of the owner object.  Now, an example of a useful application of descriptors: unit conversions.  :::python\nclass Meter(object):\n    '''Descriptor for a meter.'''\n\n    def __init__(self, value=0.0):\n        self.value = float(value)\n    def __get__(self, instance, owner):\n        return self.value\n    def __set__(self, instance, value):\n        self.value = float(value)\n\nclass Foot(object):\n    '''Descriptor for a foot.'''\n\n    def __get__(self, instance, owner):\n        return instance.meter * 3.2808\n    def __set__(self, instance, value):\n        instance.meter = float(value) / 3.2808\n\nclass Distance(object):\n    '''Class to represent distance holding two descriptors for feet and\n    meters.'''\n    meter = Meter()\n    foot = Foot()",
            "title": "Building Descriptor Objects"
        },
        {
            "location": "/python/magic-methods/#copying",
            "text": "Sometimes, particularly when dealing with mutable objects, you want to be able to copy an object and make changes without affecting what you copied from. This is where Python's  copy  comes into play. However (fortunately), Python modules are not sentient, so we don't have to worry about a Linux-based robot uprising, but we do have to tell Python how to efficiently copy things.  __copy__(self) \n:   Defines behavior for  copy.copy()  for instances of your class.  copy.copy()  returns a  shallow copy  of your object -- this means that, while the instance itself is a new instance, all of its data is referenced -- i.e., the object itself is copied, but its data is still referenced (and hence changes to data in a shallow copy may cause changes in the original).  __deepcopy__(self, memodict={}) \n:    Defines behavior for  copy.deepcopy()  for instances of your class.  copy.deepcopy()  returns a  deep copy  of your object -- the object  and  its data are both copied.  memodict  is a cache of previously copied objects -- this optimizes copying and prevents infinite recursion when copying recursive data structures. When you want to deep copy an individual attribute, call  copy.deepcopy()  on that attribute with  memodict  as the first argument.  What are some use cases for these magic methods? As always, in any case where you need more fine-grained control than what the default behavior gives you. For instance, if you are attempting to copy an object that stores a cache as a dictionary (which might be large), it might not make sense to copy the cache as well -- if the cache can be shared in memory between instances, then it should be.",
            "title": "Copying"
        },
        {
            "location": "/python/magic-methods/#pickling-your-objects",
            "text": "If you spend time with other Pythonistas, chances are you've at least heard of pickling. Pickling is a serialization process for Python data structures, and can be incredibly useful when you need to store an object and retrieve it later (usually for caching). It's also a major source of worries and confusion.  Pickling is so important that it doesn't just have its own module ( pickle ), but its own  protocol  and the magic methods to go with it. But first, a brief word on how to pickle existing types(feel free to skip it if you already know).",
            "title": "Pickling Your Objects"
        },
        {
            "location": "/python/magic-methods/#pickling-a-quick-soak-in-the-brine",
            "text": "Let's dive into pickling. Say you have a dictionary that you want to store and retrieve later. You couldwrite it's contents to a file, carefully making sure that you write correct syntax, then retrieve it using either  exec()  or processing the file input. But this is precarious at best: if you store important data in plain text, it could be corrupted or changed in any number of ways to make your program crash or worse run malicious code on your computer. Instead, we're going to pickle it:  :::python\nimport pickle\n\ndata = {'foo': [1, 2, 3],\n        'bar': ('Hello', 'world!'),\n        'baz': True}\njar = open('data.pkl', 'wb')\npickle.dump(data, jar) # write the pickled data to the file jar\njar.close()  Now, a few hours later, we want it back. All we have to do is unpickle it:  :::python\nimport pickle\n\npkl_file = open('data.pkl', 'rb') # connect to the pickled data\ndata = pickle.load(pkl_file) # load it into a variable\nprint data\npkl_file.close()  What happens? Exactly what you expect. It's just like we had  data  all along.  Now, for a word of caution: pickling is not perfect. Pickle files are easily corrupted on accident and on purpose. Pickling may be more secure than using flat text files, but it still can be used to run malicious code. It's also incompatible across different versions of Python, so don't expect to distribute pickled objects and expect people to be able to open them. However, it can also be a powerful tool for caching and other common serialization tasks.",
            "title": "Pickling: A Quick Soak in the Brine"
        },
        {
            "location": "/python/magic-methods/#pickling-your-own-objects",
            "text": "Pickling isn't just for built-in types. It's for any class that follows the pickle protocol. The pickle protocol has four optional methods for Python objects to customize how they act (it's a bit different for C extensions, but that's not in our scope):  __getinitargs__(self) \n:    If you'd like for  __init__  to be called when your class is unpickled, you can define  __getinitargs__ , which should return a tuple of the arguments that you'd like to be passed to   __init__ . Note that this method will only work for old-style classes.  __getnewargs__(self) \n:    For new-style classes, you can influence what arguments get passed to  __new__  upon unpickling. This method should also return a tuple of arguments that will then be passed to  __new__ .  __getstate__(self) \n:    Instead of the object's  __dict__  attribute being stored, you can return a custom state to be stored when the object is pickled. That state will be used by  __setstate__  when the object is unpickled.  __setstate__(self, state) \n:    When the object is unpickled, if  __setstate__  is defined the object's state will be passed to it instead of directly applied to the object's  __dict__ . This goes hand in hand with  __getstate__ : when both are defined, you can represent the object's pickled state however you want with whatever you want.  __reduce__(self) \n:    When defining extension types (i.e., types implemented using Python's C API), you have to tell Python how to pickle them if you want them to pickle them.  __reduce__()  is called when an object defining it is pickled. It can either return a string representing a global name that Python will look up and pickle, or a tuple. The tuple contains between 2 and 5 elements: a callable object that is called to recreate the object, a tuple of arguments for that callable object, state to be passed to  __setstate__  (optional), an iterator yielding list items to be pickled (optional),  and an iterator yielding dictionary items to be pickled (optional).  __reduce_ex__(self) \n:     __reduce_ex__  exists for compatibility. If it is defined,  __reduce_ex__  will be called over  __reduce__  on pickling.  __reduce__  can be defined as well for older versions of the pickling API that did not support  __reduce_ex__ .",
            "title": "Pickling your own Objects"
        },
        {
            "location": "/python/magic-methods/#an-example_1",
            "text": "Our example is a  Slate , which remembers what its values have been and when those values were written to it. However, this particular slate goes blank each time it is pickled: the current value will not be saved.  :::python\nimport time\n\nclass Slate:\n    '''Class to store a string and a changelog, and forget its value when\n    pickled.'''\n\n    def __init__(self, value):\n        self.value = value\n        self.last_change = time.asctime()\n        self.history = {}\n\n    def change(self, new_value):\n        # Change the value. Commit last value to history\n        self.history[self.last_change] = self.value\n        self.value = new_value\n        self.last_change = time.asctime()\n\n    def print_changes(self):\n        print 'Changelog for Slate object:'\n        for k, v in self.history.items():\n            print '%s\\t %s' % (k, v)\n\n    def __getstate__(self):\n        # Deliberately do not return self.value or self.last_change.\n        # We want to have a \"blank slate\" when we unpickle.\n        return self.history\n\n    def __setstate__(self, state):\n        # Make self.history = state and last_change and value undefined\n        self.history = state\n        self.value, self.last_change = None, None",
            "title": "An Example"
        },
        {
            "location": "/python/magic-methods/#conclusion",
            "text": "The goal of this guide is to bring something to anyone that reads it, regardless of their experience with Python or object-oriented programming. If you're just getting started with Python, you've gained valuable knowledge of the basics of writing feature-rich, elegant, and easy-to-use classes. If you're an intermediate Python programmer, you've probably picked up some slick new concepts and strategies and some good ways to reduce the amount of code written by you and clients. If you're an expert Pythonista, you've been refreshed on some of the stuff you might have forgotten about and maybe picked up a few new tricks along the way. Whatever your experience level, I hope that this trip through Python's special methods has been truly magical. (I couldn't resist the final pun!)",
            "title": "Conclusion"
        },
        {
            "location": "/python/magic-methods/#references",
            "text": "https://github.com/RafeKettler/magicmethods/blob/master/magicmethods.markdown",
            "title": "References"
        },
        {
            "location": "/python/matlab/",
            "text": "Run Matlab programs in Python\n\n\nThis example shows how to create a Python package using a MATLAB function. You can then pass the generated package to the developer who is responsible for integrating it into an application. The target system does not require a licensed copy of MATLAB.\n\n\nRequirements\n\n\n\n\nA Matlab version with a license for MATLAB Compiler or MATLAB Compiler SDK to compile the Python package.\n\n\nThe target computer (where the final application will run) does not require Matlab or a Matlab Licence. However, it requires the Matlab Runtime (free, \ndownload here\n) of the same version of the Matlab used to compile the application. For instance, if the package was compiled in Matlab 2018a the target computer must have Matlab Runtime version 2018a installed\n\n\n\n\n1) Create a Python package for the Maltab Application\n\n\nFor this example let's create a simple Matlab function and save it as \nmakesqr.m\n:\n\n\nfunction y = makesqr(x)\n\ny = magic(x);\n\n\n\n\nNow lets create the Python package. Enter \nlibraryCompiler\n at the MATLAB prompt to open the Library Compiler. To use the Library Compiler you need a license for MATLAB Compiler or MATLAB Compiler SDK.\n\n\nIn the MATLAB Compiler project window, specify the main file of the MATLAB application that you want to deploy. Select whether to include the MATLAB Runtime installer in the generated application by selecting one of the two options in the Packaging Options section:\n\n\n\n\n\n\nRuntime downloaded from web \u2014 Generates an installer that downloads the MATLAB Runtime and installs it along with the deployed MATLAB application.\n\n\n\n\n\n\nRuntime included in package \u2014 Generates an application that includes the MATLAB Runtime installer.\n\n\n\n\n\n\nFill in the remaining fields. For this example lets edit the Library Name field, replacing makesqr with \nMagicSquarePkg\n. \n\n\nTo generate the packaged application, click Package. When the deployment process is complete, the output folder contains:\n\n\n\n\n\n\nfor_redistribution \u2014 Folder containing the file that installs the application and the MATLAB Runtime.\n\n\n\n\n\n\nfor_testing \u2014 Folder containing all the artifacts created by mcc, such as binaries and JAR, header, and source files for a specific target. Use these files to test the installation.\n\n\n\n\n\n\nfor_redistribution_files_only \u2014 Folder containing the files required for redistributing the application. Distribute these files to users who have MATLAB or MATLAB Runtime installed on their machines.\n\n\n\n\n\n\nPackagingLog.txt \u2014 Log file generated by MATLAB Compiler.\n\n\n\n\n\n\n2) Set up the target computer (Ubuntu server)\n\n\n1) Make sure Python is installed. Python versions supported are versions 2.7, 3.5, and 3.6. For 64-bit MATLAB, the 64-bit Python version is requiered.\n\n\n2) If necessary install setuptools for python: \nsudo apt-get install python-setuptools\n\n\n3) Now we need to install the Matlab Runtime in the Ubuntu server. Download the it from the website at \nMathworks\n. Make sure you download and install the version corresponding to the Matlab you used to create the Python package.\n\n\n3) Start the MATLAB Runtime installer.\n    On Ubuntu: \nsudo ./install\n\n    On Debian: \ngksudo ./install\n\n\n4) Follow the installation dialog instructions.\n\n\nInstall the MATLAB Runtime Non-Interactively\n\n\nTo install the MATLAB Runtime without having to interact with the installer dialog boxes (headless Ubuntu server for instance), use the MATLAB Runtime installer\u2019s non-interactive \nsilent\n mode. The installer runs as a background task and does not display any dialog boxes.\nExtract the contents of the MATLAB Runtime installer file to a temporary folder and run the MATLAB Runtime installer, specifying the -mode option:\n\n\n./install -mode silent -agreeToLicense yes\n\n\n\n\n3) Create and install the Python application that will use the Matlab function\n\n\nTo install the Python application, open a command prompt in the \nfor_redistribution_files_only\n folder and run the script:\n\n\npython setup.py install\n\n\n\n\nCreate a file called getmagic.py, and include the following code in it.\n\n\nimport MagicSquarePkg\n\nmyMagic = MagicSquarePkg.initialize()\nprint(myMagic.makesqr(3))\nmyMagic.terminate()\n\n\n\n\nAt the system command prompt, navigate to the folder containing getmagic.py and run the application as follows:\n\n\npython getmagic.py\n\n\n\n\nNotes\n\n\nUninstall MATLAB Runtime\n\n\nExit the application and run the command:\n\n\nrm -rf mcr_root\n\n\n\n\nwhere \nmcr_root\n represents the name of your top-level MATLAB installation folder.\n\n\nReferences\n\n\n\n\nhttps://www.mathworks.com/help/compiler_sdk/gs/create-a-python-application-with-matlab-code.html\n\n\nhttps://www.mathworks.com/help/matlab/matlab-engine-for-python.html\n\n\nhttps://www.mathworks.com/help/compiler/deployment-process.html",
            "title": "Run Matlab programs in Python"
        },
        {
            "location": "/python/matlab/#run-matlab-programs-in-python",
            "text": "This example shows how to create a Python package using a MATLAB function. You can then pass the generated package to the developer who is responsible for integrating it into an application. The target system does not require a licensed copy of MATLAB.",
            "title": "Run Matlab programs in Python"
        },
        {
            "location": "/python/matlab/#requirements",
            "text": "A Matlab version with a license for MATLAB Compiler or MATLAB Compiler SDK to compile the Python package.  The target computer (where the final application will run) does not require Matlab or a Matlab Licence. However, it requires the Matlab Runtime (free,  download here ) of the same version of the Matlab used to compile the application. For instance, if the package was compiled in Matlab 2018a the target computer must have Matlab Runtime version 2018a installed",
            "title": "Requirements"
        },
        {
            "location": "/python/matlab/#1-create-a-python-package-for-the-maltab-application",
            "text": "For this example let's create a simple Matlab function and save it as  makesqr.m :  function y = makesqr(x)\n\ny = magic(x);  Now lets create the Python package. Enter  libraryCompiler  at the MATLAB prompt to open the Library Compiler. To use the Library Compiler you need a license for MATLAB Compiler or MATLAB Compiler SDK.  In the MATLAB Compiler project window, specify the main file of the MATLAB application that you want to deploy. Select whether to include the MATLAB Runtime installer in the generated application by selecting one of the two options in the Packaging Options section:    Runtime downloaded from web \u2014 Generates an installer that downloads the MATLAB Runtime and installs it along with the deployed MATLAB application.    Runtime included in package \u2014 Generates an application that includes the MATLAB Runtime installer.    Fill in the remaining fields. For this example lets edit the Library Name field, replacing makesqr with  MagicSquarePkg .   To generate the packaged application, click Package. When the deployment process is complete, the output folder contains:    for_redistribution \u2014 Folder containing the file that installs the application and the MATLAB Runtime.    for_testing \u2014 Folder containing all the artifacts created by mcc, such as binaries and JAR, header, and source files for a specific target. Use these files to test the installation.    for_redistribution_files_only \u2014 Folder containing the files required for redistributing the application. Distribute these files to users who have MATLAB or MATLAB Runtime installed on their machines.    PackagingLog.txt \u2014 Log file generated by MATLAB Compiler.",
            "title": "1) Create a Python package for the Maltab Application"
        },
        {
            "location": "/python/matlab/#2-set-up-the-target-computer-ubuntu-server",
            "text": "1) Make sure Python is installed. Python versions supported are versions 2.7, 3.5, and 3.6. For 64-bit MATLAB, the 64-bit Python version is requiered.  2) If necessary install setuptools for python:  sudo apt-get install python-setuptools  3) Now we need to install the Matlab Runtime in the Ubuntu server. Download the it from the website at  Mathworks . Make sure you download and install the version corresponding to the Matlab you used to create the Python package.  3) Start the MATLAB Runtime installer.\n    On Ubuntu:  sudo ./install \n    On Debian:  gksudo ./install  4) Follow the installation dialog instructions.",
            "title": "2) Set up the target computer (Ubuntu server)"
        },
        {
            "location": "/python/matlab/#install-the-matlab-runtime-non-interactively",
            "text": "To install the MATLAB Runtime without having to interact with the installer dialog boxes (headless Ubuntu server for instance), use the MATLAB Runtime installer\u2019s non-interactive  silent  mode. The installer runs as a background task and does not display any dialog boxes.\nExtract the contents of the MATLAB Runtime installer file to a temporary folder and run the MATLAB Runtime installer, specifying the -mode option:  ./install -mode silent -agreeToLicense yes",
            "title": "Install the MATLAB Runtime Non-Interactively"
        },
        {
            "location": "/python/matlab/#3-create-and-install-the-python-application-that-will-use-the-matlab-function",
            "text": "To install the Python application, open a command prompt in the  for_redistribution_files_only  folder and run the script:  python setup.py install  Create a file called getmagic.py, and include the following code in it.  import MagicSquarePkg\n\nmyMagic = MagicSquarePkg.initialize()\nprint(myMagic.makesqr(3))\nmyMagic.terminate()  At the system command prompt, navigate to the folder containing getmagic.py and run the application as follows:  python getmagic.py",
            "title": "3) Create and install the Python application that will use the Matlab function"
        },
        {
            "location": "/python/matlab/#notes",
            "text": "",
            "title": "Notes"
        },
        {
            "location": "/python/matlab/#uninstall-matlab-runtime",
            "text": "Exit the application and run the command:  rm -rf mcr_root  where  mcr_root  represents the name of your top-level MATLAB installation folder.",
            "title": "Uninstall MATLAB Runtime"
        },
        {
            "location": "/python/matlab/#references",
            "text": "https://www.mathworks.com/help/compiler_sdk/gs/create-a-python-application-with-matlab-code.html  https://www.mathworks.com/help/matlab/matlab-engine-for-python.html  https://www.mathworks.com/help/compiler/deployment-process.html",
            "title": "References"
        },
        {
            "location": "/python/mysql/",
            "text": "Using MySQL in Python\n\n\nSome basic MySQL commands\n\n\nIn MySQL a \nDATABASE\n is composed by one or more \nTABLE\ns. Typically you create a database for each project.\n\n\nTo create a new MySQL database named \ndatabase_name\n (the starting point of a new project using MySQL):\n\n\nCREATE DATABASE database_name;\n\n\n\n\nShow all databases:  \nSHOW DATABASES;\n\n\nTo start using a database you must:\n\n\nUSE database_name;\n\n\nTo create a new table named users (an example):\n\n\nCREATE TABLE users(id INT(11) AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), username VARCHAR(30), password VARCHAR(100), register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);\n\n\n\n\nShow all tables:  \nSHOW TABLES;\n\n\nGet info on a TABLE (in this example users): \nDESCRIBE users;\n\n\nAdd data to table via command:\n\n\nINSERT INTO users(name, email, username, password) VALUES(x, x, x, x)\n\n\n\n\nTypical queries:\n\n\nSELECT * FROM users;\n  Select all rows from users table\n\n\nCopying a database to another server\n\n\n\n\nOne the server where the DB is located make a backup file by running the following command (on Windows it may be necessary to \ncd Program Files/MySQL/MySQL Server 5.1/bin\n first: \n\n\n\n\nmysqldump -u root -p database_name > C:\\Users\\USER\\Desktop\\database_name.sql\n\n\nAlternatively: \nmysqldump -u[root] -p[password] database_123 > C:\\Users\\USER\\Desktop\\database_123.sql\n\n\nIf getting an \"Access Denied\" it message probably means you are outputing to a directory where you have no permission to create files.\n\n\n\n\nOn the second server create a new database using the same database name:\n\n\n\n\nmysql -u root -p\n to start the MySQL shell\n\n\nCREATE DATABASE database_123;\n to create the new DB\n\n\n\n\nCopy the created backup to the second server and import it:\n\n\n\n\nmysql -u[root] -p[password] database_name < database_name.sql\n\n\nUsage in Python\n\n\nConfiguring in MySQL in Flask:\n\n\n# Config MySQL\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'mypassword'\napp.config['MYSQL_DB'] = 'flaskappdb'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'  # useful to return queries as dictionaries\n\n# Initialize MySQL\nmysql = MySQL(app)\n\n\n\n\nCreate cursor:  \ncursor = mysql.connection.cursor()\n\n\nExecute a MySQL command:  \ncursor.execute( command )\n\n\nAdd data:  \ncursor.execute(\"INSERT INTO users(name, email, username, password) VALUES(%s, %s, %s, %s)\", (x, x, x, x))\n\n\nCommit to database:  \nmysql.connection.commit()\n\n\nClose:  \ncursor.close()\n\n\nCheck DB for a login:\n\n\nresult = cursor.execute(\"SELECT * FROM users WHERE username = %s\", [username])`\ndata = cursor.fetchone()",
            "title": "Using MySQL in Python"
        },
        {
            "location": "/python/mysql/#using-mysql-in-python",
            "text": "",
            "title": "Using MySQL in Python"
        },
        {
            "location": "/python/mysql/#some-basic-mysql-commands",
            "text": "In MySQL a  DATABASE  is composed by one or more  TABLE s. Typically you create a database for each project.",
            "title": "Some basic MySQL commands"
        },
        {
            "location": "/python/mysql/#to-create-a-new-mysql-database-named-database_name-the-starting-point-of-a-new-project-using-mysql",
            "text": "CREATE DATABASE database_name;  Show all databases:   SHOW DATABASES;",
            "title": "To create a new MySQL database named database_name (the starting point of a new project using MySQL):"
        },
        {
            "location": "/python/mysql/#to-start-using-a-database-you-must",
            "text": "USE database_name;",
            "title": "To start using a database you must:"
        },
        {
            "location": "/python/mysql/#to-create-a-new-table-named-users-an-example",
            "text": "CREATE TABLE users(id INT(11) AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), username VARCHAR(30), password VARCHAR(100), register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);  Show all tables:   SHOW TABLES;  Get info on a TABLE (in this example users):  DESCRIBE users;",
            "title": "To create a new table named users (an example):"
        },
        {
            "location": "/python/mysql/#add-data-to-table-via-command",
            "text": "INSERT INTO users(name, email, username, password) VALUES(x, x, x, x)",
            "title": "Add data to table via command:"
        },
        {
            "location": "/python/mysql/#typical-queries",
            "text": "SELECT * FROM users;   Select all rows from users table",
            "title": "Typical queries:"
        },
        {
            "location": "/python/mysql/#copying-a-database-to-another-server",
            "text": "One the server where the DB is located make a backup file by running the following command (on Windows it may be necessary to  cd Program Files/MySQL/MySQL Server 5.1/bin  first:    mysqldump -u root -p database_name > C:\\Users\\USER\\Desktop\\database_name.sql  Alternatively:  mysqldump -u[root] -p[password] database_123 > C:\\Users\\USER\\Desktop\\database_123.sql  If getting an \"Access Denied\" it message probably means you are outputing to a directory where you have no permission to create files.   On the second server create a new database using the same database name:   mysql -u root -p  to start the MySQL shell  CREATE DATABASE database_123;  to create the new DB   Copy the created backup to the second server and import it:   mysql -u[root] -p[password] database_name < database_name.sql",
            "title": "Copying a database to another server"
        },
        {
            "location": "/python/mysql/#usage-in-python",
            "text": "",
            "title": "Usage in Python"
        },
        {
            "location": "/python/mysql/#configuring-in-mysql-in-flask",
            "text": "# Config MySQL\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'mypassword'\napp.config['MYSQL_DB'] = 'flaskappdb'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'  # useful to return queries as dictionaries\n\n# Initialize MySQL\nmysql = MySQL(app)  Create cursor:   cursor = mysql.connection.cursor()  Execute a MySQL command:   cursor.execute( command )  Add data:   cursor.execute(\"INSERT INTO users(name, email, username, password) VALUES(%s, %s, %s, %s)\", (x, x, x, x))  Commit to database:   mysql.connection.commit()  Close:   cursor.close()",
            "title": "Configuring in MySQL in Flask:"
        },
        {
            "location": "/python/mysql/#check-db-for-a-login",
            "text": "result = cursor.execute(\"SELECT * FROM users WHERE username = %s\", [username])`\ndata = cursor.fetchone()",
            "title": "Check DB for a login:"
        },
        {
            "location": "/python/progress-bar/",
            "text": "Progress Bars\n\n\nBasic progress bar\n\n\nThere are many progressbars out there for Python, but they are dependencies, and this can be really annoying, especially when it is hard to install pip libraries.\n\n\nTo make any progressbar, you need to know the string option \n\\r\n. What makes \n\\r\n unique is that it will go to the start of printing.\n\n\nFor example, if you were to do \nprint('Hello World!')\n, it would print Hello World!. To visualize it, it is more like\n\n\nHello World!\n            ^\n\n\n\n\nThe cursor is at the character after the !. If we were to use \n\\r\n, the cursor would go to the front. In our example, it would mean\n\n\nHello World!\n^\n\n\n\n\nSee how the cursor is at the h? If it were to print anything, it would overwrite the character h.\n\n\nTheoretically, if we want to make a progressbar, we have to print a string multiple times with \n\\r\n.\n\n\ntimes = 1 # how many times the loop has looped\nfor i in range(10): # will repeat whatever is below 10 times.\n    print('\\rHappened '+str(times)+' times.') #happened x times\n    times += 1 #this is the same as times = times + 1\n\n\n\n\nHowever, if we run this, there will be an error. Each line will print on a new line.\n\n\nHappened 1 times.\nHappened 2 times.\nHappened 3 times.\nHappened 4 times.\nHappened 5 times.\nHappened 6 times.\nHappened 7 times.\nHappened 8 times.\nHappened 9 times.\nHappened 10 times.\n\n\n\n\nThis is because the print function adds \n\\n\n to the end of every string that is printed. Theoretically, it is printing \n'\\rHappened '+str(times)+' times.\\n'\n. We do not want \n\\n\n to be added, so to fix this, write \nprint('\\rHappened '+str(times)+' times.', end = '')\n. This makes it so that print will add \n''\n to the end of every string, which is equal to nothing. Finally if you run\n\n\ntimes = 1 # how many times the loop has looped\nfor i in range(10): # will repeat whatever is below 10 times.\n    print('\\rHappened '+str(times)+' times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1\n\n\n\n\nYou will get just one line of text. The only problem is that it happens so quickly, that you cannot see the bar updating. Try making it loop 1000000 times.\n\n\ntimes = 1 # how many times the loop has looped\nfor i in range(1000000): # will repeat whatever is below 1000000 times.\n    print('\\rHappened '+str(times)+' times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1\n\n\n\n\nNow you can see the text changing.\n\n\nFinally, you want to make sure to run \ntimes = 1\n every time you use this progressbar so that the number restarts at 1. You can also change the text to say whatever you want.\n\n\nTo do a basic x/total bar, just add a bit of text that says the total:\n\n\ntimes = 1 # how many times the loop has looped\nfor i in range(1000000): # will repeat whatever is below 1000000 times.\n    print('\\rHappened '+str(times)+'/1000000 times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1\n\n\n\n\nFor basic programmers:\n\n\ndef basic_function():\n    sum = 1+1\n\ndef counter(reps):\n    times = 1\n    for i in range(reps): # will repeat whatever is below reps times.\n        basic_function()\n        print('\\rHappened '+str(times)+'/'+str(reps)+' times.', end = '') #happened x times\n        times += 1 #this is the same as times = times + 1\n\ncounter(1000000)\n\n\n\n\nJust replace whatever is in basic_function with whatever you want to happen\n\n\nIf you are on Python2, enter in from \n__future__ import print_function\n at the top of the file/first thing on your interpter\n\n\nUsing \ntqdm\n library\n\n\nfrom tqdm import tqdm\n\nalist = list(range(5))\n\nfor thing in tqdm(alist):\n    print(thing)  # or whatever you do...",
            "title": "Progress Bars"
        },
        {
            "location": "/python/progress-bar/#progress-bars",
            "text": "",
            "title": "Progress Bars"
        },
        {
            "location": "/python/progress-bar/#basic-progress-bar",
            "text": "There are many progressbars out there for Python, but they are dependencies, and this can be really annoying, especially when it is hard to install pip libraries.  To make any progressbar, you need to know the string option  \\r . What makes  \\r  unique is that it will go to the start of printing.  For example, if you were to do  print('Hello World!') , it would print Hello World!. To visualize it, it is more like  Hello World!\n            ^  The cursor is at the character after the !. If we were to use  \\r , the cursor would go to the front. In our example, it would mean  Hello World!\n^  See how the cursor is at the h? If it were to print anything, it would overwrite the character h.  Theoretically, if we want to make a progressbar, we have to print a string multiple times with  \\r .  times = 1 # how many times the loop has looped\nfor i in range(10): # will repeat whatever is below 10 times.\n    print('\\rHappened '+str(times)+' times.') #happened x times\n    times += 1 #this is the same as times = times + 1  However, if we run this, there will be an error. Each line will print on a new line.  Happened 1 times.\nHappened 2 times.\nHappened 3 times.\nHappened 4 times.\nHappened 5 times.\nHappened 6 times.\nHappened 7 times.\nHappened 8 times.\nHappened 9 times.\nHappened 10 times.  This is because the print function adds  \\n  to the end of every string that is printed. Theoretically, it is printing  '\\rHappened '+str(times)+' times.\\n' . We do not want  \\n  to be added, so to fix this, write  print('\\rHappened '+str(times)+' times.', end = '') . This makes it so that print will add  ''  to the end of every string, which is equal to nothing. Finally if you run  times = 1 # how many times the loop has looped\nfor i in range(10): # will repeat whatever is below 10 times.\n    print('\\rHappened '+str(times)+' times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1  You will get just one line of text. The only problem is that it happens so quickly, that you cannot see the bar updating. Try making it loop 1000000 times.  times = 1 # how many times the loop has looped\nfor i in range(1000000): # will repeat whatever is below 1000000 times.\n    print('\\rHappened '+str(times)+' times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1  Now you can see the text changing.  Finally, you want to make sure to run  times = 1  every time you use this progressbar so that the number restarts at 1. You can also change the text to say whatever you want.  To do a basic x/total bar, just add a bit of text that says the total:  times = 1 # how many times the loop has looped\nfor i in range(1000000): # will repeat whatever is below 1000000 times.\n    print('\\rHappened '+str(times)+'/1000000 times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1  For basic programmers:  def basic_function():\n    sum = 1+1\n\ndef counter(reps):\n    times = 1\n    for i in range(reps): # will repeat whatever is below reps times.\n        basic_function()\n        print('\\rHappened '+str(times)+'/'+str(reps)+' times.', end = '') #happened x times\n        times += 1 #this is the same as times = times + 1\n\ncounter(1000000)  Just replace whatever is in basic_function with whatever you want to happen  If you are on Python2, enter in from  __future__ import print_function  at the top of the file/first thing on your interpter",
            "title": "Basic progress bar"
        },
        {
            "location": "/python/progress-bar/#using-tqdm-library",
            "text": "from tqdm import tqdm\n\nalist = list(range(5))\n\nfor thing in tqdm(alist):\n    print(thing)  # or whatever you do...",
            "title": "Using tqdm library"
        },
        {
            "location": "/python/slice-notation/",
            "text": "Slice notation\n\n\nThe ASCII art diagram is helpful too for remembering how slices work:\n\n\n +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n\n\n\nOne way to remember how slices work is to think of the indices as pointing \nbetween\n characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of \nn\n characters has index \nn\n.\n\n\na[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array\n\n\n\n\nThere is also the \nstep\n value, which can be used with any of the above:\n\n\na[start:end:step] # start through not past end, by step\n\n\n\n\nThe key point to remember is that the \n:end\n value represents the first value that is \nnot\n in the selected slice. So, the difference beween \nend\n and \nstart\n is the number of elements selected (if \nstep\n is 1, the default).\n\n\nThe other feature is that \nstart\n or \nend\n may be a \nnegative\n number, which means it counts from the end of the array instead of the beginning. So:\n\n\na[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n\n\n\n\nPython is kind to the programmer if there are fewer items than you ask for. For example, if you ask for \na[:-2]\n and \na\n only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.",
            "title": "Slice notation"
        },
        {
            "location": "/python/slice-notation/#slice-notation",
            "text": "The ASCII art diagram is helpful too for remembering how slices work:   +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1  One way to remember how slices work is to think of the indices as pointing  between  characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of  n  characters has index  n .  a[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array  There is also the  step  value, which can be used with any of the above:  a[start:end:step] # start through not past end, by step  The key point to remember is that the  :end  value represents the first value that is  not  in the selected slice. So, the difference beween  end  and  start  is the number of elements selected (if  step  is 1, the default).  The other feature is that  start  or  end  may be a  negative  number, which means it counts from the end of the array instead of the beginning. So:  a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items  Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for  a[:-2]  and  a  only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.",
            "title": "Slice notation"
        },
        {
            "location": "/python/snippets/",
            "text": "Useful Python code snippets\n\n\nA collection of several code snippets of common or useful operation in Python.\n\n\nRemove dictionary from list\n\n\nHere's how to remove a specific dictionary, or several dictionaries, from a list of dictionaries by a specific key. In the example below we are removing from the list all dictionaries which have and \nid\n key of \n2\n.\n\n\nthelist = [{'id': 1, 'name': 'paul'},\n           {'id': 2, 'name': 'john'}]\n\nthelist[:] = [d for d in thelist if d.get('id') != 2]\n\n\n\n\nList Comprehension\n\n\nWithout list comprehension:\n\n\nx = [1,2,3,4]\nout = []\nfor item in x:\n    out.append(item**2)\nprint(out)\n# [1, 4, 9, 16]\n\n\n\n\nWith list comprehension:\n\n\nx = [1,2,3,4]\nout = [item**2 for item in x]\nprint(out)\n# [1, 4, 9, 16]\n\n\n\n\nLambda Functions\n\n\nLambda functions are used for creating small, one-time and anonymous function objects in Python. Basically, they let you create a function, without creating a function. Note that lambda functions can do everything that regular functions can do, as long as there\u2019s just one expression. The basic syntax of lambda functions is: \nlambda arguments: expression\n. And here is an example:\n\n\ndouble = lambda x: x * 2\nprint(double(5))\n# 10\n\n\n\n\nMap and Filter\n\n\nOnce you have a grasp on lambda functions, learning to pair them with the map and filter functions can be a powerful tool. Specifically, \nmap\n takes in a list and transforms it into a new list by performing some sort of operation on each element. In this example, it goes through each element and maps the result of itself times 2 to a new list. Note that the list function simply converts the output to list type.\n\n\nseq = [1, 2, 3, 4, 5]\nlist(map(lambda var: var*2, seq))\n #[2, 4, 6, 8, 10]\n\n\n\n\nThe \nfilter\n function takes in a list and a rule, much like map, however it returns a subset of the original list by comparing each element against the boolean filtering rule.\n\n\nseq = [1, 2, 3, 4, 5]\nlist(filter(lambda x: x > 2, seq))\n# [3, 4, 5]\n\n\n\n\n\n\nArange and Linspace\n\n\nFor creating quick and easy Numpy arrays, look no further than the arange and linspace functions. Each one has their specific purpose, but the appeal here (instead of using range), is that they output NumPy arrays, which are typically easier to work with for data science.\n\n\nArange\n returns evenly spaced values within a given interval. Along with a starting and stopping point, you can also define a step size or data type if necessary. Note that the stopping point is a \u2018cut-off\u2019 value, so it will not be included in the array output.\n\n\n# np.arange(start, stop, step)\nnp.arange(3, 7, 2)\n# array([3, 5])\n\n\n\n\nLinspace\n is very similar, but with a slight twist. Linspace returns evenly spaced numbers over a specified interval. So given a starting and stopping point, as well as a number of values, linspace will evenly space them out for you in a NumPy array. This is especially helpful for data visualizations and declaring axes when plotting.\n\n\n# np.linspace(start, stop, num)\nnp.linspace(2.0, 3.0, num=5)\n# array([ 2.0,  2.25,  2.5,  2.75, 3.0])",
            "title": "Useful Python code snippets"
        },
        {
            "location": "/python/snippets/#useful-python-code-snippets",
            "text": "A collection of several code snippets of common or useful operation in Python.",
            "title": "Useful Python code snippets"
        },
        {
            "location": "/python/snippets/#remove-dictionary-from-list",
            "text": "Here's how to remove a specific dictionary, or several dictionaries, from a list of dictionaries by a specific key. In the example below we are removing from the list all dictionaries which have and  id  key of  2 .  thelist = [{'id': 1, 'name': 'paul'},\n           {'id': 2, 'name': 'john'}]\n\nthelist[:] = [d for d in thelist if d.get('id') != 2]",
            "title": "Remove dictionary from list"
        },
        {
            "location": "/python/snippets/#list-comprehension",
            "text": "Without list comprehension:  x = [1,2,3,4]\nout = []\nfor item in x:\n    out.append(item**2)\nprint(out)\n# [1, 4, 9, 16]  With list comprehension:  x = [1,2,3,4]\nout = [item**2 for item in x]\nprint(out)\n# [1, 4, 9, 16]",
            "title": "List Comprehension"
        },
        {
            "location": "/python/snippets/#lambda-functions",
            "text": "Lambda functions are used for creating small, one-time and anonymous function objects in Python. Basically, they let you create a function, without creating a function. Note that lambda functions can do everything that regular functions can do, as long as there\u2019s just one expression. The basic syntax of lambda functions is:  lambda arguments: expression . And here is an example:  double = lambda x: x * 2\nprint(double(5))\n# 10",
            "title": "Lambda Functions"
        },
        {
            "location": "/python/snippets/#map-and-filter",
            "text": "Once you have a grasp on lambda functions, learning to pair them with the map and filter functions can be a powerful tool. Specifically,  map  takes in a list and transforms it into a new list by performing some sort of operation on each element. In this example, it goes through each element and maps the result of itself times 2 to a new list. Note that the list function simply converts the output to list type.  seq = [1, 2, 3, 4, 5]\nlist(map(lambda var: var*2, seq))\n #[2, 4, 6, 8, 10]  The  filter  function takes in a list and a rule, much like map, however it returns a subset of the original list by comparing each element against the boolean filtering rule.  seq = [1, 2, 3, 4, 5]\nlist(filter(lambda x: x > 2, seq))\n# [3, 4, 5]",
            "title": "Map and Filter"
        },
        {
            "location": "/python/snippets/#arange-and-linspace",
            "text": "For creating quick and easy Numpy arrays, look no further than the arange and linspace functions. Each one has their specific purpose, but the appeal here (instead of using range), is that they output NumPy arrays, which are typically easier to work with for data science.  Arange  returns evenly spaced values within a given interval. Along with a starting and stopping point, you can also define a step size or data type if necessary. Note that the stopping point is a \u2018cut-off\u2019 value, so it will not be included in the array output.  # np.arange(start, stop, step)\nnp.arange(3, 7, 2)\n# array([3, 5])  Linspace  is very similar, but with a slight twist. Linspace returns evenly spaced numbers over a specified interval. So given a starting and stopping point, as well as a number of values, linspace will evenly space them out for you in a NumPy array. This is especially helpful for data visualizations and declaring axes when plotting.  # np.linspace(start, stop, num)\nnp.linspace(2.0, 3.0, num=5)\n# array([ 2.0,  2.25,  2.5,  2.75, 3.0])",
            "title": "Arange and Linspace"
        },
        {
            "location": "/python/store-dicts/",
            "text": "Storing dictionaries for later use: JSON and Pickle\n\n\nJSON\n\n\nSaving:\n\n\nimport json\nwith open('data.json', 'w') as fp:\n    json.dump(data, fp)\n\n\n\n\nSupply extra arguments like sort_keys or indent to get a pretty result. The argument sort_keys will sort the keys alphabetically and indent will indent your data structure with indent=N spaces.\n\n\njson.dump(data, fp, sort_keys=True, indent=4)\n\n\n\n\nLoading:\n\n\nwith open('data.json', 'r') as fp:\n    data = json.load(fp)\n\n\n\n\njson.dump() vs json.dumps(), json.load() vs json.loads()\n\n\nIf you want to dump the JSON into a file/socket or whatever, then you should go for \ndump()\n. If you only need it as a string (for printing, parsing or whatever) then use \ndumps()\n (dump string). The functions with an \ns\n take string parameters. The others take file streams.\n\n\n\n\nPickle\n\n\nSaving:\n\n\nimport cPickle as pickle\nwith open('data.p', 'wb') as fp:\n    pickle.dump(data, fp)\n\n\n\n\nLoading:\n\n\nwith open('data.p', 'rb') as fp:\n    data = pickle.load(fp)",
            "title": "Storing dictionaries for later use: JSON and Pickle"
        },
        {
            "location": "/python/store-dicts/#storing-dictionaries-for-later-use-json-and-pickle",
            "text": "",
            "title": "Storing dictionaries for later use: JSON and Pickle"
        },
        {
            "location": "/python/store-dicts/#json",
            "text": "Saving:  import json\nwith open('data.json', 'w') as fp:\n    json.dump(data, fp)  Supply extra arguments like sort_keys or indent to get a pretty result. The argument sort_keys will sort the keys alphabetically and indent will indent your data structure with indent=N spaces.  json.dump(data, fp, sort_keys=True, indent=4)  Loading:  with open('data.json', 'r') as fp:\n    data = json.load(fp)",
            "title": "JSON"
        },
        {
            "location": "/python/store-dicts/#jsondump-vs-jsondumps-jsonload-vs-jsonloads",
            "text": "If you want to dump the JSON into a file/socket or whatever, then you should go for  dump() . If you only need it as a string (for printing, parsing or whatever) then use  dumps()  (dump string). The functions with an  s  take string parameters. The others take file streams.",
            "title": "json.dump() vs json.dumps(), json.load() vs json.loads()"
        },
        {
            "location": "/python/store-dicts/#pickle",
            "text": "Saving:  import cPickle as pickle\nwith open('data.p', 'wb') as fp:\n    pickle.dump(data, fp)  Loading:  with open('data.p', 'rb') as fp:\n    data = pickle.load(fp)",
            "title": "Pickle"
        },
        {
            "location": "/python/stravalib/",
            "text": "Interfacing with Strava API using stavalib\n\n\nInstalation:\n\n\n$ pip install stravalib\n\n\nUsage:\n\n\nfrom stravalib import Client\n\nclient = Client(access_token='fgd456fgs5dgs546dfg')\nathlete = client.get_athlete()  # Get your athlete profile\nathlete2 = client.get_athlete(227615)  # By providing an athlete ID you can access other people\n\n\n\n\nTo get a given activity, use the get_activity function and provide activity_id:\n\n\nactivity = client.get_activity(207650614)\n\n# Activity object has many basic properties such as type and distance.\nprint(\"type={0.type} distance={1} km\".format(activity, unithelper.kilometers(activity.distance)))\n\n\n\n\nActivity information:\n\n\n# Activities can have many streams, you can request desired stream types\ntypes = ['time', 'latlng', 'altitude', 'heartrate', 'temp', ]\n\nstreams = client.get_activity_streams(123, types=types, resolution='medium')\n\n#  Result is a dictionary object.  The dict's key are the stream type.\nif 'altitude' in streams.keys():\n    print(streams['altitude'].data)\n\n\n\n\nList of Activities:\n\n\nfor activity in client.get_activities(after = \"2010-01-01T00:00:00Z\",  limit=5):  # To get newest to oldest use before argument.\n    print(\"{0.name} {0.moving_time}\".format(activity))\n\n\n\n\nOfficial documentation\n\n\n\n\nStrava API Docs\n\n\nstravalib Docs",
            "title": "Interfacing with Strava API using stavalib"
        },
        {
            "location": "/python/stravalib/#interfacing-with-strava-api-using-stavalib",
            "text": "",
            "title": "Interfacing with Strava API using stavalib"
        },
        {
            "location": "/python/stravalib/#instalation",
            "text": "$ pip install stravalib",
            "title": "Instalation:"
        },
        {
            "location": "/python/stravalib/#usage",
            "text": "from stravalib import Client\n\nclient = Client(access_token='fgd456fgs5dgs546dfg')\nathlete = client.get_athlete()  # Get your athlete profile\nathlete2 = client.get_athlete(227615)  # By providing an athlete ID you can access other people  To get a given activity, use the get_activity function and provide activity_id:  activity = client.get_activity(207650614)\n\n# Activity object has many basic properties such as type and distance.\nprint(\"type={0.type} distance={1} km\".format(activity, unithelper.kilometers(activity.distance)))  Activity information:  # Activities can have many streams, you can request desired stream types\ntypes = ['time', 'latlng', 'altitude', 'heartrate', 'temp', ]\n\nstreams = client.get_activity_streams(123, types=types, resolution='medium')\n\n#  Result is a dictionary object.  The dict's key are the stream type.\nif 'altitude' in streams.keys():\n    print(streams['altitude'].data)  List of Activities:  for activity in client.get_activities(after = \"2010-01-01T00:00:00Z\",  limit=5):  # To get newest to oldest use before argument.\n    print(\"{0.name} {0.moving_time}\".format(activity))",
            "title": "Usage:"
        },
        {
            "location": "/python/stravalib/#official-documentation",
            "text": "Strava API Docs  stravalib Docs",
            "title": "Official documentation"
        },
        {
            "location": "/python/string-formatting/",
            "text": "String formatting in Python\n\n\nF-strings (Python >=3.6)\n\n\nname = \"Test\"\nf'My app name is {name}.'  # 'My app name is Test.\n\n\n\n\nNew method (Python >=2.6)\n\n\n'{} {}'.format('one', 'two')  # Output: 'one two'\n'{} {}'.format(1, 2)  # Output: '1 2'\n\n\n\n\nOld method\n\n\n'%s %s' % ('one', 'two')  # Output: 'one two'\n'%d %d' % (1, 2)  # Output: '1 2'\n\n\n\n\nNumber formatting\n\n\nThe following table shows various ways to format numbers using str.format(), including examples for both float formatting and integers.\n\n\nTo run examples use \nprint(\"FORMAT\".format(NUMBER))\n. So to get the output of the first example, you would run: \nprint(\"{:.2f}\".format(3.1415926))\n.\n\n\n\n\n\n\n\n\nNumber\n\n\nFormat\n\n\nOutput\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n3.1415926\n\n\n{:.2f}\n\n\n3.14\n\n\n2 decimal places\n\n\n\n\n\n\n3.1415926\n\n\n{:+.2f}\n\n\n+3.14\n\n\n2 decimal places with sign\n\n\n\n\n\n\n-1\n\n\n{:+.2f}\n\n\n-1.00\n\n\n2 decimal places with sign\n\n\n\n\n\n\n2.71828\n\n\n{:.0f}\n\n\n3\n\n\nNo decimal places\n\n\n\n\n\n\n5\n\n\n{:0>2d}\n\n\n05\n\n\nPad number with zeros (left padding, width 2)\n\n\n\n\n\n\n5\n\n\n{:x<4d}\n\n\n5xxx\n\n\nPad number with x\u2019s (right padding, width 4)\n\n\n\n\n\n\n10\n\n\n{:x<4d}\n\n\n10xx\n\n\nPad number with x\u2019s (right padding, width 4)\n\n\n\n\n\n\n1000000\n\n\n{:,}\n\n\n1,000,000\n\n\nNumber format with comma separator\n\n\n\n\n\n\n0.25\n\n\n{:.2%}\n\n\n25.00%\n\n\nFormat percentage\n\n\n\n\n\n\n1000000000\n\n\n{:.2e}\n\n\n1.00e+09\n\n\nExponent notation\n\n\n\n\n\n\n13\n\n\n{:10d}\n\n\n13\n\n\nRight aligned (default, width 10)\n\n\n\n\n\n\n13\n\n\n{:<10d}\n\n\n13\n\n\nLeft aligned (width 10)\n\n\n\n\n\n\n13\n\n\n{:^10d}\n\n\n13\n\n\nCenter aligned (width 10)",
            "title": "String formatting in Python"
        },
        {
            "location": "/python/string-formatting/#string-formatting-in-python",
            "text": "",
            "title": "String formatting in Python"
        },
        {
            "location": "/python/string-formatting/#f-strings-python-36",
            "text": "name = \"Test\"\nf'My app name is {name}.'  # 'My app name is Test.",
            "title": "F-strings (Python &gt;=3.6)"
        },
        {
            "location": "/python/string-formatting/#new-method-python-26",
            "text": "'{} {}'.format('one', 'two')  # Output: 'one two'\n'{} {}'.format(1, 2)  # Output: '1 2'",
            "title": "New method (Python &gt;=2.6)"
        },
        {
            "location": "/python/string-formatting/#old-method",
            "text": "'%s %s' % ('one', 'two')  # Output: 'one two'\n'%d %d' % (1, 2)  # Output: '1 2'",
            "title": "Old method"
        },
        {
            "location": "/python/string-formatting/#number-formatting",
            "text": "The following table shows various ways to format numbers using str.format(), including examples for both float formatting and integers.  To run examples use  print(\"FORMAT\".format(NUMBER)) . So to get the output of the first example, you would run:  print(\"{:.2f}\".format(3.1415926)) .     Number  Format  Output  Description      3.1415926  {:.2f}  3.14  2 decimal places    3.1415926  {:+.2f}  +3.14  2 decimal places with sign    -1  {:+.2f}  -1.00  2 decimal places with sign    2.71828  {:.0f}  3  No decimal places    5  {:0>2d}  05  Pad number with zeros (left padding, width 2)    5  {:x<4d}  5xxx  Pad number with x\u2019s (right padding, width 4)    10  {:x<4d}  10xx  Pad number with x\u2019s (right padding, width 4)    1000000  {:,}  1,000,000  Number format with comma separator    0.25  {:.2%}  25.00%  Format percentage    1000000000  {:.2e}  1.00e+09  Exponent notation    13  {:10d}  13  Right aligned (default, width 10)    13  {:<10d}  13  Left aligned (width 10)    13  {:^10d}  13  Center aligned (width 10)",
            "title": "Number formatting"
        },
        {
            "location": "/python/virtual-environments/",
            "text": "Virtual enviroments\n\n\nVirtual environment using \nvirtualenv\n\n\nInstall: \n$ pip install virtualenv\n\n\nCreate a new virtual enviroment:\n\n\nMy prefered method is to create the environment in the respective project folder and naming it \nvenv\n. Another alternative is to have a folder where you place all your virtualenvironments and name them according to their respective project.\n\n\n$ cd desired_folder\n$ virtualenv venv \n\n\n\n\nTo activate the environment:\n\n\n(Windows) \n$ venv/Scripts/activate.bat\n\n\n(Linux) \n$ source venv/bin/activate\n \n\n\nOnce activated you can normaly use \npip\n to install packages in this environment: \n$ pip install blabla\n\n\nYou can see the list of installed packages using: \n$ pip list\n\n\nTo transfer the environment to another machine you can use: \n$ pip freeze > requirements.txt\n \n\n\nThis will create a requirements.txt file, which contains a simple list of all the packages in the current environment, and their respective versions. Later, if you need to re-create the environment, install the same packages using the same versions: \n$ pip install -r requirements.txt\n\n\nTo deactivate the environment:\n\n\n(Windows) \n$ venv/Scripts/deactivate.bat\n\n\n(Linux) \n$ deactivate",
            "title": "Virtual enviroments"
        },
        {
            "location": "/python/virtual-environments/#virtual-enviroments",
            "text": "",
            "title": "Virtual enviroments"
        },
        {
            "location": "/python/virtual-environments/#virtual-environment-using-virtualenv",
            "text": "Install:  $ pip install virtualenv",
            "title": "Virtual environment using virtualenv"
        },
        {
            "location": "/python/virtual-environments/#create-a-new-virtual-enviroment",
            "text": "My prefered method is to create the environment in the respective project folder and naming it  venv . Another alternative is to have a folder where you place all your virtualenvironments and name them according to their respective project.  $ cd desired_folder\n$ virtualenv venv",
            "title": "Create a new virtual enviroment:"
        },
        {
            "location": "/python/virtual-environments/#to-activate-the-environment",
            "text": "(Windows)  $ venv/Scripts/activate.bat  (Linux)  $ source venv/bin/activate    Once activated you can normaly use  pip  to install packages in this environment:  $ pip install blabla  You can see the list of installed packages using:  $ pip list  To transfer the environment to another machine you can use:  $ pip freeze > requirements.txt    This will create a requirements.txt file, which contains a simple list of all the packages in the current environment, and their respective versions. Later, if you need to re-create the environment, install the same packages using the same versions:  $ pip install -r requirements.txt",
            "title": "To activate the environment:"
        },
        {
            "location": "/python/virtual-environments/#to-deactivate-the-environment",
            "text": "(Windows)  $ venv/Scripts/deactivate.bat  (Linux)  $ deactivate",
            "title": "To deactivate the environment:"
        }
    ]
}