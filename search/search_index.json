{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Programming Notes","text":"<p>A collection of programming notes, snippets and examples. By Jos\u00e9 Aniceto.</p> <p>Click for the website</p> <p>Below is a list of the most used pages.</p>"},{"location":"#general","title":"General","text":"<ul> <li>Ubuntu CLI cheat sheet</li> </ul>"},{"location":"#python","title":"Python","text":"<ul> <li>Scientific quality figures</li> </ul>"},{"location":"general/contributing-oss/","title":"Guide to contributing on GitHub","text":"<p>This is a step-by-step guide to contributing to an open-source project hosted on GitHub. You need a Guthub account to contribute.</p> <p>Steps 1 through 4 are setup steps, meaning you only have to do them once for each GitHub project.</p> <p>Steps 5 through 17 should be repeated for each contribution to that project.</p>"},{"location":"general/contributing-oss/#1-fork-the-project-repository","title":"1) Fork the project repository","text":"<p>Forking the repository creates a copy of the project repository in your GitHub account.</p>"},{"location":"general/contributing-oss/#2-clone-your-fork","title":"2) Clone your fork","text":"<p>Clone or download the repository to your local machine.</p> <p>Alternetively, using Git on your local machine, you can clone your fork using its URL: </p> <pre><code>git clone URL_OF_FORK.\n</code></pre>"},{"location":"general/contributing-oss/#3-check-that-your-fork-is-the-origin-remote","title":"3) Check that your fork is the \"origin\" remote","text":"<p>You are going to be synchronizing your local repository with both the project repository (on GitHub) and your fork (also on GitHub). The URLs that point to these repositories are called \"remotes\". More specifically, the project repository is called the \"upstream\" remote, and your fork is called the \"origin\" remote.</p> <p>When you cloned your fork, that should have automatically set your fork as the \"origin\" remote. Use <code>git remote -v</code> to show your current remotes. You should see the URL of your fork next to the word \"origin\".</p> <p>If you don't see an \"origin\" remote, you can add it using: </p> <pre><code>git remote add origin URL_OF_FORK.\n</code></pre>"},{"location":"general/contributing-oss/#4-add-the-project-repository-as-the-upstream-remote","title":"4) Add the project repository as the \"upstream\" remote","text":"<p>Add the project repository as the \"upstream\" remote using: </p> <pre><code>git remote add upstream URL_OF_PROJECT\n</code></pre> <p>Use <code>git remote -v</code> to check that you now have two remotes: an origin that points to your fork, and an upstream that points to the project repository.</p>"},{"location":"general/contributing-oss/#5-pull-the-latest-changes-from-upstream-into-your-local-repository","title":"5) Pull the latest changes from upstream into your local repository","text":"<p>Before you start making any changes to your local files, it's a good practice to first synchronize your local repository with the project repository. Use </p> <pre><code>git pull upstream master\n</code></pre> <p>to \"pull\" any changes from the \"master\" branch of the \"upstream\" into your local repository. (If the project repository uses \"main\" instead of \"master\" for its default branch, then you would use <code>git pull upstream main</code> instead.)</p> <p>If you forked and cloned the project repository just a few minutes ago, it's very unlikely there will be any changes, in which case Git will report that your local repository is \"already up to date\". But if there are any changes, they will automatically be merged into your local repository.</p>"},{"location":"general/contributing-oss/#6-create-a-new-branch","title":"6) Create a new branch","text":"<p>Rather than making changes to the project's \"master\" branch, it's a good practice to instead create your own branch. This creates an environment for your work that is isolated from the master branch.</p> <p>Use </p> <pre><code>git checkout -b BRANCH_NAME\n</code></pre> <p>to create a new branch and then immediately switch to it. The name of the branch should briefly describe what you are working on, and should not contain any spaces.</p> <p>Use <code>git branch</code> to show your local branches. You should see your new branch as well as \"master\", and your new branch should have an asterisk next to it to indicate that it's \"checked out\" (meaning that you're working in it).</p>"},{"location":"general/contributing-oss/#7-make-changes-in-your-local-repository","title":"7) Make changes in your local repository","text":"<p>Use a text editor or IDE to make the changes you planned to the files in your local repository. Because you checked out a branch in the previous step, any edits you make will only affect that branch.</p>"},{"location":"general/contributing-oss/#8-commit-your-changes","title":"8) Commit your changes","text":"<p>After you make a set of changes, use </p> <pre><code>git add -A\n</code></pre> <p>to stage your changes and </p> <pre><code>git commit -m \"DESCRIPTION OF CHANGES\"\n</code></pre> <p>to commit them.</p> <p>If you are making multiple sets of changes, it's a good practice to make a commit after each set.</p>"},{"location":"general/contributing-oss/#9-push-your-changes-to-your-fork","title":"9) Push your changes to your fork","text":"<p>When you are done making all of your changes, upload these changes to your fork using </p> <pre><code>git push origin BRANCH_NAME\n</code></pre> <p>This \"pushes\" your changes to the \"BRANCH_NAME\" branch of the \"origin\" (which is your fork on GitHub).</p>"},{"location":"general/contributing-oss/#10-begin-the-pull-request","title":"10) Begin the pull request","text":"<p>Return to your fork on GitHub, and refresh the page. You may see a highlighted area that displays your recently pushed branch.</p> <p>Click the green Compare &amp; pull request button to begin the pull request.</p>"},{"location":"general/contributing-oss/#11-create-the-pull-request","title":"11) Create the pull request","text":"<p>When opening a \"pull request\", you are making a \"request\" that the project repository \"pull\" changes from your fork. You will see that the project repository is listed as the \"base repository\", and your fork is listed as the \"head repository\".</p> <p>Before submitting the pull request, you first need to describe the changes you made (rather than asking the project maintainers to figure them out on their own). You should write a descriptive title for your pull request, and then include more details in the body of the pull request. If there are any related GitHub issues, make sure to mention those by number.</p> <p>Below the pull request form, you will see a list of the commits you made in your branch, as well as the \"diffs\" for all of the files you changed.</p> <p>If everything looks good, click the green Create pull request button!</p>"},{"location":"general/contributing-oss/#12-review-the-pull-request","title":"12) Review the pull request","text":"<p>You have now created a pull request, which is stored in the project's repository (not in your fork of the repository). It's a good idea to read through what you wrote, as well as clicking on the Commits tab and the Files changed tab to review the contents of your pull request.</p> <p>If you realize that you left out some important details, you can click the 3 dots in the upper right corner to edit your pull request description.</p>"},{"location":"general/contributing-oss/#13-add-more-commits-to-your-pull-request","title":"13) Add more commits to your pull request","text":"<p>You can continue to add more commits to your pull request even after opening it! For example, the project maintainers may ask you to make some changes, or you may just think of a change that you forgot to include.</p> <p>Start by returning to your local repository, and use <code>git branch</code> to see which branch is currently checked out. If you are currently in the master branch (rather than the branch you created), then use <code>git checkout BRANCH_NAME</code> to switch.</p> <p>Then, you should repeat steps 7 through 9: make changes, commit them, and push them to your fork.</p> <p>Finally, return to your open pull request on GitHub and refresh the page. You will see that your new commits have automatically been added to the pull request.</p>"},{"location":"general/contributing-oss/#14-discuss-the-pull-request","title":"14) Discuss the pull request","text":"<p>There may be questions or discussion about your pull request from the project maintainers.</p> <p>Click the Resolve conversation button once you have addressed any specific requests.</p>"},{"location":"general/contributing-oss/#15-delete-your-branch-from-your-fork","title":"15) Delete your branch from your fork","text":"<p>If the project maintainers accept your pull request, they will merge your proposed changes into the project's master branch and close your pull request. You will be given the option to delete your branch from your fork, since it's no longer of any use.</p>"},{"location":"general/contributing-oss/#16-delete-your-branch-from-your-local-repository","title":"16) Delete your branch from your local repository","text":"<p>You should also delete the branch you created from your local repository, so that you don't accidentally start working in it the next time you want to make a contribution to this project.</p> <p>First, switch to the master branch: </p> <pre><code>git checkout master\n</code></pre> <p>Then, delete the branch you created: </p> <pre><code>git branch -D BRANCH_NAME\n</code></pre>"},{"location":"general/contributing-oss/#17-synchronize-your-fork-with-the-project-repository","title":"17) Synchronize your fork with the project repository","text":"<p>At this point, your fork is out of sync with the project repository's master branch.</p> <p>To get it back in sync, you should first use Git to pull the latest changes from \"upstream\" (the project repository) into your local repository: </p> <pre><code>git pull upstream master\n</code></pre> <p>Then, push those changes from your local repository to the \"origin\" (your fork): </p> <pre><code>git push origin master\n</code></pre> <p>If you return to your fork on GitHub, you will see that the master branch is \"even\" with the project repository's master branch.</p>"},{"location":"general/contributing-oss/#references","title":"References","text":"<ul> <li>Step-by-step guide to contributing on GitHub by Data School</li> </ul>"},{"location":"general/docker/","title":"Docker","text":""},{"location":"general/docker/#basic-commands","title":"Basic commands","text":"<p>To check status of all containers:</p> <pre><code>docker ps\ndocker ps -a\n</code></pre> <p>Add the <code>-a</code> flag to include stopped containers.</p> <p>Stop a container:</p> <pre><code>docker stop container_name\n</code></pre> <p>If stopping doesn\u2019t work, killing the container may also sometimes be necessary:</p> <pre><code>docker kill container_name\n</code></pre> <p>Remove a container:</p> <pre><code>docker rm container_name\n</code></pre> <p>or to stop and remove in a single step:</p> <pre><code>docker rm -f container_name\n</code></pre> <p>To remove all stopped Docker containers:</p> <pre><code>docker container prune\n</code></pre> <p>To start a container:</p> <pre><code>docker start container_name\n</code></pre> <p>To restart a container:</p> <pre><code>docker restart container_name\n</code></pre>"},{"location":"general/docker/#types-of-docker-storage","title":"Types of Docker storage","text":"<p>Volumes: Managed by Docker, stored in <code>/var/lib/docker/volumes/</code> (on Linux), best for most use cases.</p> <p>Bind mounts: Maps a host directory into the container. Useful for development.</p> <p>Tmpfs: Temporary storage in memory. Disappears after container stops.</p>"},{"location":"general/docker/#volumes","title":"Volumes","text":"<p>Here is an example of a <code>docker-compose.yaml</code> <code>volumes</code> section with a mix of short syntax and long syntax for defining bind mounts:</p> <pre><code>volumes:\n  - /path/to/config:/config  # bind mount that maps path on your host machine (left of :) with path inside the container (right of :)\n  - /path/to/cache:/cache\n  - type: bind  # these 3 lines map a path on your host machine (source) with path inside the container (target)\n    source: /path/to/media\n    target: /media\n</code></pre> <p>Both syntax are equivalent.</p>"},{"location":"general/docker/#docker-compose","title":"Docker Compose","text":"<p>See Set up Docker and Docker Compose.</p> <p>Docker Compose allows you to define and run multi-container applications with Docker.</p> <p>To builds, (re)create, start, and attach containers for a service.</p> <pre><code>docker compose up\ndocker compose up --build\ndocker compose up -d\n</code></pre> <p>The <code>--build</code> builds images before starting containers. The <code>-d</code> flag starts the containers in the background and leaves them running. The <code>--force-recreate</code> flag forces Compose to stop and recreate all containers</p> <p>To remove the volumes along with the containers:</p> <pre><code>docker compose down -v\n</code></pre> <p>To access the logs:</p> <pre><code>docker compose logs\n</code></pre>"},{"location":"general/docker/#updating-containers","title":"Updating containers","text":"<p>The basic method for updating a container is to pull a newer version of the container image, remove the container, and then start a new container using the new image version. This is one reason storing data inside volumes is important. It's the only way data can survive this process.</p> <p>Watchtower is a service for keeping containers up to date (runs inside a container). It detects whenever a new version is available and automatically replaces containers with the new version using the same settings they were created with. </p>"},{"location":"general/docker/#start-containers-automatically","title":"Start containers automatically","text":""},{"location":"general/docker/#using-restart-policies","title":"Using restart policies","text":"<p>Docker provides restart policies to control whether your containers start automatically when they exit, or when Docker restarts.</p> <p>The following command starts container named <code>containername</code> and configures it to always restart, unless the container is explicitly stopped, or the daemon restarts.</p> <pre><code>docker run -d --restart unless-stopped containername\n</code></pre> <p>The following command changes the restart policy for an already running container:</p> <pre><code>docker update --restart unless-stopped containername\n</code></pre>"},{"location":"general/docker/#using-a-process-manager","title":"Using a process manager","text":"<p>You can also use a process manager like <code>systemd</code>. Create the <code>systemd</code> file:</p> <pre><code>nano /etc/systemd/system/docker-myproject.service\n</code></pre> <pre><code>[Unit]\nDescription=Docker project\nRequires=docker.service\nAfter=docker.service\n\n[Service]\nRestart=always\nExecStart=/usr/bin/docker start -a myproject\nExecStop=/usr/bin/docker stop -t 2 myproject\n\n[Install]\nWantedBy=default.target\n</code></pre> <p>Then, enable the service at startup:</p> <pre><code>sudo systemctl enable docker-myproject.service\n</code></pre> <p>!!! warning</p> <pre><code>Don't combine Docker restart policies with process managers, as this creates conflicts.\n</code></pre>"},{"location":"general/git/","title":"Git Version Control System","text":""},{"location":"general/git/#instalation","title":"Instalation","text":"<p>On a Debian-based distribution, such as Ubuntu</p> <pre><code>$ sudo apt update\n$ sudo apt install git-all\n</code></pre> <p>On Windows download and install from git-scm.com.</p> <p>Configure your user name and email address:</p> <pre><code>$ git config --global user.name \"exampleusername\"\n$ git config --global user.email \"example@gmail.com\"\n</code></pre>"},{"location":"general/git/#creating-repositories","title":"Creating repositories","text":""},{"location":"general/git/#create-a-new-local-repository","title":"Create a new local repository","text":"<pre><code>$ cd path/to/desired/directory\n$ git init\n</code></pre>"},{"location":"general/git/#clone-an-existing-repository","title":"Clone an existing repository","text":"<p>Grab the <code>https</code> or <code>ssh</code> path from the remote (Github, GitLab, etc...) and then run:</p> <pre><code>$ git clone ssh://user@domain.com/repo.git\n</code></pre>"},{"location":"general/git/#working-locally","title":"Working locally","text":"<p>Check the status of our repository:</p> <pre><code>$ git status\n</code></pre> <p>When we create a new file <code>git</code> becomes aware of it but it is still not tracking changes to that file. To instruct <code>git</code> to track a file run:</p> <pre><code>$ git add file1.txt\n</code></pre> <p>Now <code>git</code> is tracking the file but changes haven't been recorded as a commit yet. A commit is a record of a change. This change will be permanently recorded in our history, and can be reverted to at a later date. To make a commit we use <code>git commit</code>. We also add a message which should be a short desciption of changes made.</p> <pre><code>$ git commit -m \"Added stuff on file 1\"\n</code></pre> <p>The <code>-m</code> flag allows us add a short message to each commit. A good commit message should give a brief statement of any changes made to the file.</p> <p>To commit all local changes in tracked files (however this is generally discouredged):</p> <pre><code>$ git commit -a -m \"Changed something\"\n</code></pre> <p>We can lookup recent changes made to our repository with:</p> <pre><code>$ git log\n</code></pre>"},{"location":"general/git/#working-with-remote-repository","title":"Working with remote repository","text":"<p>To push your local changes to the remote repository we use the following command:</p> <pre><code>$ git push origin master\n</code></pre> <p>To pull the current version of the repository from the remote server use:</p> <pre><code>$ git pull\n</code></pre> <p>If your default branch is different than master, you will need to specify the branch name:</p> <pre><code>$ git pull origin my_default_branch_name\n</code></pre>"},{"location":"general/git/#remove-a-file-from-version-control","title":"Remove a file from version control","text":"<p>Remove the file from the Git repository but not from the filesystem:</p> <pre><code>$ git rm --cached file1.txt\n</code></pre> <p>If you want to remove a whole folder, you need to remove all files in it recursively. </p> <pre><code>$ git rm -r --cached folder_name\n</code></pre> <p>Then push changes to remote repo:</p> <pre><code>$ git commit -m \"Removed stuff\"\n$ git push origin branch_name  \n</code></pre>"},{"location":"general/image-metadata/","title":"Editing photos metadata","text":"<p>You can do it in one line in the Terminal using <code>jhead</code>.</p> <p>For example, adjust all EXIF times forward by 1 hour: <pre><code>jhead -ta+1:00 *.jpg\n</code></pre></p> <p>Useful links: </p> <p>jhead download page</p> <p>jhead documentation</p>"},{"location":"general/os-env-vars/","title":"Hiding Passwords and Secret Keys in Environment Variables","text":""},{"location":"general/os-env-vars/#adding-a-environment-variable-windows","title":"Adding a Environment Variable (Windows)","text":"<p>System Menu &gt; <code>Advanced System Settings</code> &gt; <code>Environment Variables...</code> &gt; in User Variables click <code>New...</code> &gt; insert variable name (VAR_NAME) and value (VAR_VALUE)</p> <p>When coding it may be necessary to restart your IDE or text editor.</p>"},{"location":"general/os-env-vars/#adding-a-environment-variable-linux-and-mac","title":"Adding a Environment Variable (Linux and Mac)","text":"<p>Open the terminal:</p> <pre><code>$ cd \n$ nano .bash_profile\n</code></pre> <p>To the file add the line and save: <pre><code>export VAR_NAME=\"VAR_VALUE\"\n</code></pre></p> <p>When coding it may be necessary to restart your IDE or text editor.</p>"},{"location":"general/os-env-vars/#acessing-your-environment-variables-in-python","title":"Acessing your Environment Variables in Python","text":"<pre><code>import os\n\nvar1 = os.environ.get('VAR_NAME')\n</code></pre>"},{"location":"general/powershell/","title":"Powershell","text":""},{"location":"general/powershell/#usefull-commands","title":"Usefull commands","text":"<p>Open Explorer in current location: <pre><code>ii .\n</code></pre></p> <p>which is short for: <pre><code>Invoke-Item .\n</code></pre></p>"},{"location":"general/powershell/#costumization","title":"Costumization","text":"<p>Using <code>Oh My Posh</code>:</p> <p>Install with: <pre><code>Install-Module oh-my-posh -Scope CurrentUser\n</code></pre></p> <p>List themes: <pre><code>Get-PoshThemes\n</code></pre></p> <p>To apply a theme, edit <code>$PROFILE</code> and add the following line.  <pre><code>Set-PoshPrompt -Theme jandedobbeleer\n</code></pre></p> <p>Once added, reload your profile for the changes to take effect. <pre><code>. $PROFILE\n</code></pre></p>"},{"location":"general/regex/","title":"Regular expressions","text":""},{"location":"general/regex/#regex-for-finding-urls","title":"Regex for finding URLs","text":"<p>Regex if you want to ensure URL starts with HTTP/HTTPS:</p> <pre><code>https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)\n</code></pre> <p>If you do not require HTTP protocol:</p> <pre><code>[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*)\n</code></pre>"},{"location":"general/regex/#exemple-usage-in-vscode-to-find-a-url-and-convert-to-markdown-link-like-linklink","title":"Exemple usage in VSCode to find a URL and convert to Markdown link like, <code>[link](link)</code>:","text":"<p>Find: <code>(https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&amp;//=]*))</code></p> <p>Replace: <code>[$1]($1)</code></p> <p>Use <code>()</code> to create a group and <code>$1</code> to reference that group.</p>"},{"location":"general/vscode-shortcut/","title":"VSCode shortcuts for Windows","text":""},{"location":"general/vscode-shortcut/#openview","title":"Open/View","text":"<p>Open Command Pallete</p> <pre><code>Shift+Ctrl+P\n</code></pre> <p>Access Settings</p> <pre><code>Ctrl+,\n</code></pre> <p>Toggle Terminal</p> <pre><code>Ctrl+`\n</code></pre> <p>Create New Terminal <pre><code>Shift+Ctrl+`\n</code></pre></p> <p>Toggle Sidebar</p> <pre><code>Ctrl+B\n</code></pre> <p>Open New Window/Instance</p> <pre><code>Shift+Ctrl+N\n</code></pre> <p>Close Window</p> <pre><code>Ctrl+W\n</code></pre>"},{"location":"general/vscode-shortcut/#working-with-files","title":"Working With Files","text":"<p>Sidebar Focus</p> <pre><code>Shift+Ctrl+E\n</code></pre> <p>Open File/Folder From Sidebar <pre><code>Ctrl+Down\n</code></pre></p> <p>Change File Tabs</p> <pre><code>Ctrl+PageUP\n</code></pre> <p>Quick File Open</p> <pre><code>Ctrl+P\n</code></pre> <p>Open File From Explorer</p> <pre><code>Ctrl+O\n</code></pre> <p>New File</p> <pre><code>Ctrl+N\n</code></pre> <p>Save</p> <pre><code>Ctrl+S\n</code></pre> <p>Save As</p> <pre><code>Shift+Ctrl+S\n</code></pre> <p>Close File</p> <pre><code>Ctrl+W\n</code></pre> <p>Delete File <pre><code>Ctrl+Delete\n</code></pre></p> <p>Reopen Files <pre><code>Shift+Ctrl+T\n</code></pre></p> <p>Zoom</p> <pre><code>Ctrl++ # Zoom in\nCtrl+- # Zoom out\n</code></pre> <p>Spilt Editor</p> <pre><code>Ctrl+\\\n</code></pre>"},{"location":"general/vscode-shortcut/#code-editing","title":"Code Editing","text":"<p>Go To Start &amp; End Of Line</p> <pre><code>Ctrl+Right\nCtrl+Left\n\nhome\nend\n</code></pre> <p>Move By Word</p> <pre><code>Alt+Right\nAlt+Left\n</code></pre> <p>Go To Start &amp; End Of File</p> <pre><code>Ctrl+Home\nCtrl+End\n</code></pre> <p>Cut, Copy &amp; Past Line</p> <pre><code>Ctrl+X # Cut\nCtrl+C # Copy\nCtrl+V # Paste\n</code></pre> <p>Move Line Up &amp; Down</p> <pre><code>Alt+Up\nAlt+Down\n</code></pre> <p>Copy Line Up &amp; Down</p> <pre><code>Shift+Alt+Up\nShift+Alt+Down\n</code></pre> <p>Remove Line</p> <pre><code>Shift+Ctrl+K\n</code></pre> <p>Insert Line</p> <pre><code>Ctrl+Enter # Insert below\nShift+Ctrl+Enter # Insert above\n</code></pre> <p>Jump To Matching Bracket</p> <pre><code>Shift+Ctrl+\\\n</code></pre> <p>Add Line Comment</p> <pre><code>Ctrl+/\n</code></pre> <p>Add Block Comment</p> <pre><code>Shift+Alt+A\n</code></pre> <p>Highlight Code</p> <pre><code>Shift+Any Direction\n</code></pre> <p>Select Next Match</p> <pre><code>Ctrl+D\n</code></pre> <p>De-select Match</p> <pre><code>Ctrl+U\n</code></pre> <p>Add Cursor</p> <pre><code>Alt+Click\n</code></pre> <p>Go to Entity (Functions, vars, etc)</p> <pre><code>Ctrl+Shift+O\n</code></pre>"},{"location":"general/vscode-shortcut/#references","title":"References","text":"<ul> <li>Official list of commands for Windows</li> </ul>"},{"location":"general/web-dev-resources/","title":"Online Resources For Web Developers","text":""},{"location":"general/web-dev-resources/#generators","title":"GENERATORS:","text":"<ul> <li>Text Content Generator - http://www.lipsum.com</li> <li>Favicon Generator - http://tools.dynamicdrive.com/favicon     </li> <li>Data Generator - https://mockaroo.com/                        </li> <li>Mobile Mockup Generator - https://mockuphone.com</li> <li>Logo Generator - https://www.logaster.com</li> <li>UUID Generator - https://www.uuidgenerator.net/</li> <li>Hash Generator - https://passwordsgenerator.net/sha256-hash-generator/</li> </ul>"},{"location":"general/web-dev-resources/#fonts","title":"FONTS","text":"<ul> <li>Google Fonts - https://fonts.google.com/</li> <li>Font Joy - https://fontjoy.com/</li> <li>Font Pair - https://fontpair.co/</li> <li>HTML symbols - https://www.toptal.com/designers/htmlarrows/</li> </ul>"},{"location":"general/web-dev-resources/#ui-kits","title":"UI Kits","text":"<ul> <li>Wired elements - https://github.com/rough-stuff/wired-elements</li> </ul>"},{"location":"general/web-dev-resources/#image-resources","title":"IMAGE RESOURCES:","text":"<ul> <li>Free Stock Images - https://www.pexels.com</li> <li>Free Stock Images With Great API - https://unsplash.com/</li> <li>Free- Vectors, mockups - https://www.freepik.com</li> <li>Dummy Image Placeholders - https://source.unsplash.com/</li> <li>Dummy Image Placeholders - https://placeholder.com</li> <li>Free Icons - https://www.iconfinder.com</li> <li>Icons and Photos - https://thenounproject.com/</li> </ul>"},{"location":"general/web-dev-resources/#color-design","title":"COLOR &amp; DESIGN:","text":"<ul> <li>Generate Color Palette from Image - https://www.canva.com/color-palette/</li> <li>Color Palette Generator - https://coolors.co/app</li> <li>Color Pallete Generator - http://colormind.io/</li> <li>Create Color Schemes - https://color.hailpixel.com</li> <li>Get Color Schemes of Websites - http://stylifyme.com</li> <li>Create Gradients - https://uigradients.com</li> <li>CSS Button Generator - http://css3buttongenerator.com </li> <li>SVG/CSS Background Patterns - https://www.heropatterns.com/</li> <li>Color restrictive palletes (Pixel Art) - https://lospec.com/</li> </ul>"},{"location":"general/web-dev-resources/#data-viz","title":"DATA VIZ","text":"<ul> <li>Color palete selection - https://colorbrewer2.org</li> <li>Color palete selection - https://projects.susielu.com/viz-palette</li> </ul>"},{"location":"general/web-dev-resources/#image-compression-conversion","title":"IMAGE COMPRESSION &amp; CONVERSION:","text":"<ul> <li>Compress All Images - https://compressor.io/compress</li> <li>Compress JPG - http://jpeg-optimizer.com/</li> <li>Compress PNG - https://tinypng.com/</li> <li>Convert images (any format) - https://convertio.co/</li> </ul>"},{"location":"general/web-dev-resources/#code-optimization","title":"CODE OPTIMIZATION:","text":"<ul> <li>Minify JS &amp; CSS - http://minifier.org</li> <li>Code Optimization Tools - https://codebeautify.org</li> <li>Code Diff Checker - https://www.diffchecker.com</li> </ul>"},{"location":"general/web-dev-resources/#converters","title":"CONVERTERS:","text":"<ul> <li>ES6+ &amp; JSX Compiler - https://babeljs.io/repl</li> <li>Sass Converter - https://www.sassmeister.com/           </li> <li>Less Converter &amp; More - http://www.webtoolkitonline.com   </li> <li>Markdown Editor - https://stackedit.io</li> <li>Jade Converter - http://www.html2jade.org/</li> </ul>"},{"location":"general/web-dev-resources/#validation-compatibility","title":"VALIDATION &amp; COMPATIBILITY:","text":"<ul> <li>Validate HTML - https://validator.w3.org</li> <li>Validate CSS - https://jigsaw.w3.org/css-validator</li> <li>Check Browser Compatibility - https://caniuse.com/</li> <li>ES6+ Compatibility Table - https://kangax.github.io/compat-table/es6/</li> </ul>"},{"location":"general/web-dev-resources/#in-browser-coding","title":"IN BROWSER CODING:","text":"<ul> <li>Client Side Code - https://codepen.io</li> <li>Client Side Code - https://jsfiddle.net</li> <li>Client Side Code - http://liveweave.com</li> <li>Client Side Code - https://codesandbox.io</li> <li>Server Side Code - https://repl.it</li> </ul>"},{"location":"general/web-dev-resources/#snippet-tools","title":"SNIPPET TOOLS:","text":"<ul> <li>Snippet Manager - https://gist.github.com</li> <li>Snippet Manager - https://pastebin.com</li> </ul>"},{"location":"general/web-dev-resources/#wireframe","title":"WIREFRAME:","text":"<ul> <li>In Browser Wireframing - https://app.moqups.com</li> <li>Very Basic In Browser Wireframing - https://wireframe.cc</li> <li>Wireframes and prototyping - https://www.justinmind.com/</li> </ul>"},{"location":"general/web-dev-resources/#responsiveness","title":"RESPONSIVENESS:","text":"<ul> <li>Device Testing - http://www.responsinator.com</li> <li>What's My Browser Size - https://www.webpagefx.com/tools/whats-my-browser-size/</li> </ul>"},{"location":"general/web-dev-resources/#speed-test","title":"SPEED TEST:","text":"<ul> <li>Speed &amp; Performance Testing - https://tools.keycdn.com/speed</li> <li>Pingdom Speed Test - https://tools.pingdom.com/</li> </ul>"},{"location":"general/web-dev-resources/#other","title":"OTHER:","text":"<ul> <li>Public API Resources - https://github.com/toddmotto/public-apis?utm_source=mybridge&amp;utm_medium=blog&amp;utm_campaign=read_more</li> <li>HTML Entity Lookup - http://entity-lookup.leftlogic.com/</li> </ul>"},{"location":"general/web-dev-resources/#references","title":"References:","text":"<ul> <li>https://gist.github.com/bradtraversy/61171a9b81586f5bc4c0ca1e2beb59ab</li> <li>https://www.youtube.com/watch?v=4JC8ahZneYU</li> </ul>"},{"location":"general/windows-terminal/","title":"Windows terminal","text":""},{"location":"general/windows-terminal/#customization","title":"Customization","text":"<ul> <li>Windows Terminal themes - windowsterminalthemes.dev</li> <li>Oh My Posh - prompt theme engine - ohmyposh.dev</li> <li>Starship - customizable prompt - starship.rs</li> </ul>"},{"location":"general/windows-terminal/#references","title":"References","text":"<ul> <li>A guide to customising the Windows Terminal</li> </ul>"},{"location":"general/deploy/deploy-django-azure/","title":"Deploy Django app to Azure App Service","text":""},{"location":"general/deploy/deploy-django-azure/#run-a-cronjob-in-azure-app-service-linux","title":"Run a cronjob in Azure App Service (Linux)","text":"<p>SSH into the container and copy the current startup script by typing the following:</p> <pre><code>$ cp /opt/startup/startup.sh /home\n</code></pre> <p>Edit the <code>startup.sh</code> under <code>/home/startup.sh</code> and add your changes to the top of the file after <code>#!/bin/sh</code>. In the sample below, I'll be installing cron to run a cronjob.</p> <pre><code># Installing cron\napt-get update -qq &amp;&amp; apt-get install cron -yqq\nservice cron start\nmkdir /home/BackupLogs\n(crontab -l 2&gt;/dev/null; echo \"*/5 * * * * cp /home/LogFiles/*.log /home/BackupLogs\")|crontab\n</code></pre> <p>Save the file.</p> <p>In the Azure Portal configurations, add <code>/home/startup.sh</code> as the Startup Command and restart the site.</p> <p></p> <p>Note, there are two pitfalls to this approach: - The script must be executable, so either install w/ unix and chmod 755 start.sh or use a git command (see SO). - The 3pp (here crontab) is installed on every startup, thus you depend on external servers/repositories when starting the webapp.</p> <p>References for this section:</p> <ul> <li>https://stackoverflow.com/questions/57654279/how-to-run-cronjobs-on-an-azure-linux-hosted-webapp</li> <li>https://azureossd.github.io/2020/01/23/custom-startup-for-nodejs-python/index.html</li> </ul>"},{"location":"general/deploy/deploy-django-azure/#references","title":"References","text":"<ul> <li>Deploying a Django App to Azure App Service</li> <li>Deploy a Python (Django or Flask) web app with PostgreSQL in Azure</li> </ul>"},{"location":"general/deploy/deploy-django-heroku/","title":"Deploy a Django app to Heroku","text":""},{"location":"general/deploy/deploy-django-heroku/#index","title":"Index:","text":"<ul> <li>Requirements</li> <li>Install the Heroku CLI</li> <li>Deploying Python and Django Apps on Heroku</li> <li>Configure Django apps for Heroku</li> <li>Deploy to Heroku</li> <li>References</li> </ul>"},{"location":"general/deploy/deploy-django-heroku/#requirements","title":"Requirements:","text":"<ul> <li>Git installed</li> <li>Python &gt;3.6</li> <li>Heroku CLI (see step 1)</li> </ul>"},{"location":"general/deploy/deploy-django-heroku/#1-install-the-heroku-cli","title":"1) Install the Heroku CLI","text":"<p>Install the Heroku Command Line Interface (CLI) for your platform from here. Once installed, you can use the <code>heroku</code> command from your command shell. To log in to the Heroku CLI use:</p> <pre><code>$ heroku login\n</code></pre>"},{"location":"general/deploy/deploy-django-heroku/#2-deploying-python-and-django-apps-on-heroku","title":"2) Deploying Python and Django apps on Heroku","text":"<p>Heroku automatically identifies your app as a Python app if any of the following files are present in its root directory: * <code>Pipfile</code> * <code>setup.py</code> * <code>requirements.txt</code></p> <p>When you deploy to Heroku, the dependencies you specify are automatically installed. If you\u2019re using Django, the <code>collectstatic</code> command also runs automatically during the deployment process. For this to work properly make sure you install the Django-Heroku Python package (step 3).</p>"},{"location":"general/deploy/deploy-django-heroku/#3-configure-django-apps-for-heroku","title":"3) Configure Django apps for Heroku","text":"<p>Create a <code>Procfile</code> (no extension) and add the following content where <code>myproject</code> is the name of your Django app. <pre><code>web: gunicorn myproject.wsgi\n</code></pre></p> <p>Install <code>gunicorn</code>: <pre><code>$ pipenv install gunicorn\n</code></pre></p> <p>Install the <code>django-heroku</code> package <pre><code>$ pipenv install django-heroku\n</code></pre></p> <p>Add the following import statement to the top of <code>settings.py</code>: <pre><code>import django_heroku\n</code></pre> Then add the following to the bottom of <code>settings.py</code>: <pre><code># Activate Django-Heroku.\ndjango_heroku.settings(locals())\n</code></pre></p>"},{"location":"general/deploy/deploy-django-heroku/#4-deploy-to-heroku","title":"4) Deploy to Heroku","text":"<p>Using the Heroku CLI lets create our app and the database.</p> <pre><code>$ heroku login\n$ heroku create &lt;desired_app_name&gt;\n</code></pre> <p>Now lets push our code to Heroku: <pre><code>$ git add .\n$ git commit -m \"Ready to heroku this.\"\n$ git push heroku master\n</code></pre></p> <p>Note: If you wish to depoly from a local branch other than <code>master</code>, e.g. <code>testbranch</code> then use: <pre><code>$ git push heroku testbranch:master\n</code></pre></p> <p>Finally, migrate your Database to the Heroku app:</p> <pre><code>$ heroku run python manage.py migrate\n</code></pre> <p>You should now be able to see your app in the Heroku Dashboard as well as a Dyno web process with the <code>ON</code> indication.</p>"},{"location":"general/deploy/deploy-django-heroku/#5-import-local-database-to-heroku-optional","title":"5) Import local database to Heroku (Optional)","text":"<p>If you are using a postgresql database locally you can easily import it to your newly created Heroku app. First create a backup of your local DB:</p> <pre><code>pg_dump -U USERNAME DATABASE &gt; pg_db_dump.sql\n</code></pre> <p>To import it to Heroku run:</p> <pre><code>heroku pg:psql --app APPNAME &lt; pg_db_dump.sql\n</code></pre>"},{"location":"general/deploy/deploy-django-heroku/#references","title":"References:","text":"<ul> <li>Getting Started on Heroku with Python</li> <li>Deploying Python and Django Apps on Heroku</li> <li>Configuring Django Apps for Heroku</li> <li>django-heroku Github</li> <li>Deploying with Git</li> </ul>"},{"location":"general/deploy/deploy-django/","title":"Deploy a Django app in an Ubuntu VPS (DigitalOcean)","text":"<p>This guide will demonstrate how to install and configure some components on Ubuntu 16.04 to support and serve Django applications. We will be setting up a PostgreSQL database and configure the Gunicorn application server to interface with our applications. We will then set up Nginx to reverse proxy to Gunicorn, giving us access to its security and performance features to serve our apps.</p>"},{"location":"general/deploy/deploy-django/#1-initial-server-setup","title":"1) Initial Server Setup","text":"<p>Perform the initial server setup as detailed here.</p>"},{"location":"general/deploy/deploy-django/#2-install-the-packages-from-the-ubuntu-repositories","title":"2) Install the Packages from the Ubuntu Repositories","text":"<p>We need to update the local apt package index and then download and install the packages. The packages we install depend on which version of Python your project will use.</p> <p>If you are using Django with Python 3, type: <pre><code>$ sudo apt-get update\n$ sudo apt-get install python3-pip python3-dev libpq-dev nginx\n</code></pre></p> <p>This will install pip, the Python development files needed to build Gunicorn later and the Nginx web server.</p>"},{"location":"general/deploy/deploy-django/#3-install-the-database","title":"3) Install the Database","text":"<p>Install the database system and the libraries needed to interact with it.</p>"},{"location":"general/deploy/deploy-django/#for-postgres","title":"For Postgres:","text":"<pre><code>$ sudo apt-get install postgresql postgresql-contrib`\n</code></pre>"},{"location":"general/deploy/deploy-django/#for-mysql","title":"For MySQL","text":"<pre><code>$ sudo apt-get install libmysqlclient-dev\n$ sudo apt-get install mysql-server mysql-client\n</code></pre> <p>Now let's create the Database and User but first verify that the MySQL service is running: <pre><code>$ systemctl status mysql.service\n</code></pre></p> <p>If the output is negative you can run <code>sudo systemctl start mysql</code> to get <code>mysql.service</code> started again. Now you can log in with your MySQL credentials using the following command. Where <code>-u</code> is the flag for declaring your username and <code>-p</code> is the flag that tells MySQL that this user requires a password: <pre><code>$ sudo mysql -u db_user -p\n</code></pre></p> <pre><code>mysql&gt; SHOW DATABASES;\nmysql&gt; CREATE DATABASE project_db;\nmysql&gt; SHOW DATABASES;\n</code></pre> <p>Whenever you'd like to exit MySQL server, press CTRL + D.</p>"},{"location":"general/deploy/deploy-django/#4-create-a-python-virtual-environment","title":"4) Create a Python Virtual Environment","text":"<pre><code>$ sudo -H pip3 install --upgrade pip\n$ sudo -H pip3 install virtualenv\n</code></pre> <pre><code>$ mkdir ~/myproject\n$ cd ~/myproject\n$ virtualenv venv\n$ source venv/bin/activate\n</code></pre> <p>Note: Regardless of which version of Python you are using, when the virtual environment is activated, you should use the pip command (not pip3).</p> <p>Install the <code>mysqlclient</code> library: <pre><code>$ pip install mysqlclient\n</code></pre></p> <p>With your virtual environment active, install Django and Gunicorn: <pre><code>$ pip install django gunicorn\n</code></pre></p>"},{"location":"general/deploy/deploy-django/#5-create-django-project","title":"5) Create Django project","text":"<p>Since we already have a project directory, we will tell Django to install the files here. It will create a second level directory with the actual code, which is normal, and place a management script in this directory. The key to this is that we are defining the directory explicitly instead of allowing Django to make decisions relative to our current directory: <pre><code>$ django-admin startproject myproject ~/myproject\n</code></pre></p> <p>At this point, your project directory (~/myproject in our case) should have the following content: <pre><code>~/myproject/manage.py: A Django project management script.\n~/myproject/myproject/: The Django project package. This should contain the __init__.py, settings.py, urls.py, and wsgi.py files.\n~/myproject/myprojectenv/: The virtual environment directory we created earlier.\n</code></pre></p> <p>Go to the end of the <code>settings.py</code> file and add <code>STATIC_ROOT</code> as shown below: <pre><code># Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/2.0/howto/static-files/\n\nSTATIC_URL = '/static/'\nSTATIC_ROOT = os.path.join(BASE_DIR, 'static')\n</code></pre></p> <p>Add your server\u2019s IP address between the square brackets and single quotes to the <code>ALLOWED_HOSTS</code>: <pre><code># The simplest case: just add the domain name(s) and IP addresses of your Django server\n# ALLOWED_HOSTS = [ 'example.com', '203.0.113.5']\n# To respond to 'example.com' and any subdomains, start the domain with a dot\n# ALLOWED_HOSTS = ['.example.com', '203.0.113.5']\nALLOWED_HOSTS = ['your_server_domain_or_IP', 'second_domain_or_IP', . . .]\n</code></pre></p> <p>Migrate the initial database schema to our database using the management script:</p> <p><pre><code>(venv) $ python ~/myproject/manage.py makemigrations\n(venv) $ python ~/myproject/manage.py migrate\n</code></pre> Create an administrative user for the project by typing: <pre><code>(venv) $ ~/myproject/manage.py createsuperuser\n</code></pre></p> <p>We can collect all of the static content into the directory location we configured by typing: <pre><code>(venv) $ ~/myproject/manage.py collectstatic\n</code></pre></p> <p>The static files will then be placed in a directory called static within your project directory.</p>"},{"location":"general/deploy/deploy-django/#connect-your-django-app-to-mysql","title":"Connect your Django app to MySQL","text":"<p>Navigate to the settings.py file and replace the current DATABASES lines with the following. We will configure your database dictionary so that it knows to use MySQL as your database backend and from what file to read your database connection credentials:</p> <pre><code># Database\n# https://docs.djangoproject.com/en/2.0/ref/settings/#databases\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'OPTIONS': {\n            'read_default_file': '/etc/mysql/my.cnf',\n        },\n    }\n}\n</code></pre> <p>Next, let\u2019s edit the config file so that it has your MySQL credentials. Use nano as sudo to edit the file and add the following information: <pre><code>$ sudo nano /etc/mysql/my.cnf\n</code></pre> <pre><code>[client]\ndatabase = db_name\nuser = db_user\npassword = db_password\ndefault-character-set = utf8\n</code></pre></p> <p>Where database name in our case is mysite, your username for the MySQL server is the one you\u2019ve created, and the password is the MySQL server password you\u2019ve created. Also, you\u2019ll notice that utf8 is set as the default encoding, this is a common way to encode unicode data in MySQL. Once the file has been edited, we need to restart MySQL for the changes to take effect. <pre><code>$ systemctl daemon-reload\n$ systemctl restart mysql\n</code></pre></p> <p>Please note that restarting MySQL takes a few seconds, so please be patient. Now, let's test the MySQL connection to the application. We need to verify that the configurations in Django detect your MySQL server properly. We can do this by simply running the server. If it fails, it means that the connection isn\u2019t working properly. Otherwise, the connection is valid. <pre><code>$ cd ~/mysite/mysite/\n$ python manage.py runserver your-server-ip:8000\n</code></pre></p>"},{"location":"general/deploy/deploy-django/#6-setting-up-gunicorns-ability-to-serve-the-project","title":"6) Setting up Gunicorn's ability to serve the project","text":"<p>The last thing we want to do before leaving our virtual environment is test Gunicorn to make sure that it can serve the application. We can do this by entering our project directory and using gunicorn to load the project's WSGI module:</p> <pre><code>$ cd ~/myproject\n$ gunicorn --bind 0.0.0.0:8000 myproject.wsgi\n</code></pre> <p>This will start Gunicorn on the same interface that the Django development server was running on. You can go back and test the app again. </p> <p>We passed Gunicorn a module by specifying the relative directory path to Django's wsgi.py file, which is the entry point to our application, using Python's module syntax. Inside of this file, a function called application is defined, which is used to communicate with the application. When you are finished testing, hit CTRL-C in the terminal window to stop Gunicorn. We're now finished configuring our Django application. We can back out of our virtual environment by typing:</p> <pre><code>$ deactivate\n</code></pre> <p>Create and open a systemd service file for Gunicorn with sudo privileges in your text editor:</p> <pre><code>$ sudo nano /etc/systemd/system/gunicorn.service\n</code></pre> <pre><code>[Unit]\nDescription=gunicorn daemon\nAfter=network.target\n\n[Service]\nUser=synergix\nGroup=www-data\nWorkingDirectory=/home/synergix/myproject\nExecStart=/home/synergix/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/synergix/myproject/myproject.sock myproject.wsgi:application\n\n[Install]\nWantedBy=multi-user.target\n</code></pre> <p>We can now start the Gunicorn service we created and enable it so that it starts at boot: <pre><code>$ sudo systemctl start gunicorn\n$ sudo systemctl enable gunicorn\n</code></pre> We can confirm that the operation was successful by checking for the socket file. <pre><code>$ sudo systemctl status gunicorn\n</code></pre> Next, check for the existence of the myproject.sock file within your project directory: <pre><code>$ ls /home/synergix/myproject\n</code></pre></p> <p>If the systemctl status command indicated that an error occurred or if you do not find the myproject.sock file in the directory, it's an indication that Gunicorn was not able to start correctly. Check the Gunicorn process logs by typing: <pre><code>$ sudo journalctl -u gunicorn\n</code></pre></p>"},{"location":"general/deploy/deploy-django/#7-configure-nginx-to-proxy-pass-to-gunicorn","title":"7) Configure Nginx to Proxy Pass to Gunicorn","text":"<p>Now that Gunicorn is set up, we need to configure Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginx's sites-available directory: <pre><code>$ sudo nano /etc/nginx/sites-available/myproject\n</code></pre></p> <p>Inside, open up a new server block. We will start by specifying that this block should listen on the normal port 80 and that it should respond to our server's domain name or IP address. Next, we will tell Nginx to ignore any problems with finding a favicon. We will also tell it where to find the static assets that we collected in our ~/myproject/static directory. All of these files have a standard URI prefix of \"/static\", so we can create a location block to match those requests. Finally, we'll create a location / {} block to match all other requests. Inside of this location, we'll include the standard proxy_params file included with the Nginx installation and then we will pass the traffic to the socket that our Gunicorn process created: <pre><code>server {\n    listen 80;\n    server_name server_domain_or_IP;\n\n    location = /favicon.ico { access_log off; log_not_found off; }\n    location /static/ {\n        root /home/sammy/myproject;\n    }\n\n    location / {\n        include proxy_params;\n        proxy_pass http://unix:/home/sammy/myproject/myproject.sock;\n    }\n}\n</code></pre></p> <p>Save and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled directory: <pre><code>$ sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled\n</code></pre></p> <p>Test your Nginx configuration for syntax errors by typing: <pre><code>$ sudo nginx -t\n</code></pre> If no errors are reported, go ahead and restart Nginx by typing: <pre><code>$ sudo systemctl restart nginx\n</code></pre></p> <p>Finally, we need to open up our firewall to normal traffic on port 80. Since we no longer need access to the development server, we can remove the rule to open port 8000 as well: <pre><code>$ sudo ufw delete allow 8000\n$ sudo ufw allow 'Nginx Full'\n</code></pre> You should now be able to go to your server's domain or IP address to view your application.</p>"},{"location":"general/deploy/deploy-django/#8-re-deploy","title":"8) Re-deploy","text":"<p>Once the website is running you can take the following steps to make changes.</p> <ul> <li>Make a backup on the server</li> <li>Copy new files to the server using somethng like WinSCP. Note: DO NOT COPY THE MIGRATIONS FOLDER</li> <li>Run the following commands:</li> </ul> <pre><code>cd mysite\nsource venv/bin/activate\npython manage.py makemigrations [appname]\npython manage.py migrate [appname]\npython manage.py collectstatic\nsudo systemctl restart gunicorn\n</code></pre>"},{"location":"general/deploy/deploy-django/#if-there-are-problems-with-the-migrations-not-applying","title":"If there are problems with the migrations not applying","text":"<p>In MySQL Database delete rows <code>app_name</code> from the table <code>django_migrations</code>:</p> <p><pre><code>SELECT * FROM django_migrations;\nDELETE FROM django_migrations WHERE id=xx;\n</code></pre> OR <pre><code>DELETE FROM django_migrations WHERE id IN (xx,yy,zz);\n</code></pre></p> <p>Delete all migration files in migrations folder.</p> <p>Try again <code>python manage.py makemigrations</code> and <code>python manage.py migrate</code> commands.</p>"},{"location":"general/deploy/deploy-django/#9-troubleshooting","title":"9) Troubleshooting","text":"<p>Logs can help narrow down root causes. Check each of them in turn and look for messages indicating problem areas. The following logs may be helpful:</p> <ul> <li>Check the Nginx process logs by typing: <code>sudo journalctl -u nginx</code></li> <li>Check the Nginx access logs by typing: <code>sudo less /var/log/nginx/access.log</code></li> <li>Check the Nginx error logs by typing: <code>sudo less /var/log/nginx/error.log</code></li> <li>Check the Gunicorn application logs by typing: <code>sudo journalctl -u gunicorn</code></li> </ul> <p>As you update your configuration or application, you will likely need to restart the processes to adjust to your changes. If you update your Django application, you can restart the Gunicorn process to pick up the changes by typing: <pre><code>$ sudo systemctl restart gunicorn\n</code></pre></p> <p>If you change gunicorn systemd service file, reload the daemon and restart the process by typing:</p> <pre><code>$ sudo systemctl daemon-reload\n$ sudo systemctl restart gunicorn\n</code></pre> <p>If you change the Nginx server block configuration, test the configuration and then Nginx by typing: <pre><code>$ sudo nginx -t &amp;&amp; sudo systemctl restart nginx\n</code></pre></p>"},{"location":"general/deploy/deploy-django/#references","title":"References","text":"<ul> <li>DigitalOcean - Setup Django, Postgres, nginx and Gunicorn on Ubuntu</li> <li>DigitalOcean - Serve Django with uwsgi and ngix on Ubuntu</li> <li>DigitalOcean - Create Django app and connect to database</li> </ul>"},{"location":"general/deploy/s3-django-setup/","title":"Set up Amazon S3 to serve Django Static and Media files","text":"<p>Amazon S3 Buckets are a cheap way to store your staticfiles and media files. It also seems like the easiest way when serving a Django App. </p>"},{"location":"general/deploy/s3-django-setup/#1-sign-up-to-aws-s3-and-create-iam-user","title":"1) Sign up to AWS S3 and create IAM user","text":"<p>After signing up to Amazon AWS we need to create a user using the IAM service. This way you can restrict the access to the bucket. Each user will have its own access id and key. To do this:</p> <ul> <li> <p>In the Services dropdown select IAM.</p> </li> <li> <p>Click on Users and select Add User.</p> </li> <li> <p>Type the name of the user and make sure that Programmatic access is selected under Access type as you will need this to provide upload access for your S3 bucket. Click Next.</p> </li> <li> <p>Select Attatch existing policies directly.</p> </li> <li> <p>From the list that appears select AmazonS3FullAccess and again click on Next.</p> </li> <li> <p>Click on Create User.</p> </li> <li> <p>This will create the user and generate an access id and key for the user. The id-key pair can only be downloaded at this step so do that by clicking on Download .csv. Keep it secret.</p> </li> <li> <p>From the Users Dashboard click on the user you have just created. Make a note of User ARN. You will be using this later.</p> </li> </ul>"},{"location":"general/deploy/s3-django-setup/#2-create-a-s3-bucket","title":"2) Create a S3 Bucket","text":"<ul> <li> <p>From the Services dropdown select s3. This opens up the dashboard for the S3 buckets.</p> </li> <li> <p>Click on Create Bucket.</p> </li> <li> <p>Select the region you want.</p> </li> </ul> <p>Note: Try to create  a bucket in the same region where your app is running to take advantage of AWS's free in-region data transfer rates.</p> <ul> <li>Give your bucket a name and click on next that brings you to the Set Properties tab. Click on Next a couple more times and then click on Create Bucket to create your bucket.</li> </ul>"},{"location":"general/deploy/s3-django-setup/#3-set-up-bucket-permissions","title":"3) Set up Bucket permissions","text":"<p>Now let's define the policy for allowing restricted access to our bucket.</p> <ul> <li> <p>Click on the name of the bucket that you just created.</p> </li> <li> <p>Click on the Permissions tab.</p> </li> <li> <p>Since you have to set the permissions for access, click on Bucket Policy.</p> </li> <li> <p>On the bottom left click on AWS Policy Generator which opens up the tool Amazon provides for quick policy generation. </p> </li> </ul> <p>Now we have to generate two policy rules. The first one is to allow our hosted website to access your files from the bucket:</p> <p><pre><code>Select Type of Policy : S3 Bucket Policy\nEffect : Allow\nPrincipal : *      //This gives everybody access\nAWS Service : Amazon S3\nActions : GetObject\nAmazon Resource Name : arn:aws:s3:::&lt;your bucket name&gt;/* \n</code></pre> The <code>*</code> at the end siginifies that access is being given to all the files.</p> <p>After setting the values as mentioned above click on Add Statement. Do not click on Generate Policy yet as you have to create a policy to allow the Django application to put files into the bucket on deployment. The policy will be as follows:</p> <pre><code>Select Type of Policy : S3 Bucket Policy\nEffect : Allow\nPrincipal : &lt;User ARN&gt;     //This is the user arn that you kept a note of earlier.\nAWS Service : Amazon S3\nActions : *    //I gave full access, though I think GetObject, PutObject will be better. Will try it out soon. \nAmazon Resource Name : arn:aws:s3:::&lt;your bucket name&gt;/*,arn:aws:s3:::&lt;your bucket name&gt;  // Gives full access to buckets and its contents.\n</code></pre> <p>After setting the values mentioned above click on Add Statement and then Generate Policy . This will show you the policy which you can copy, paste in the dialogue box on S3 dashboard and click on Save.</p>"},{"location":"general/deploy/s3-django-setup/#4-providing-s3-access-to-your-heroku-app","title":"4) Providing S3 access to your Heroku app","text":"<p>The last step for setting up the Bucket access is providing the application hosted on Heroku, access to the bucket content. This can be done by setting up the CORS configuration. To do this click on the CORS Configuration tab and click on Save. The default configuration will suffice. Something like this:</p> <pre><code>&lt;CORSConfiguration&gt;\n    &lt;CORSRule&gt;\n        &lt;AllowedOrigin&gt;*&lt;/AllowedOrigin&gt;\n        &lt;AllowedMethod&gt;GET&lt;/AllowedMethod&gt;\n        &lt;MaxAgeSeconds&gt;3000&lt;/MaxAgeSeconds&gt;\n        &lt;AllowedHeader&gt;Authorization&lt;/AllowedHeader&gt;\n    &lt;/CORSRule&gt;\n&lt;/CORSConfiguration&gt;\n</code></pre> <p>You have the bucket access set up. Now all you have to do is set up your Django application to access the bucket which is fairly easy. The first step to achieve the goal will be to install Boto3 and DjangoStorages. Nifty APIs to make working with S3 buckets easy. This can be easily done using pip.</p> <pre><code>pip install django-storages boto3\npip freeze &gt;&gt; requirements.txt\n</code></pre> <p>and add <code>storages</code> to the list of INSTALLED_APPS in the <code>settings.py</code> file.</p> <pre><code>INSTALLED_APPS = (\n          ...,\n          'storages',\n     )\n</code></pre> <p>Next you have to add the following settings to the <code>settings.py</code> file in your application.</p> <pre><code># Set S3 as the place to store your files.\nDEFAULT_FILE_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\nSTATICFILES_STORAGE = \"storages.backends.s3boto3.S3Boto3Storage\"\nAWS_S3_FILE_OVERWRITE = False\nAWS_DEFAULT_ACL = None\nAWS_ACCESS_KEY_ID = os.environ.get(\"AWS_ACCESS_KEY_ID\")\nAWS_SECRET_ACCESS_KEY = os.environ.get(\"AWS_SECRET_ACCESS_KEY\")\nAWS_STORAGE_BUCKET_NAME = os.environ.get(\"AWS_STORAGE_BUCKET_NAME\")\nAWS_QUERYSTRING_AUTH = False # This will make sure that the file URL does not have unnecessary parameters like your access key.\nAWS_S3_CUSTOM_DOMAIN = AWS_STORAGE_BUCKET_NAME + '.s3.amazonaws.com'\n\n# Static media settings\nSTATIC_URL = 'https://' + AWS_STORAGE_BUCKET_NAME + '.s3.amazonaws.com/'\nMEDIA_URL = STATIC_URL + 'media/'\nSTATICFILES_DIRS = ( os.path.join(BASE_DIR, \"static\"), )\nSTATIC_ROOT = 'staticfiles'\nADMIN_MEDIA_PREFIX = STATIC_URL + 'admin/'\nSTATICFILES_FINDERS = (\n    'django.contrib.staticfiles.finders.FileSystemFinder',\n    'django.contrib.staticfiles.finders.AppDirectoriesFinder',\n)\n</code></pre> <p>Now, make sure the main <code>urls.py</code> file does include the url configuration for your media files:</p> <pre><code>from django.conf import settings\n\nurlpatterns = [\n  ...\n] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n</code></pre> <p>And as a last step there should be a folder called static in the root of your application (same level as the manage.py file). Git does not allow you to commit empty folders so you can inlcude a readme file in there to commit the folder.</p> <p>If you are using Heroku before pushing your code use:</p> <pre><code>heroku config:set DISABLE_COLLECTSTATIC=1\n</code></pre> <p>to disable collectstatic running automatically as your static folder is not yet present on the server and an error will be thrown regarding the same. You can now push all changes to Heroku with</p> <pre><code>git push heroku master\n</code></pre> <p>or if you want to push from a different branch:</p> <pre><code>git push heroku testbranch:master\n</code></pre> <p>You can now run the <code>collectstatic</code> command manually using:</p> <pre><code>heroku run python manage.py collectstatic --noinput\n</code></pre> <p>If you get the following error:</p> <pre><code>UserWarning: The default behavior of S3Boto3Storage is insecure and will change in django-storages 2.0. By default files and new buckets are saved with an ACL of 'public-read' (globally publicly readable). Version 2.0 will default to using the bucket's ACL. To opt into the new behavior set AWS_DEFAULT_ACL = None, otherwise to silence this warning explicitly set AWS_DEFAULT_ACL. \"The default behavior of S3Boto3Storage is insecure and will change \"\n...\nAccessDenied\n</code></pre> <p>add the following variable to <code>settings.py</code>: </p> <pre><code>AWS_DEFAULT_ACL = None\n</code></pre> <p>One important point before you go on this adventure. At the moment all the media files (files that are uploaded by the user) used in our models have the property <code>upload_to</code> set for them and as a result don't overwrite the static files. </p> <p>We are now ready to serve static and media files from the S3 bucket!</p>"},{"location":"general/deploy/s3-django-setup/#references","title":"References","text":"<ul> <li>Setting up Amazon S3 Bucket for serving Django Static and Media files</li> <li>Using Amazon S3 to Store your Django Site's Static and Media Files</li> <li>How to Setup Amazon S3 in a Django Project</li> </ul>"},{"location":"general/deploy/vps-providers/","title":"VPS providers","text":"<p>When you need to host your projects, you have several options available:</p> <p>Shared hosting, where you share a server with lots of other users and have very limited control over the server. Dedicated hosting, where you have complete control over a server, a very flexible option, but requires you to manage the whole server, worry about hardware failures and backups, and is typically expensive. A third option that is in between these two choices is a Virtual Private Server, or VPS.</p> <p>VPSs virtualized nature provides several advantages such as instant reinstallation of the operating system, quick recovery and backup, and fast and simple hardware upgrades (the hardware is virtual, after all).</p> <p>Here is a list of several popular VPS providers:</p> <ul> <li>hetzner.co - from 4.29 \u20ac/month, based in Germany</li> <li>digitalocean.com - from 5 $/month + tax (anual)</li> <li>linode.com - from 5 $/month + tax</li> <li>heroku.com from 7 $/month + tax (anual)</li> <li>Google Cloudm</li> <li>AWS EC2</li> </ul>"},{"location":"general/deploy/vps-providers/#portugal-based-providers","title":"Portugal based providers:","text":"<ul> <li>ovh.pt - from 3 \u20ac/month + tax (anual)</li> <li>flexi.pt - from 3 \u20ac/month + tax (anual)</li> </ul>"},{"location":"homeserver/","title":"Homeserver","text":""},{"location":"homeserver/#set-up","title":"Set up","text":"<ol> <li> <p>Install Ubuntu Server - Linux cheatsheet</p> </li> <li> <p>Set up Docker and Docker Compose - Docker primer</p> </li> <li> <p>Set up desired services</p> <ul> <li>Set up Homepage or another dashboard</li> <li>Portainer</li> <li>Immich</li> <li>Jellyfin</li> </ul> </li> </ol>"},{"location":"homeserver/#services","title":"Services","text":"<p>Overview of several services for a Home Server.</p>"},{"location":"homeserver/#dashboard","title":"Dashboard","text":"<ul> <li>Homepage</li> <li>Glance</li> </ul>"},{"location":"homeserver/#files","title":"Files","text":"<ul> <li>File Browser and currently FileBrowser Quantum</li> <li>NextCloud</li> <li>OwnCloud</li> <li>Syncthing</li> </ul>"},{"location":"homeserver/#media","title":"Media","text":"<ul> <li>audiobookshelf</li> </ul>"},{"location":"homeserver/#reverse-proxy","title":"Reverse proxy","text":"<ul> <li>Caddy</li> </ul>"},{"location":"homeserver/#server-monitoring","title":"Server monitoring","text":"<ul> <li>Uptime Kuma</li> </ul>"},{"location":"homeserver/#documentation-and-knowledge-base","title":"Documentation and knowledge base","text":"<ul> <li>Outline</li> </ul>"},{"location":"homeserver/#other","title":"Other","text":"<ul> <li>Dawarich - Self-hosted alternative to Google Timeline</li> <li>Joplin - Note-taking app</li> </ul>"},{"location":"homeserver/#resources","title":"Resources","text":"<ul> <li> <p>MediaStack.Guide, MediaStack.Guide Github</p> </li> <li> <p>r/SelfHosted Wiki</p> </li> <li> <p>arr Stack example docker-compose</p> </li> <li> <p>Awesome *Arr</p> </li> <li> <p>Synology arr guide</p> </li> <li> <p>Workshop How2Homelab</p> </li> <li> <p>Looking for a minimal-fluff guide to first home server setup for technical people</p> </li> <li> <p>The complete guide to building your personal self hosted server for streaming and ad-blocking</p> </li> <li> <p>Techno TIm</p> </li> <li> <p>TechHutTV Wiki</p> </li> </ul>"},{"location":"homeserver/django-docker/","title":"Django web-app in Docker container","text":"<p><sub><sup>Reference: Docker - Django and PostgrSQL setup (with uv) from scratch!</sup> <p><sub><sup>Reference: Using uv in Docker</sup> <p>This guide shows how to integrate the following tools:</p> <ul> <li>Docker containers</li> <li>uv package manager</li> <li>Django app</li> <li>PostgreSQL database</li> </ul>"},{"location":"homeserver/django-docker/#set-up-django-app","title":"Set up Django app","text":"<p>Create a project folder:</p> <pre><code>mkdir django-docker-demo\ncd django-docker-demo\n</code></pre> <p>Create Django project and Django app:</p> <pre><code>django-admin startproject django-docker-demo .\npython manage.py startapp core\n</code></pre> <p>We now have the following directory structure:</p> <pre><code>django-docker-demo\n|-- django-docker-demo\n|   |-- __init__.py\n|   |-- asgi.py\n|   |-- settings.py\n|   |-- urls.py\n|   |-- wsgi.py\n|-- core\n|   |-- ...\n|   |-- views.py\n|   |-- ...\n</code></pre> <p>Don't forget to add the <code>core</code> app to the <code>INSTALLED_APPS</code> (in <code>settings.py</code>).</p> <p>Now we need to add a <code>Dockerfile</code> in the project root folder</p> <pre><code>FROM python:3.13.3-slim-bookworm\n\nENVPYTHONDONTWRITEBYTECODE=1 \\\nPYTHONUNBUFFERED=1\n\nWORKDIR /app\n\nRUN apt-get update &amp;&amp; apt-get install -y curl\n\nCOPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/ \n\nCOPY src/requirements.txt .\nRUN uv pip install -r requirements.txt --system\n\nCOPY src/ .\n\nEXPOSE 8000\n\nCMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n</code></pre> <p>New lets create a <code>docker-compose.yaml</code> file:</p> <pre><code>services:\n  web:\n    build: .\n    container_name: django_app\n    ports:\n      - 8000:8000\n    volumes:\n      - ./django-docker-demo:app/\n</code></pre> <pre><code>docker-compose up --build\n</code></pre>"},{"location":"homeserver/django-docker/#add-postgresql-database","title":"Add PostgreSQL database","text":"<p>Lets add this new service to the <code>docker-compose.yaml</code> file:</p> <pre><code>services:\n  web:\n    build: .\n    container_name: django_app\n    ports:\n      - 8000:8000\n    volumes:\n      - ./django-docker-demo:app/\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n    env_file:\n      - .env\n  db:\n    image: postgres:17\n    container_name: postgres_db\n    volumes:\n      - postgres_db:/var/lib/postgresql/data/\n    environment:\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n    healthcheck:\n      test: [\"CMD_SHELL\", \"pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}\"]\n      interval: 10s\n      retires: 5\n      start_period: 30s\nvolumes:\n  postgres_db:\n</code></pre> <p>Lets create the <code>.env</code> file:</p> <pre><code>POSTGRES_DB=demo_db\nPOSTGRES_USER=username\nPOSTGRES_PASSWORD=test\nDB_HOST=db\nDB_PORT=5432\n</code></pre> <p>And lets change the Django <code>settings.py</code> file for the PostgreSQL database:</p> <pre><code>import os\n\nDATABASES = {\n    \"default\": {\n        \"ENGINE\": \"django.db.backends.postgresql\",\n        \"NAME\": os.environ[\"POSTGRES_DB\"],\n        \"USER\": os.environ[\"POSTGRES_USER\"],\n        \"PASSWORD\": os.environ[\"POSTGRES_PASSWORD\"],\n        \"HOST\": os.environ[\"DB_HOST\"],\n        \"PORT\": os.environ[\"DB_PORT\"],\n    }\n}\n</code></pre> <p>Finally, we can run the <code>docker-compose.yaml</code> file:</p> <pre><code>docker-compose up\n</code></pre>"},{"location":"homeserver/django-docker/#executing-commands","title":"Executing commands","text":"<p>After something like creating models, you may want to run migrations:</p> <pre><code>docker exec django_app python manage.py makemigrations\ndocker exec django_app python manage.py migrate\n</code></pre> <p>And to access the PostgreSQL shell:</p> <pre><code>docker exec -ti django_app postgres_db psql -U username -d demo_db\n</code></pre> <p>or to access the Django shell:</p> <pre><code>docker exec -ti django_app manage.py shell\n</code></pre>"},{"location":"homeserver/django-docker/#creating-an-entrypoint","title":"Creating an entrypoint","text":"<p>You may want to create an entrypoint.</p> <p>In the same level as the <code>manage.py</code> file create a <code>entrypoint.sh</code> file:</p> <pre><code>#!/bin/sh\n\necho \"Running migrations...\"\npython manage.py migrate\n\necho \"Starting server...\"\npython manage.py runserver 0.0.0.0:8000\n</code></pre> <p>Then:</p> <pre><code>chmod +x entrypoint.sh\n</code></pre> <p>You can now go to your <code>Dockerfile</code> and change the final line:</p> <pre><code># ...\n\nCMD [\"./entrypoint.sh\"]\n</code></pre> <pre><code>docker-compose up\n</code></pre>"},{"location":"homeserver/django-docker/#other-resources","title":"Other resources","text":"<ul> <li>Dockerizing Django with Postgres, Gunicorn, and Nginx</li> </ul>"},{"location":"homeserver/setup-docker/","title":"Set up Docker and Docker Compose","text":""},{"location":"homeserver/setup-docker/#installing-docker","title":"Installing Docker","text":"<p><sub><sup>Reference: Install Docker Engine on Ubuntu</sup> <p>Set up Docker's <code>apt</code> repository.</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n</code></pre> <p>Install the Docker packages.</p> <pre><code>sudo apt-get install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n</code></pre> <p>Verify that the installation is successful by running the hello-world image:</p> <pre><code>sudo docker run hello-world\n</code></pre>"},{"location":"homeserver/setup-docker/#now-some-optional-post-installation-steps","title":"Now some optional post-installation steps","text":"<p><sub><sup>Reference: Linux post-installation steps for Docker Engine</sup> <p>Create the <code>docker</code> group and add your user:</p> <pre><code>sudo groupadd docker\nsudo usermod -aG docker $USER\n</code></pre> <p>Log out and log back in so that your group membership is re-evaluated. </p> <pre><code>exit\nssh username@hostname\n</code></pre>"},{"location":"homeserver/setup-docker/#installing-docker-compose","title":"Installing Docker Compose","text":"<p><sub><sup>Reference: Overview of installing Docker Compose</sup> <p>Since we already have Docker Engine and Docker CLI installed, we can install the Docker Compose plugin from the command line, by using Docker's repository:</p> <p>Update the package index, and install the latest version of Docker Compose:</p> <pre><code>sudo apt-get update\nsudo apt-get install docker-compose-plugin\n</code></pre> <p>To verify that Docker Compose is installed correctly we can run:</p> <pre><code>docker compose version\n</code></pre>"},{"location":"homeserver/setup-homepage/","title":"Set up Homepage","text":"<p><sub><sup>Reference: Docker Installation</sup> <p>Set up directory for configuration file, for instance, in your <code>/home</code> directory:</p> <pre><code>cd ~\nmkdir -p homepage/config\n</code></pre> <p>Create a <code>docker-compose.yml</code> file:</p> <pre><code>cd homepage\nnano docker-compose.yml\n</code></pre> <pre><code>services:\n  homepage:\n    image: ghcr.io/gethomepage/homepage:latest\n    container_name: homepage\n    ports:\n      - 3000:3000\n    volumes:\n      - '/home/${USER}/homepage/config:/config' # Make sure your local config directory exists\n      - /var/run/docker.sock:/var/run/docker.sock # (optional) For docker integrations\n    environment:\n      HOMEPAGE_ALLOWED_HOSTS: hostname:3000 # required, may need port. See gethomepage.dev/installation/#homepage_allowed_hosts\n    restart: 'unless-stopped'\n</code></pre> <p>Start Docker container:</p> <pre><code>docker compose up -d\n</code></pre> <p>Going to <code>http://hostname:3000</code>, you should see your homepage.</p>"},{"location":"homeserver/setup-homepage/#configuration","title":"Configuration","text":"<p>In the <code>services.yml</code>:</p> <pre><code>- Media:\n    - Immich:\n        href: http://homeserver:2283\n        description: Photo and video management\n\n    - Plex:\n        href: http://homeserver:32400/web\n        description: Media server\n\n- Utilities:\n    - Portainer:\n        href: http://homeserver:9443\n        description: Docker container management\n\n    - qBittorrent:\n        href: http://homeserver:8080\n        description: Bittorrent client\n\n- Servarr:\n    - Radarr:\n        href: http://homeserver:7878\n        description: Movies\n\n    - Sonarr:\n        href: http://homeserver:8989\n        description: TV shows\n\n    - Prowlarr:\n        href: http://homeserver:9696\n        description: Indexer manager\n\n    - Bazarr:\n        href: http://homeserver:6767\n        description: Subtitle manager\n\n    - Overseerr:\n        href: http://homeserver:5055\n        description: Media requests manager\n</code></pre>"},{"location":"homeserver/setup-immich/","title":"Set up Immich","text":"<p><sub><sup>Reference: Immich Docs - Quick start</sup>"},{"location":"homeserver/setup-immich/#set-up-immich-server","title":"Set up immich server","text":"<p>Create an directory for Immich:</p> <pre><code>mkdir ./immich-app\ncd ./immich-app\n</code></pre> <p>Download <code>docker-compose.yml</code> and <code>example.env</code>:</p> <pre><code>wget -O docker-compose.yml https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml\nwget -O .env https://github.com/immich-app/immich/releases/latest/download/example.env\n</code></pre> <p>Rename <code>example.env</code> to <code>.env</code>. Populate the <code>.env</code> file with custom values:</p> <pre><code># You can find documentation for all the supported env variables at https://immich.app/docs/install/environment-variables\n\n# The location where your uploaded files are stored\nUPLOAD_LOCATION=./library\n\n# The location where your database files are stored. Network shares are not supported for the database\nDB_DATA_LOCATION=./postgres\n\n# To set a timezone, uncomment the next line and change Etc/UTC to a TZ identifier from this list: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List\nTZ=Europe/Lisbon\n\n# The Immich version to use. You can pin this to a specific version like \"v1.71.0\"\nIMMICH_VERSION=release\n\n# Connection secret for postgres. You should change it to a random password\n# Please use only the characters `A-Za-z0-9`, without special characters or spaces\nDB_PASSWORD=postgres\n\n# The values below this line do not need to be changed\n###################################################################################\nDB_USERNAME=postgres\nDB_DATABASE_NAME=immich\n</code></pre> <p><code>UPLOAD_LOCATION</code> is your preferred location for storing backup assets. It should be a new directory on the server with enough free space.</p> <p>From the directory which contains the docker-compose.yml and .env files, start Immich as a background service:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"homeserver/setup-immich/#start-the-app","title":"Start the app","text":"<p>The first user to register will be the admin user. The admin user will be able to add other users to the application.</p> <p>To register for the admin user, access the web application at <code>http://&lt;machine-ip-address&gt;:2283</code> and click on the Getting Started button.</p>"},{"location":"homeserver/setup-immich/#add-photos-from-google-photos-via-google-takeout","title":"Add photos from Google Photos via Google Takeout","text":"<p><sub><sup>Reference: immich-go</sup> <p>To add photos from Google Photos via Google Takeout you can use immich-go.</p> <ol> <li> <p>Visit the releases page.</p> </li> <li> <p>Download the archive for your operating system and architecture:</p> </li> <li> <p>Linux: <code>immich-go_Linux_x86_64.tar.gz</code></p> </li> <li> <p>Extract the archive:    <pre><code># For Linux\ntar -xzf immich-go_*_x86_64.tar.gz\n</code></pre></p> </li> <li> <p>(Optional) Move the binary to a directory in your PATH:    <pre><code># Linux\nsudo mv immich-go /usr/local/bin/\n</code></pre></p> </li> <li> <p>After installation, verify that <code>immich-go</code> is working correctly:   <pre><code>immich-go --version\n</code></pre></p> </li> </ol> <p>Examples usage:</p> <pre><code>## Upload photos from a local folder to your Immich server\nimmich-go upload from-folder --server=http://your-ip:2283 --api-key=your-api-key /path/to/your/photos\n\n## Archive photos from your Immich server to a local folder\nimmich-go archive from-immich --from-server=http://your-ip:2283 --from-api-key=your-api-key --write-to-folder=/path/to/archive\n\n## Upload a Google Photos takeout to your Immich server\nimmich-go upload from-google-photos --server=http://your-ip:2283 --api-key=your-api-key /path/to/your/takeout-*.zip\n</code></pre>"},{"location":"homeserver/setup-media-stack/","title":"Setup a media stack","text":"<p>This guide shows how to set up a media stack using Plex or Jellyfin and the Servarr stack. Everything is installed in Docker containers in Ubuntu Server. For more info on how to set up Ubuntu and Docker check Ubuntu server setup and Setup Docker.</p> <p>This guides assumes you named your host server <code>homeserver</code> and it has the following folder structure:</p> <pre><code>~/\n|-- data/\n|   |-- downloads/\n|   |-- movies/\n|   |-- shows/\n|-- plex/\n|   |-- library/\n|   |-- docker-compose.yml\n|-- transcode/\n|   |-- temp/\n</code></pre> <p>You can start by creating these folders:</p> <pre><code>cd ~\nmkdir - p data/downloads\nmkdir - p data/movies\nmkdir - p data/shows\n</code></pre> <p>Make sure the folders have the needed permissions and ownership by running:</p> <pre><code>sudo chown -R $USER:$USER data\nsudo chmod -R 775 data\n</code></pre>"},{"location":"homeserver/setup-media-stack/#media-server","title":"Media server","text":""},{"location":"homeserver/setup-media-stack/#plex","title":"Plex","text":"<p><sub><sup>Reference: Docker Hub - Plex</sup> <p>Plex is a media server software. We install the Plex server in our Ubuntu server and can stream our media to the Plex clients that can be installed in yor Android phone, your SmartTV, etc. </p> <p>We can start by adding a few more folder for Plex.</p> <pre><code>~/\n|-- data/\n|-- plex/\n|   |-- library/\n|   |-- docker-compose.yml\n|-- transcode/\n|   |-- temp/\n</code></pre> <pre><code>cd plex\nnano docker-compose.yml\n</code></pre> <pre><code>services:\n  plex:\n    image: lscr.io/linuxserver/plex:latest\n    container_name: plex\n    network_mode: host\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n      - VERSION=docker\n    #   - PLEX_CLAIM=  # optional, get from https://account.plex.tv/claim\n    volumes:\n      - '/home/${USER}/plex/library:/config'\n      - '/home/${USER}/data/shows:/tv'\n      - '/home/${USER}/data/movies:/movies'\n      - '/home/${USER}/transcode/temp&gt;:/transcode'\n    restart: unless-stopped\n</code></pre> <p>Then while in the same folder as the <code>docker-compose.yml</code> run:</p> <pre><code>docker compose up -d\n</code></pre> <p>Plex will be available at <code>http://homeserver:32400/web</code>.</p>"},{"location":"homeserver/setup-media-stack/#jellyfin","title":"Jellyfin","text":"<p><sub><sup>Reference: Jellyfin Container Installation</sup> <p>An open-source alternative to Plex is Jellyfin.</p> <p>Create persistent storage for configuration and cache data. Create two directories on the host and use bind mounts:</p> <pre><code>cd ~\nmkdir -p jellyfin/config\nmkdir -p jellyfin/cache\nmkdir data\n</code></pre> <p>Create a <code>docker-compose.yml</code> file with the following contents.</p> <pre><code>cd jellyfin\nnano docker-compose.yml\n</code></pre> <pre><code>services:\n  jellyfin:\n    image: jellyfin/jellyfin\n    container_name: jellyfin\n    network_mode: 'host'\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/jellyfin/config:/config'\n      - '/home/${USER}/jellyfin/cache:/cache'\n      - '/home/${USER}/data/:/cache'\n      - type: bind\n        source: '/home/${USER}/data'\n        target: /data\n    restart: 'unless-stopped'\n</code></pre> <p>Then while in the same folder as the <code>docker-compose.yml</code> run:</p> <pre><code>docker compose up -d\n</code></pre> <p>Jellyfin will be available at <code>http://homeserver:8096</code>.</p>"},{"location":"homeserver/setup-media-stack/#servarr-stack","title":"Servarr stack","text":""},{"location":"homeserver/setup-media-stack/#radarr","title":"Radarr","text":"<p>Radarr is a movie collection manager.</p> <p>Create a <code>docker-compose.yml</code> file with the following contents.</p> <pre><code>cd radarr\nnano docker-compose.yml\n</code></pre> <pre><code>services:\n  radarr:\n    image: lscr.io/linuxserver/radarr:latest\n    container_name: radarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/radarr/data:/config'\n      - '/home/${USER}/media/movies:/movies' # optional\n      - '/home/${USER}/media/downloads:/downloads' # optional\n    ports:\n      - 7878:7878\n    restart: unless-stopped\n</code></pre> <p>Then while in the same folder as the <code>docker-compose.yml</code> run:</p> <pre><code>docker compose up -d\n</code></pre> <p>Radarr will be available at <code>http://homeserver:7878</code>.</p>"},{"location":"homeserver/setup-media-stack/#prowlarr","title":"Prowlarr","text":"<pre><code>services:\n  prowlarr:\n    image: lscr.io/linuxserver/prowlarr:latest\n    container_name: prowlarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/prowlarr/data:/config'\n    ports:\n      - 9696:9696\n    restart: unless-stopped\n</code></pre>"},{"location":"homeserver/setup-media-stack/#sonarr","title":"Sonarr","text":"<pre><code>services:\n  sonarr:\n    image: lscr.io/linuxserver/sonarr:latest\n    container_name: sonarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/sonarr/data:/config'\n      - '/home/${USER}/media/shows:/tv' # optional\n      - '/home/${USER}/media/downloads:/downloads' # optional\n    ports:\n      - 8989:8989\n    restart: unless-stopped\n</code></pre>"},{"location":"homeserver/setup-media-stack/#bazarr","title":"Bazarr","text":"<p>Bazarr is a companion application to Sonarr and Radarr to manage and download subtitles.</p> <p>Create a <code>docker-compose.yml</code> file with the following contents.</p> <pre><code>cd bazarr\nnano docker-compose.yml\n</code></pre> <pre><code>services:\n  bazarr:\n    image: lscr.io/linuxserver/bazarr:latest\n    container_name: bazarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/bazarr/config:/config'\n      - '/home/${USER}/media/movies:/movies' # optional\n      - '/home/${USER}/media/shows:/tv' # optional\n    ports:\n      - 6767:6767\n    restart: unless-stopped\n</code></pre> <p>Then while in the same folder as the <code>docker-compose.yml</code> run:</p> <pre><code>docker compose up -d\n</code></pre> <p>Bazarr will be available at <code>http://homeserver:6767</code>.</p>"},{"location":"homeserver/setup-media-stack/#overseerr","title":"Overseerr","text":"<p>Overseerr is a request management and media discovery for Plex media server.</p> <p>Create a <code>docker-compose.yml</code> file with the following contents.</p> <pre><code>cd overseerr\nnano docker-compose.yml\n</code></pre> <pre><code>services:\n  overseerr:\n    image: sctx/overseerr:latest\n    container_name: overseerr\n    environment:\n      - LOG_LEVEL=debug\n      - TZ=Europe/Lisbon\n      - PORT=5055 #optional\n    ports:\n      - 5055:5055\n    volumes:\n      - '/home/${USER}/overseerr/config:/config'\n    restart: unless-stopped\n</code></pre> <p>Then while in the same folder as the <code>docker-compose.yml</code> run:</p> <pre><code>docker compose up -d\n</code></pre> <p>Overseerr will be available at <code>http://homeserver:5055</code>.</p>"},{"location":"homeserver/setup-media-stack/#complete-docker-compose","title":"Complete Docker Compose","text":"<p>The following <code>docker-compose.yml</code> will install:</p> <ul> <li>Plex</li> <li>Radarr, Sonarr, Prowlarr, Bazarr, and Overseerr</li> </ul> <pre><code>services:\n  plex:\n    image: lscr.io/linuxserver/plex:latest\n    container_name: plex\n    network_mode: host\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n      - VERSION=docker\n    #   - PLEX_CLAIM=  # optional, get from https://account.plex.tv/claim\n    volumes:\n      - '/home/${USER}/plex/library:/config'\n      - '/home/${USER}/data/shows:/tv'\n      - '/home/${USER}/data/movies:/movies'\n      - '/home/${USER}/transcode/temp&gt;:/transcode'\n    restart: unless-stopped\n\n  radarr:\n    image: lscr.io/linuxserver/radarr:latest\n    container_name: radarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/radarr/data:/config'\n      - '/home/${USER}/media/movies:/movies' # optional\n      - '/home/${USER}/media/downloads:/downloads' # optional\n    ports:\n      - 7878:7878\n    restart: unless-stopped\n\n  sonarr:\n    image: lscr.io/linuxserver/sonarr:latest\n    container_name: sonarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/sonarr/data:/config'\n      - '/home/${USER}/media/shows:/tv' # optional\n      - '/home/${USER}/media/downloads:/downloads' # optional\n    ports:\n      - 8989:8989\n    restart: unless-stopped\n\n  prowlarr:\n    image: lscr.io/linuxserver/prowlarr:latest\n    container_name: prowlarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/prowlarr/data:/config'\n    ports:\n      - 9696:9696\n    restart: unless-stopped\n\n  bazarr:\n    image: lscr.io/linuxserver/bazarr:latest\n    container_name: bazarr\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n    volumes:\n      - '/home/${USER}/bazarr/config:/config'\n      - '/home/${USER}/media/movies:/movies' # optional\n      - '/home/${USER}/media/shows:/tv' # optional\n    ports:\n      - 6767:6767\n    restart: unless-stopped\n\n  overseerr:\n    image: sctx/overseerr:latest\n    container_name: overseerr\n    environment:\n      - LOG_LEVEL=debug\n      - TZ=Europe/Lisbon\n      - PORT=5055 #optional\n    ports:\n      - 5055:5055\n    volumes:\n      - '/home/${USER}/overseerr/config:/config'\n    restart: unless-stopped\n</code></pre>"},{"location":"homeserver/setup-portainer/","title":"Set up Portainer","text":"<p><sub><sup>Reference: Install Portainer CE</sup> <p><sub><sup>Install Portainer CE &gt; Set up a new Portainer CE Server installation &gt; Docker Standalone &gt; Install Portainer CE with Docker on Linux</sup>"},{"location":"homeserver/setup-portainer/#installing","title":"Installing","text":"<p>Create the volume that Portainer Server will use to store its database:</p> <pre><code>docker volume create portainer_data\n</code></pre> <p>Download and install the Portainer Server container:</p> <pre><code>docker run -d -p 8000:8000 -p 9443:9443 --name portainer --restart=always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer-ce:lts\n</code></pre> <p>!!! Note</p> <pre><code>By default, Portainer generates and uses a self-signed SSL certificate to secure port 9443. Alternatively you can provide your own SSL certificate during installation or via the Portainer UI after installation is complete.\n</code></pre> <p>Portainer Server has now been installed. You can check to see whether the Portainer Server container has started by running <code>docker ps</code>.</p> <p>Log in with at <code>https://hostname:9443</code>.</p>"},{"location":"homeserver/setup-qbittorrent/","title":"Set up qbittorrent","text":"<p><sub><sup>Reference: Docker Hub qbittorrent</sup> <p>Set up directories.</p> <pre><code>cd ~\nmkdir -p qbittorrent/appdata\nmkdir downloads\n</code></pre> <p>Create a <code>docker-compose.yml</code> file with the following contents.</p> <pre><code>cd qbittorrent\nnano docker-compose.yaml\n</code></pre> <pre><code>services:\n  qbittorrent:\n    image: lscr.io/linuxserver/qbittorrent:latest\n    container_name: qbittorrent\n    environment:\n      - PUID=1000\n      - PGID=1000\n      - TZ=Europe/Lisbon\n      - WEBUI_PORT=8080\n      - TORRENTING_PORT=6881\n    volumes:\n      - '/home/${USER}/qbittorrent/appdata:/config'\n      - '/home/${USER}/media/downloads:/downloads' #optional\n    ports:\n      - 8080:8080\n      - 6881:6881\n      - 6881:6881/udp\n    restart: unless-stopped\n</code></pre> <p>Then while in the same folder as the <code>docker-compose.yml</code> run:</p> <pre><code>docker compose up -d\n</code></pre> <p>The web UI is available at <code>http://homeserver:8080</code>.</p>"},{"location":"homeserver/wakeon-lan/","title":"Wake-on-LAN in Ubuntu","text":"<p><sub><sup>Reference: How to Enable Wake-on-LAN in Ubuntu 22.04</sup>"},{"location":"homeserver/wakeon-lan/#enable-wake-on-lan-feature","title":"Enable Wake-On-Lan feature","text":"<pre><code>ip a\n</code></pre> <p>Register the mac address.</p> <p>To view and change the Wake-On-Lan settings, the \"ethtool\" package must be installed:</p> <pre><code>sudo apt install ethtool -y\n</code></pre> <p>Find out if the network card supports wake-on-LAN:</p> <pre><code>sudo ethtool enp2s0\n</code></pre> <p>The expression <code>Wake-on:d</code> indicates that the wake-on-lan feature of the network card is supported but deactivated.</p> <p>Run the following commands to enable wake-on-lan on your network card:</p> <pre><code>sudo ethtool -s enp2s0 wol g\n</code></pre> <p>Some motherboard manufacturers require you to change the settings in the BIOS to enable this feature. If there is no change when you check after entering the command, it is recommended to look at the BIOS settings.</p>"},{"location":"homeserver/wakeon-lan/#auto-wake-on-lan-activation-at-startup","title":"Auto Wake-On-Lan activation at startup","text":"<p>If the Wake-on-Lan settings are deactivated when the server is restarted; you should solve this problem with systemd. Create systemd service:</p> <pre><code>sudo --preserve-env systemctl edit --force --full wol-enable.service\n</code></pre> <pre><code>[Unit]\nDescription=Enable Wake-up on LAN\n\n[Service]\nType=oneshot\nExecStart=/sbin/ethtool -s enp2s0   wol g\n\n[Install]\nWantedBy=basic.target\n</code></pre> <p>Replace the <code>enp2s0</code> value with your own network interface value. Then reload and enable the service:</p> <pre><code>sudo systemctl daemon-reload\nsudo systemctl enable wol-enable.service\n</code></pre>"},{"location":"homeserver/wakeon-lan/#remote-ubuntu-server-wake-up","title":"Remote Ubuntu server wake up","text":"<p>Now, the steps to be done on the server that will do the wake-up task.</p> <pre><code>sudo apt  install wakeonlan -y\n</code></pre> <p>Wake up remote server using:</p> <pre><code>sudo wakeonlan 30:5a:3a:0d:ac:0d\n</code></pre> <p>where <code>30:5a:3a:0d:ac:0d</code> is the remote server MAC address</p>"},{"location":"html-css/css-frameworks/","title":"CSS frameworks","text":"<p>Full fledged: - Bootsrap - Foundation - PureCSS - Bulma - Semantic UI - Materialize</p> <p>Lightweight: - UI kit - Milligram - Spectre</p> <p>Minimal Bloilerplates: - Skeleton</p> <p>Other: - AgnosticUI - Accessible CSS component primitives that work with React, Vue 3, Svelte, and Angular! - Tailwind - Primitive UI</p>"},{"location":"html-css/css-reset/","title":"Simple CSS reset","text":"<pre><code>html {\n  box-sizing: border-box;\n  font-size: 16px;\n}\n\n*, *:before, *:after {\n  box-sizing: inherit;\n}\n\nbody, h1, h2, h3, h4, h5, h6, p, ol, ul {\n  margin: 0;\n  padding: 0;\n  font-weight: normal;\n}\n\nimg {\n  max-width: 100%;\n  height: auto;\n}\n</code></pre> <p>The CSS above will:</p> <ul> <li> <p>Reset is the <code>box-sizing: border-box</code>, as this will ensure consistent and predictable sizing. The default value of content-box doesn't account for the padding or border. This is probably the most important point.</p> </li> <li> <p>Dont' bold headings by default with <code>font-weight: normal</code>.</p> </li> <li> <p>Set the default font size to be 16px. Everything else can be specified in rem units and it will be based on those 16px. Then, if you want to adjust globally to make the text a little larger overall, you can change the base rule for something like 17 or 18px.</p> </li> <li> <p>Make images responsive by default.</p> </li> </ul>"},{"location":"html-css/css-selectors/","title":"CSS selectors","text":"<p>In CSS, selectors are patterns used to select the element(s) you want to style.</p> <p>The \"CSS\" column indicates in which CSS version the property is defined (CSS1, CSS2, or CSS3).</p> Selector Example Example description CSS .class .intro Selects all elements with class=\"intro\" 1 #id #firstname Selects the element with id=\"firstname\" 1 * * Selects all elements 2 element p Selects all \\<p> elements 1 element,element div, p Selects all \\ elements and all \\<p> elements 1 element\u00a0element div p Selects all \\<p> elements inside \\ elements 1 element&gt;element div &gt; p Selects all \\<p> elements where the parent is a \\ element 2 element+element div + p Selects all \\<p> elements that are placed immediately after \\ elements 2 element1~element2 p ~ ul Selects every \\<ul> element that are preceded by a \\<p> element 3 :active a:active Selects the active link 1 ::after p::after Insert something after the content of each \\<p> element 2 ::before p::before Insert something before\u00a0the content of each \\<p> element 2 :checked input:checked Selects every checked  element 3 :disabled input:disabled Selects every disabled  element 3 :empty p:empty Selects every \\<p> element that has no children (including text nodes) 3 :enabled input:enabled Selects every enabled  element 3 :first-child p:first-child Selects every \\<p> element that is the first child of its parent 2 ::first-letter p::first-letter Selects the first letter of every \\<p> element 1 ::first-line p::first-line Selects the first line of every \\<p> element 1 :first-of-type p:first-of-type Selects every \\<p> element that is the first \\<p> element of its parent 3 :focus input:focus Selects the input element which has focus 2 :hover a:hover Selects links on mouse over 1 :in-range input:in-range Selects input elements with a value within a specified range 3 :invalid input:invalid Selects all input elements with an invalid value 3 :lang(language) p:lang(it) Selects every \\<p> element with a lang attribute equal to \"it\" (Italian) 2 :last-child p:last-child Selects every \\<p> element that is the last child of its parent 3 :last-of-type p:last-of-type Selects every \\<p> element that is the last \\<p> element of its parent 3 :link a:link Selects all unvisited links 1 :not(selector) :not(p) Selects every element that is not a \\<p> element 3 :nth-child(n) p:nth-child(2) Selects every \\<p> element that is the second child of its parent 3 :nth-last-child(n) p:nth-last-child(2) Selects every \\<p> element that is the second child of its parent, counting from the last child 3 :nth-last-of-type(n) p:nth-last-of-type(2) Selects every \\<p> element that is the second \\<p> element of its parent, counting from the last child 3 :nth-of-type(n) p:nth-of-type(2) Selects every \\<p> element that is the second \\<p> element of its parent 3 :only-of-type p:only-of-type Selects every \\<p> element that is the only \\<p> element of its parent 3 :only-child p:only-child Selects every \\<p> element that is the only child of its parent 3 :optional input:optional Selects input elements with no \"required\" attribute 3 :out-of-range input:out-of-range Selects input elements with a value outside a specified range 3 :read-only input:read-only Selects input elements with the \"readonly\" attribute specified 3 :read-write input:read-write Selects input elements with the \"readonly\" attribute NOT specified 3 :required input:required Selects input elements with the \"required\" attribute specified 3 :root :root Selects the document's root element 3 ::selection ::selection Selects the portion of an element that is selected by a user :target #news:target Selects the current active #news element (clicked on a URL containing that anchor name) 3 :valid input:valid Selects all input elements with a valid value 3 :visited a:visited Selects all visited links 1"},{"location":"html-css/seo-meta-tags/","title":"Meta tags for SEO","text":""},{"location":"html-css/seo-meta-tags/#title-tag","title":"Title tag","text":"<p>Title tags are usually used by search engines to determine the subject of a particular page and display it in SERPs.</p> <pre><code>&lt;title&gt;Your Fantastic Title&lt;/title&gt;\n</code></pre>"},{"location":"html-css/seo-meta-tags/#meta-description-tag","title":"Meta description tag","text":"<p>Meta description is a short paragraph of text in the HTML  section of a page. It is usually displayed in a SERP snippet after website's title and URL. <pre><code>&lt;meta name=\"description\" content=\"Your gorgeous description\"&gt;\n</code></pre>"},{"location":"html-css/seo-meta-tags/#open-graph-tags","title":"Open Graph tags","text":"<p>Open Graph (OG) tags meta tags in HTML  section of a page that allow any webpage to become a rich object in social networks. <pre><code>&lt;meta property=\"og:title\" content=\"The Rock\" /&gt;\n&lt;meta property=\"og:type\" content=\"website\" /&gt;\n&lt;meta property=\"og:url\" content=\"http://www.imdb.com/title/tt0117500/\" /&gt;\n&lt;meta property=\"og:image\" content=\"http://ia.media-imdb.com/images/rock.jpg\" /&gt;\n</code></pre>"},{"location":"html-css/seo-meta-tags/#robots-tag","title":"Robots tag","text":"<pre><code>&lt;meta name=\"robots\" content=\"index, follow\"&gt;\n</code></pre>"},{"location":"html-css/seo-meta-tags/#canonical-tag","title":"Canonical tag","text":"<p>When you have a few pages with identical content, you can use a canonical tag to tell search engines which page should be prioritized.</p> <pre><code>&lt;link href=\"URL\" rel=\"canonical\"&gt;\n</code></pre>"},{"location":"html-css/seo-meta-tags/#references","title":"References","text":"<p>https://www.link-assistant.com/news/html-tags-for-seo.html</p>"},{"location":"html-css/sticky-footer/","title":"Sticky footer","text":"<p>Get the footer to stick to the bottom of the window even when there is not enough content to fill the page.</p> <p>HTML: <pre><code>&lt;body&gt;\n  &lt;header&gt;\u2026&lt;/header&gt;\n  &lt;main&gt;\u2026&lt;/main&gt;\n  &lt;footer&gt;\u2026&lt;/footer&gt;\n&lt;/body&gt;\n</code></pre></p> <p>CSS: <pre><code>body {\n  display: flex;\n  min-height: 100vh;\n  flex-direction: column;\n}\n\nmain {\n  flex: 1;\n}\n</code></pre></p>"},{"location":"html-css/sticky-footer/#references","title":"References","text":"<ul> <li>https://philipwalton.github.io/solved-by-flexbox/demos/sticky-footer/</li> </ul> <p>Other: - https://css-tricks.com/couple-takes-sticky-footer/ - https://getbootstrap.com/docs/4.0/examples/sticky-footer/</p>"},{"location":"javascript/DataTables/","title":"DataTables JS Library","text":"<p>Documentation here</p>"},{"location":"javascript/DataTables/#requirements","title":"Requirements:","text":"<ul> <li>JQuery</li> </ul>"},{"location":"javascript/DataTables/#usage","title":"Usage:","text":"<p>Include the CSS and JS code for DataTables to the head and bottom of the body of your website, respectively. CSS is not required.</p> <pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href= \"{{ url_for('static',filename='style.css') }}\"&gt; \n\n&lt;script type=\"text/javascript\" src=\"https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js\"&gt;&lt;/script&gt;\n</code></pre> <p>Use the single function bellow to call to initialise the tabl. Do not forget to add an id tag to the table. <pre><code>$(document).ready(function(){\n    $('#myTable').DataTable();\n});\n</code></pre></p> <p>Add options like so: <pre><code>$(document).ready(function() {\n  $('#myTable').DataTable( {\n    \"columnDefs\": [\n      { \"orderable\": false, \"targets\": [2,3,4] }\n    ],\n    \"paging\": false,\n    \"order\": [[ 0, \"asc\" ]]\n  } );\n} );\n</code></pre></p>"},{"location":"javascript/ajax/","title":"Making AJAX request","text":""},{"location":"javascript/ajax/#send-a-request-to-a-server-pure-javascript","title":"Send a Request To a Server (Pure Javascript)","text":"<pre><code>// Create a new XMLHttpRequest\nvar request = new XMLHttpRequest();\n\n// Handle state changes for the request.\nrequest.onreadystatechange = function() {\n  if (request.readyState == 4 &amp;&amp; request.status == 200) {\n    // Do something like:\n    var jsonData = JSON.parse(request.responseText);\n  }\n};\n\n// Set up and make the request\nrequest.open(\"GET\", \"ajax_info.txt\", true);\nrequest.send();\n</code></pre> <p>Where:</p> <ul> <li> <p><code>open(method, url, async)</code>: Specifies the type of request. method: the type of request: GET or POST; url: the server (file) location; async: true (asynchronous) or false (synchronous)</p> </li> <li> <p><code>send()</code>: Sends the request to the server (used for GET)</p> </li> <li> <p><code>send(string)</code>: Sends the request to the server (used for POST). For instance: <code>xhttp.send(\"fname=Henry&amp;lname=Ford\");</code></p> </li> <li> <p><code>onreadystatechange</code>: defines a function to be executed when the request receives an answer</p> </li> </ul>"},{"location":"javascript/basics/","title":"Basic Javascript concepts","text":""},{"location":"javascript/basics/#variables","title":"Variables","text":"<p>There are three main keywords used to define variables in JavaScript: - <code>const</code>: defines a constant variable that cannot be redefined later - <code>let</code>: defines a variable is local to the scope of the innermost pair of curly braces surrounding it - <code>var</code>: defines a variable that is local to the function it is defined in</p> <p>Here is an example showcasing these different ways to define variables:</p> <pre><code>// This variable exists even outside the loop\nif (true) {\n    var message = 'Hello!';\n}\n\nalert(message);\n</code></pre> <p>Because <code>var</code> was used to define message, there will be no errors running this code.</p> <pre><code>// This variable does not exist outside the loop\nif (true) {\n    let message = 'Hello!';\n}\n\nalert(message);\n</code></pre> <p>Because <code>let</code> was used to define message, it cannot be passed to alert, which is outside the scope of message. If this were in an HTML page, when the page was opened, no alert would pop up. If the console were opened in the browser, there would be an <code>Uncaught ReferenceError</code>.</p> <pre><code>// The value of const variables cannot change\nconst message = 'Hello!';\nmessage = 'Goodbye!';\n\nalert(message);\n</code></pre> <p>Similar to the last example, no alert will pop up. In the console, there would be an <code>Uncaught TypeError</code>, since there was an attempt to redefine a variable defined with <code>const</code>.</p>"},{"location":"javascript/basics/#template-literals-formatting-strings","title":"Template literals (formatting strings)","text":"<pre><code>const name = 'Daniel';\n\nalert(`Hello ${name}!`);\n</code></pre>"},{"location":"javascript/basics/#arrow-functions","title":"Arrow functions","text":"<p>Since functions, especially anonymous functions, are so common in JavaScript, ES6 has introduced a new syntax for functions called arrow notation that allows for the definition of so-called arrow functions.</p> <pre><code>() =&gt; {\n    alert('Hello, world!');\n}\n\nx =&gt; {\n    alert(x);\n}\n\nx =&gt; x * 2;\n</code></pre> <p>An arrow function is defined without using the word function, but rather just with a pair of parentheses enclosing any arguments the function takes, followed by an arrow, and finally the function body, enclosed in curly braces. Functions with only one argument can be defined without the use of parentheses enclosing the argument list. Functions that have only one line in the body can drop the curly braces and have the body on the same line as the argument list and arrow. Here's an example:</p> <pre><code>document.addEventListener('DOMContentLoaded', () =&gt; {\n    // Have each button change the color of the heading\n    document.querySelectorAll('.color-change').forEach(button =&gt; {\n        button.onclick = () =&gt; {\n            document.querySelector('#hello').style.color = button.dataset.color;\n        };\n    });\n});\n</code></pre>"},{"location":"javascript/cache-data/","title":"Caching data","text":"<p>You have three options:</p> <ol> <li>Cookies: https://developer.mozilla.org/en-US/docs/DOM/document.cookie</li> <li>DOMStorage (sessionStorage or localStorage): https://developer.mozilla.org/en-US/docs/DOM/Storage</li> <li>If your users are logged in, you could persist data in your server's DB that is keyed to a user (or group)</li> </ol>"},{"location":"javascript/cache-data/#using-localstorage-persistent-over-sessions","title":"Using localStorage (persistent over sessions)","text":"<p>Writing : <pre><code>localStorage['myKey'] = 'somestring'; // only strings\n</code></pre></p> <p>Reading : <pre><code>var myVar = localStorage['myKey'] || 'defaultValue';\n</code></pre></p> <p>If you need to store complex structures, you might serialize them in JSON. For example :</p> <p>Reading : <pre><code>var stored = localStorage['myKey'];\nif (stored) myVar = JSON.parse(stored);\nelse myVar = {a:'test', b: [1, 2, 3]};\n</code></pre></p> <p>Writing : <pre><code>localStorage['myKey'] = JSON.stringify(myVar);\n</code></pre></p> <p>Note that you may use more than one key. They'll all be retrieved by all pages on the same domain.</p> <p>Unless you want to be compatible with IE7, you have no reason to use the obsolete and small cookies.</p>"},{"location":"javascript/cache-data/#references","title":"References","text":"<p>https://stackoverflow.com/questions/14266730/js-how-to-cache-a-variable</p>"},{"location":"javascript/create-react-app/","title":"Create ReactJS app and deploy to Github pages","text":""},{"location":"javascript/create-react-app/#requirements","title":"Requirements","text":"<ul> <li>NodeJS Install from here. Check version with: <code>$ node --version</code></li> <li>npm Check version with: <code>$ npm --version</code></li> </ul>"},{"location":"javascript/create-react-app/#create-react-app","title":"Create React app","text":"<p>You can <code>npm</code> install <code>create-react-app</code> globally with:  <pre><code>$ npm install -g create-react-app\n$ create-react-app my-app\n</code></pre></p> <p>Alternatively, you can use <code>npx</code> (a tool to execute packages) to create the app withput installing <code>create-react-app</code>. This way is recommended by the docs.</p> <pre><code>$ npx create-react-app my-app\n$ cd my-app\n$ npm start\n</code></pre> <p>This will lunch a server where you can see your app.</p>"},{"location":"javascript/create-react-app/#deploying-to-github-pages","title":"Deploying to Github Pages","text":""},{"location":"javascript/create-react-app/#1-install-the-gh-pages-package-as-a-dev-dependency-of-the-app","title":"1) Install the gh-pages package as a \"dev-dependency\" of the app","text":"<pre><code>$ npm install gh-pages --save-dev\n</code></pre>"},{"location":"javascript/create-react-app/#2-create-an-empty-repository-on-github","title":"2) Create an empty repository on Github","text":"<p>Go to github.com and create a repo. We will name it named <code>react-gh-pages</code>. </p>"},{"location":"javascript/create-react-app/#3-modify-the-packagejson-file","title":"3) Modify the package.json file","text":"<p>At the top level, add a homepage property: <pre><code>\"homepage\": \"https://gitname.github.io/react-gh-pages\"\n</code></pre></p> <p>In the existing scripts property, add the following: <pre><code>\"scripts\": {\n  //...\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d build\"\n}\n</code></pre></p>"},{"location":"javascript/create-react-app/#4-add-the-github-repository-as-a-remote-in-your-local-git-repository","title":"4) Add the GitHub repository as a \"remote\" in your local git repository","text":"<pre><code>$ git remote add origin https://github.com/gitname/react-gh-pages.git\n</code></pre>"},{"location":"javascript/create-react-app/#5-generate-a-production-build-of-your-app-and-deploy-it-to-github-pages","title":"5) Generate a production build of your app, and deploy it to GitHub Pages","text":"<pre><code>$ npm run deploy\n</code></pre> <p>The app is now accessible at https://gitname.github.io/react-gh-pages/</p>"},{"location":"javascript/create-react-app/#6-optionally-commit-your-source-code-to-the-master-branch-and-push-your-commit-to-github","title":"6) Optionally, commit your source code to the \"master\" branch and push your commit to GitHub.","text":"<pre><code>$ git add .\n$ git commit -m \"Create a React app and publish it to GitHub Pages\"\n$ git push origin master\n</code></pre> <p>So, the <code>master</code> branch helds the source code, and the <code>gh-pages</code> branch helds the built app code.</p>"},{"location":"javascript/create-react-app/#references","title":"References","text":"<ul> <li>react-gh-pages</li> <li>Create React App</li> </ul>"},{"location":"javascript/expiration-localstorage/","title":"Set expiration time (TTL) for LocalStorage","text":"<p>It's not possible to specify expiration for items saved to a browser LocalStorage. However, we can use Javascript to add a TTL (Time To Live) to invalidate items in localStorage after a certain period of time elapses.</p>"},{"location":"javascript/expiration-localstorage/#storing-items-with-expiration-time","title":"Storing items with expiration time","text":"<p>Set a key in localStorage, and store the expiration time along with it:</p> <pre><code>function setWithExpiry(key, value, ttl) {\n    const now = new Date()\n\n    // item is an object which contains the original value as well as the time when it's supposed to expire\n    const item = {\n        value: value,\n        expiry: now.getTime() + ttl,\n    }\n    localStorage.setItem(key, JSON.stringify(item))\n}\n</code></pre>"},{"location":"javascript/expiration-localstorage/#storing-items-with-expiration-time_1","title":"Storing items with expiration time","text":"<p>Verify the expiration time while retrieving items from localStorage:</p> <pre><code>function getWithExpiry(key) {\n    const itemStr = localStorage.getItem(key)\n    // if the item doesn't exist, return null\n    if (!itemStr) {\n        return null\n    }\n    const item = JSON.parse(itemStr)\n    const now = new Date()\n    // compare the expiry time of the item with the current time\n    if (now.getTime() &gt; item.expiry) {\n        // If the item is expired, delete the item from storage and return null\n        localStorage.removeItem(key)\n        return null\n    }\n    return item.value\n}\n</code></pre>"},{"location":"javascript/expiration-localstorage/#references","title":"References","text":"<ul> <li>How to Set Expiry Time (TTL) for LocalStorage With Javascript</li> </ul>"},{"location":"javascript/filter-search/","title":"Filter, sort and layout","text":""},{"location":"javascript/filter-search/#using-a-js-library","title":"Using a JS library:","text":"<ul> <li>List JS</li> <li>Isotope</li> <li>SortableJS</li> <li>Magnet</li> <li>Muuri</li> </ul>"},{"location":"javascript/filter-search/#from-scratch","title":"From scratch:","text":""},{"location":"javascript/filter-search/#for-a-table","title":"For a table","text":"<p>1) HTML </p> <pre><code>&lt;input type=\"text\" id=\"myInput\" onkeyup=\"myFunction()\" placeholder=\"Search for names..\"&gt;\n\n&lt;table id=\"myTable\"&gt;\n  &lt;tr class=\"header\"&gt;\n    &lt;th style=\"width:60%;\"&gt;Name&lt;/th&gt;\n    &lt;th style=\"width:40%;\"&gt;Country&lt;/th&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Alfreds Futterkiste&lt;/td&gt;\n    &lt;td&gt;Germany&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Berglunds snabbkop&lt;/td&gt;\n    &lt;td&gt;Sweden&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Island Trading&lt;/td&gt;\n    &lt;td&gt;UK&lt;/td&gt;\n  &lt;/tr&gt;\n  &lt;tr&gt;\n    &lt;td&gt;Koniglich Essen&lt;/td&gt;\n    &lt;td&gt;Germany&lt;/td&gt;\n  &lt;/tr&gt;\n&lt;/table&gt;\n</code></pre> <p>2) CSS </p> <pre><code>#myInput {\n    background-image: url('/css/searchicon.png'); /* Add a search icon to input */\n    background-position: 10px 12px; /* Position the search icon */\n    background-repeat: no-repeat; /* Do not repeat the icon image */\n    width: 100%; /* Full-width */\n    font-size: 16px; /* Increase font-size */\n    padding: 12px 20px 12px 40px; /* Add some padding */\n    border: 1px solid #ddd; /* Add a grey border */\n    margin-bottom: 12px; /* Add some space below the input */\n}\n\n#myTable {\n    border-collapse: collapse; /* Collapse borders */\n    width: 100%; /* Full-width */\n    border: 1px solid #ddd; /* Add a grey border */\n    font-size: 18px; /* Increase font-size */\n}\n\n#myTable th, #myTable td {\n    text-align: left; /* Left-align text */\n    padding: 12px; /* Add padding */\n}\n\n#myTable tr {\n    /* Add a bottom border to all table rows */\n    border-bottom: 1px solid #ddd; \n}\n\n#myTable tr.header, #myTable tr:hover {\n    /* Add a grey background color to the table header and on hover */\n    background-color: #f1f1f1;\n}\n</code></pre> <p>3) Javascript </p> <pre><code>&lt;script&gt;\nfunction myFunction() {\n  // Declare variables \n  var input, filter, table, tr, td, i;\n  input = document.getElementById(\"myInput\");\n  filter = input.value.toUpperCase();\n  table = document.getElementById(\"myTable\");\n  tr = table.getElementsByTagName(\"tr\");\n\n  // Loop through all table rows, and hide those who don't match the search query\n  for (i = 0; i &lt; tr.length; i++) {\n    td = tr[i].getElementsByTagName(\"td\")[0];\n    if (td) {\n      if (td.innerHTML.toUpperCase().indexOf(filter) &gt; -1) {\n        tr[i].style.display = \"\";\n      } else {\n        tr[i].style.display = \"none\";\n      }\n    } \n  }\n}\n&lt;/script&gt;\n</code></pre> <ul> <li> <p>Remove <code>toUpperCase()</code> if you want to perform a case-sensitive search.</p> </li> <li> <p>Change <code>tr[i].getElementsByTagName('td')[0]</code> to <code>[1]</code> if you want to search for \"Country\" (index 1) instead of \"Name\" (index 0).</p> </li> </ul>"},{"location":"javascript/filter-search/#for-a-list","title":"For a list","text":"<p>1) HTML </p> <pre><code>&lt;input type=\"text\" id=\"myInput\" onkeyup=\"myFunction()\" placeholder=\"Search for names..\"&gt;\n\n&lt;ul id=\"myUL\"&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Adele&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Agnes&lt;/a&gt;&lt;/li&gt;\n\n  &lt;li&gt;&lt;a href=\"#\"&gt;Billy&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Bob&lt;/a&gt;&lt;/li&gt;\n\n  &lt;li&gt;&lt;a href=\"#\"&gt;Calvin&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Christina&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"#\"&gt;Cindy&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre> <p>2) CSS </p> <pre><code>#myInput {\n    background-image: url('/css/searchicon.png'); /* Add a search icon to input */\n    background-position: 10px 12px; /* Position the search icon */\n    background-repeat: no-repeat; /* Do not repeat the icon image */\n    width: 100%; /* Full-width */\n    font-size: 16px; /* Increase font-size */\n    padding: 12px 20px 12px 40px; /* Add some padding */\n    border: 1px solid #ddd; /* Add a grey border */\n    margin-bottom: 12px; /* Add some space below the input */\n}\n\n#myUL {\n    /* Remove default list styling */\n    list-style-type: none;\n    padding: 0;\n    margin: 0;\n}\n\n#myUL li a {\n    border: 1px solid #ddd; /* Add a border to all links */\n    margin-top: -1px; /* Prevent double borders */\n    background-color: #f6f6f6; /* Grey background color */\n    padding: 12px; /* Add some padding */\n    text-decoration: none; /* Remove default text underline */\n    font-size: 18px; /* Increase the font-size */\n    color: black; /* Add a black text color */\n    display: block; /* Make it into a block element to fill the whole list */\n}\n\n#myUL li a:hover:not(.header) {\n    background-color: #eee; /* Add a hover effect to all links, except for headers */\n}\n</code></pre> <p>3) Javascript </p> <pre><code>&lt;script&gt;\nfunction myFunction() {\n    // Declare variables\n    var input, filter, ul, li, a, i;\n    input = document.getElementById('myInput');\n    filter = input.value.toUpperCase();\n    ul = document.getElementById(\"myUL\");\n    li = ul.getElementsByTagName('li');\n\n    // Loop through all list items, and hide those who don't match the search query\n    for (i = 0; i &lt; li.length; i++) {\n        a = li[i].getElementsByTagName(\"a\")[0];\n        if (a.innerHTML.toUpperCase().indexOf(filter) &gt; -1) {\n            li[i].style.display = \"\";\n        } else {\n            li[i].style.display = \"none\";\n        }\n    }\n}\n&lt;/script&gt;\n</code></pre>"},{"location":"javascript/modern-js/","title":"Modern JavaScript","text":"<p>Index:   * Imports and exports   * Variables   * Equality and inequality comparisons   * String interpolation   * For-Of loops   * Arrow Functions   * Promises   * Async and await   * Spread operator   * Classes   * Reference</p>"},{"location":"javascript/modern-js/#imports-and-exports","title":"Imports and exports","text":"<p>With modern JavaScript front end frameworks, applications can now use a dependency model that is based on imports and exports. A JavaScript module that wants to make a function or variable available for other modules to use, can declare it as a default export. Let's say there is a <code>cool.js</code> module with <code>myCoolFunction()</code> inside. Here is how this module could be written:</p> <pre><code>export default function myCoolFunction() {\n  console.log('this is cool!');\n}\n</code></pre> <p>Any other module that wants to use the function can then import it:</p> <pre><code>import myCoolFunction from './cool';\n</code></pre> <p>In this import, <code>./cool</code> is the path of the dependent module, relative to the location of the importing file. The path can navigate up or down the directory hierarchy as necessary. The <code>.js</code> extension can be included in the import filename, but it is optional.</p> <p>When using default exports, the name of the exported symbol does not really matter. The importing module can use any name it likes. The next example is also valid:</p> <pre><code>import myReallyCoolFunction from './cool';\n</code></pre> <p>Importing from third-party libraries works similarly, but the import location uses the library name instead of a local path. For example, here is how to import the <code>React</code> object:</p> <pre><code>import React from 'react';\n</code></pre> <p>A module can have only one default export, but it can also export additional things. Here is an extension of the above <code>cool.js</code> module with a couple of exported constants:</p> <pre><code>export const PI = 3.14;\nexport const SQRT2 = 1.41;\n\nexport default function myCoolFunction() {\n  console.log('this is cool!');\n}\n</code></pre> <p>To import a non-default export, the imported symbol must be enclosed in <code>{</code> and <code>}</code> braces:</p> <pre><code>import { SQRT2 } from './cool';\n</code></pre> <p>This syntax also allows multiple imports in the same line:</p> <pre><code>import { SQRT2, PI } from './cool';\n</code></pre> <p>Default and non-default symbols can also be included together in a single import line:</p> <pre><code>import myCoolFunction, { SQRT2, PI } from './cool';\n</code></pre>"},{"location":"javascript/modern-js/#variables","title":"Variables","text":"<p>Starting with ES6, the <code>let</code> and <code>const</code> keywords are used for the declaration of variables and constants respectively.</p> <pre><code>let a;\nlet a = 1;\n</code></pre> <p>A constant is a variable that can only be assigned a value when it is declared:</p> <pre><code>const c = 3;\nconsole.log(c); // 3\nc = 4;  // error\n</code></pre>"},{"location":"javascript/modern-js/#equality-and-inequality-comparisons","title":"Equality and inequality comparisons","text":"<p>In general, all equality and inequality comparisons should use the newer operators. Examples:</p> <pre><code>let a = 1;\n\nconsole.log(a === 1);  // true\nconsole.log(a === '1');  // false\nconsole.log(a !== '1');  // true\n</code></pre>"},{"location":"javascript/modern-js/#string-interpolation","title":"String interpolation","text":"<pre><code>const name = 'susan';\nlet greeting = `Hello, ${name}!`;  // \"Hello, susan!\"\n</code></pre>"},{"location":"javascript/modern-js/#for-of-loops","title":"For-Of loops","text":"<p>Older versions of JavaScript only provide strange and contorted ways to iterate over an array of elements, but luckily ES6 introduces the <code>for ... of</code> statement for this purpose.</p> <p>Given an array, a for-loop that iterates over its elements can be constructed as follows:</p> <pre><code>const allTheNames = ['susan', 'john', 'alice'];\nfor (name of allTheNames) {\n  console.log(name);\n}\n</code></pre>"},{"location":"javascript/modern-js/#arrow-functions","title":"Arrow Functions","text":"<p>ES6 introduces an alternative syntax for the definition of functions that is more concise, in addition to having a more consistent behavior for the this variable, compared to the function keyword.</p> <p>Consider the following function, defined in the traditional way:</p> <pre><code>function mult(x, y) {\n  const result = x * y;\n  return result;\n}\n\nmult(2, 3);  // 6\n</code></pre> <p>Using the newer arrow function syntax, the function can be written as follows:</p> <pre><code>const mult = (x, y) =&gt; {\n  const result = x * y;\n  return result;\n};\n\nmult(2, 3);  // 6\n</code></pre> <p>Looking at this it isn't very clear why the arrow syntax is better, but this syntax can be simplified in a few ways. If the function has a single statement instead of two, then the curly braces and the return keyword can be omitted, and the entire function can be written in a single line:</p> <pre><code>const mult = (x, y) =&gt; x * y;\n</code></pre> <p>If the function accepts a single argument instead of two, then the parenthesis can also be omitted:</p> <pre><code>const square = x =&gt; x * x;\n\nsquare(2);  // 4\n</code></pre> <p>When passing a callback function as an argument to another function, the arrow function syntax is more convenient. Consider the following example, shown with traditional and arrow function definitions:</p> <pre><code>longTask(function (result) { console.log(result); });\n\nlongTask(result =&gt; console.log(result));\n</code></pre>"},{"location":"javascript/modern-js/#promises","title":"Promises","text":"<p>A promise is a proxy object that is returned to the caller of an asynchronous operation running in the background. This object can be used by the caller to keep track of the background task and obtain a result from it when it completes.</p> <p>The promise object has <code>then()</code> and <code>catch()</code> methods (among others) that allow the construction of chains of asynchronous operations with solid error handling.</p> <p>Many internal and third-party JavaScript libraries return promises. Here is an example use of the <code>fetch()</code> function to make an HTTP request, and then print the status code of the response:</p> <pre><code>fetch('https://example.com').then(r =&gt; console.log(r.status));\n</code></pre> <p>This executes the HTTP request in the background. When the fetch operation completes, the arrow function passed as an argument to the <code>then()</code> method is invoked with the response object as an argument.</p> <p>Promises can be chained. A common case that requires chaining is when making an HTTP request that returns a response with some data. The following example shows how the request operation is chained to a second background operation that reads and parses JSON data from the server response:</p> <pre><code>fetch('http://example.com/data.json')\n  .then(r =&gt; r.json())\n  .then(data =&gt; console.log(data));\n</code></pre> <p>This is still a single statement, but I have broken it up into multiple lines to increase clarity. Once the <code>fetch()</code> call completes, the callback function passed to the first <code>then()</code> executes with the response object as an argument. This callback function returns <code>r.json()</code>, a method of the response object that also returns a promise. The second <code>then()</code> call is invoked when the second promise completes, receiving the parsed JSON data as an argument.</p> <p>To handle errors, the catch() method can be added to the chain:</p> <pre><code>fetch('http://example.com/data.json')\n  .then(r =&gt; r.json())\n  .then(data =&gt; console.log(data))\n  .catch(error =&gt; console.log(`Error: ${error}`));\n</code></pre>"},{"location":"javascript/modern-js/#async-and-await","title":"Async and await","text":"<p>Promises are a nice improvement that help simplify the handling of asynchronous operations, but having to chain several actions in long sequences of <code>then()</code> calls can still generate code that is difficult to read and maintain.</p> <p>In the 2017 revision of ECMAScript, the async and await keywords were introduced as an alternative way to work with promises. Here is the first <code>fetch()</code> example from the previous section once again:</p> <pre><code>fetch('http://example.com/data.json')\n  .then(r =&gt; r.json())\n  .then(data =&gt; console.log(data));\n</code></pre> <p>Using async/await syntax, this can be coded as follows:</p> <pre><code>async function f() {\n  const r = await fetch('https://example.com/data.json');\n  const data = await r.json();\n  console.log(data);\n}\n</code></pre> <p>With this syntax, the asynchronous tasks can be given sequentially, and the resulting code looks very close to how it would be with synchronous function calls. A limitation is that the <code>await</code> keyword can only be used inside functions declared with <code>async</code>.</p> <p>Error handling in async functions can be implemented with try/catch:</p> <pre><code>async function f() {\n  try {\n    const r = await fetch('https://example.com/data.json');\n    const data = await r.json();\n    console.log(data);\n  }\n  catch (error) {\n    console.log(`Error: ${error}`);\n  }\n}\n</code></pre> <p>An interesting feature of functions declared as <code>async</code> is that they are automatically upgraded to return a promise. The <code>f()</code> function above can be chained to additional asynchronous tasks using the <code>then()</code> method if desired:</p> <pre><code>f().then(() =&gt; console.log('done!'));\n</code></pre> <p>Or of course, it can also be awaited if the calling function is also <code>async</code>:</p> <pre><code>async function g() {\n  await f();\n  console.log('done!');\n}\n</code></pre> <p>The arrow function syntax can also be used with <code>async</code> functions:</p> <pre><code>const g = async () =&gt; {\n  await f();\n  console.log('done!');\n};\n</code></pre>"},{"location":"javascript/modern-js/#spread-operator","title":"Spread operator","text":"<p>The spread operator (<code>...</code>) can be used to expand an array or object in place. </p> <pre><code>const a = [5, 3, 9, 2, 7];\nconsole.log(Math.min(...a));  // 2\n</code></pre> <p>The basic idea is that the <code>...a</code> expression expands the contents of <code>a</code>, so the <code>Math.min()</code> function receives five independent arguments instead of single array argument.</p> <p>The spread operator can also be used to create a new array by mixing another array with new elements:</p> <p><pre><code>const a = [5, 3, 9, 2, 7];\nconst b = [10, ...a, 8, 0];  // [10, 5, 3, 9, 2, 7, 8, 0]\n</code></pre> It also allows for a simple way to do a shallow copy of an array:</p> <p><pre><code>const c = [...a];  // [5, 3, 9, 2, 7]\n</code></pre> The spread syntax also works with objects:</p> <pre><code>const d = {name: 'susan'};\nconst e = {...d, age: 20};  // {name: 'susan', age: 20}\nconst f = {...d};  // {name: 'susan'}\n</code></pre> <p>An interesting usage of the spread operator on objects is to make partial updates:</p> <pre><code>const user = {name: 'susan', age: 20};\nconst new_user = {...user, age: 21};  // {name: 'susan', age: 21}\n</code></pre> <p>Here, the collision that occurs when having two values for the age key is resolved by using the version that appears last.</p>"},{"location":"javascript/modern-js/#classes","title":"Classes","text":"<p>A big omission in the earlier versions of the JavaScript language up to, and including ES5 is classes, which are the core component of object-oriented programming. Below you can see an example of an ES6-style class:</p> <pre><code>class User {\n  constructor(name, age, active) {  // constructor\n    this.name = name;\n    this.age = age;\n    this.active = active;\n  }\n\n  isActive() {  // standard method\n    return this.active;\n  }\n\n  async read() {  // async method\n    const r = await fetch(`https://example.org/user/${this.name}`);\n    const data = await r.json();\n    return data;\n  }\n}\n</code></pre> <p>To create an instance of a class, the new keyword is used:</p> <pre><code>const user = new User('susan', 20, true);\n</code></pre>"},{"location":"javascript/modern-js/#reference","title":"Reference","text":"<p>The React Mega-Tutorial by Miguel Grinberg</p>"},{"location":"javascript/react/","title":"React","text":"<p>React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \"components\".</p>"},{"location":"javascript/react/#index","title":"Index","text":"<ul> <li>Setup</li> <li>Project structure</li> <li>Add fonts</li> <li>References</li> </ul>"},{"location":"javascript/react/#setup","title":"Setup","text":"<p>Best way to set up React is via NodeJS package manager <code>npm</code>. Go to nodejs.org and download NodeJS (LTS version is recommended). It is also recommended to install React Developer Tools</p> <p>To start a project we use the <code>create-react-app</code> tool. By using <code>npx</code> we run the <code>create-react-app</code> script without installing. Using <code>npm</code> will install the <code>create-react-app</code> package globally.</p> <pre><code>mkdir my-app\nnpx create-react-app .\nnpm start\n</code></pre> <p>This creates the following project structure:</p> <p><pre><code>my-app\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 node_modules\n\u251c\u2500\u2500 package.json           &lt;-- app info and dependencies\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 favicon.ico\n\u2502   \u251c\u2500\u2500 index.html         &lt;-- main webpage where React is outputed\n\u2502   \u2514\u2500\u2500 manifest.json\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 App.css\n    \u251c\u2500\u2500 App.js             &lt;-- App component\n    \u251c\u2500\u2500 App.test.js\n    \u251c\u2500\u2500 index.css\n    \u251c\u2500\u2500 index.js           &lt;-- React entry point\n    \u251c\u2500\u2500 logo.svg\n    \u2514\u2500\u2500 serviceWorker.js\n ```\n\n\n## Project structure\n\nThere is no recommended way to structure React projects. The simplest way is to create a components folder to store all component files, however the most common approaches rely on grouping files by features or routes, or grouping by file type.\n\nComponents folder:\n</code></pre> src/     components/       Avatar.js       Avatar.css       Feed.js       Feed.css       FeedStory.js       FeedStory.test.js       Profile.js       ProfileHeader.js       ProfileHeader.css <pre><code>Grouping by features or routes:\n</code></pre> src/     common/       Avatar.js       Avatar.css       APIUtils.js       APIUtils.test.js     feed/       index.js       Feed.js       Feed.css       FeedStory.js       FeedStory.test.js       FeedAPI.js     profile/       index.js       Profile.js       ProfileHeader.js       ProfileHeader.css       ProfileAPI.js <pre><code>Grouping by file type:\n</code></pre> src/     api/       APIUtils.js       APIUtils.test.js       ProfileAPI.js       UserAPI.js     components/       Avatar.js       Avatar.css       Feed.js       Feed.css       FeedStory.js       FeedStory.test.js       Profile.js       ProfileHeader.js       ProfileHeader.css <pre><code>For instance, an utilities folder can be placed as:\n</code></pre> src/     components/     utils/         utilFunctions.js <pre><code>Make sure to export functions like this:\n</code></pre> export function func1() {</p> <p>}</p> <p>export function func2() {</p> <p>} <pre><code>Then import them like so:\n</code></pre> import { func1, func2 } from './utils' <pre><code>## Add fonts\n\nDownload the font and move it to the `fonts` directory in your `src` directory. Now, in `App.css`, add:\n```css\n@font-face {\n  font-family: 'Lato';\n  src: local('Lato'), url(./fonts/Lato-Regular.otf) format('opentype');\n}\n\n@font-face {\n    font-family: 'Lato';\n    font-weight: 900;\n    src: local('Lato'), url(./fonts/Lato-Bold.otf) format('opentype');\n}\n</code></pre></p> <p>For <code>ttf</code> format, you have to mention <code>format('truetype')</code>. For <code>woff</code>, <code>format('woff')</code>. Now you can use the font in classes:</p> <pre><code>.modal-title {\n    font-family: Lato, Arial, serif;\n    font-weight: black;\n}\n</code></pre>"},{"location":"javascript/react/#components","title":"Components","text":""},{"location":"javascript/react/#class-components","title":"Class components","text":"<pre><code>import React from 'react';\n\nclass Welcome extends React.Component {\n\n    constructor(props) {\n    super(props);\n    this.state = {\n      var1: false\n    }\n\n    this.handleClick = this.handleClick.bind(this);\n    }\n\n    this.handleClick(envent) {\n        // Do something when button is clicked\n    }\n\n    render() {\n        // Can do something\n        return (\n            &lt;button onClick={this.handleClick}&gt;Hello, {this.props.name}&lt;/button&gt;\n        );\n    }\n}\n\nexport default Welcome;\n</code></pre>"},{"location":"javascript/react/#functional-components","title":"Functional components","text":"<pre><code>import React from 'react';\n\nfunction Welcome(props) {\n  // You can use Hooks here!\n  return &lt;div /&gt;;\n}\n\nexport default Welcome;\n</code></pre>"},{"location":"javascript/react/#references","title":"References","text":"<ul> <li>React folder structure</li> <li>React Docs on file structure</li> <li>React boilerplate example</li> </ul>"},{"location":"latex/beamer/","title":"Create LaTeX presentations with Beamer","text":""},{"location":"latex/beamer/#elements","title":"Elements","text":""},{"location":"latex/beamer/#columns","title":"Columns","text":"<p>Create two columns:</p> <pre><code>\\begin{columns}[T]\n    \\begin{column}{0.48\\textwidth}\n        % content\n    \\end{column}\n    \\begin{column}{0.48\\textwidth}\n        % content\n    \\end{column}\n\\end{columns}\n</code></pre> <p>This will leave <code>0.04\\textwidth</code> of spacing between the columns. The <code>[T]</code> aligns the column content to the top. You can also use <code>c</code> for center and <code>b</code> for bottom.</p>"},{"location":"latex/beamer/#blocks","title":"Blocks","text":"<p>Creating a block environment. </p> <pre><code>\\begin{block}{Block Title}\n    % content\n\\end{block}\n\n\\begin{alertblock}{Block Title}\n    % content\n\\end{alertblock}\n\n\\begin{exampleblock}{Block Title}\n    % content\n\\end{exampleblock}\n</code></pre>"},{"location":"latex/beamer/#formating","title":"Formating","text":"<p>Add vertical space between elements:</p> <pre><code>\\vspace{0.5cm}\n</code></pre> <p>Font size:</p> <pre><code>\\tiny This is tiny font size\n\\scriptsize This is scriptsize font size\n\\footnotesize This is footnotesize font size\n\\small This is small font size\n\\normalsize This is normalsize font size\n\\large This is large font size\n\\Large This is Large font size\n\\LARGE This is LARGE font size\n\\huge This is huge font size\n\\Huge This is Huge font size\n</code></pre>"},{"location":"latex/beamer/#templates","title":"Templates","text":"<p>A good theme compilation can be found at: The Ultimate Beamer Theme List</p> <p>Here are a few select examples:</p> <ul> <li>Metropolis</li> <li>Execushares</li> <li>wildcat</li> <li>ant-center-brief</li> <li>uic-presentation-template</li> </ul>"},{"location":"latex/bibliography/","title":"Bibliography management","text":""},{"location":"latex/bibliography/#using-bibtext-default","title":"Using <code>bibtext</code> (default)","text":"<pre><code>\\bibliographystyle{stylename}\n\\bibliography{bibfile}\n</code></pre> <p>Where <code>bibfile</code> is the name of the bibliography .bib file, without the extension, and <code>stylename</code> is the bibliography style. A simple numeric style is <code>unsrt</code></p>"},{"location":"latex/bibliography/#using-biblatext-package","title":"Using <code>biblatext</code> package","text":"<p><code>biblatext</code> is the most complete and flexible bibliography tool in the LaTeX world.</p> <pre><code>\\documentclass[12pt]{article}\n\n\\usepackage[backend=biber,style=numeric,sorting=ynt]{biblatex}\n\\addbibresource{journals.bib,phd-references.bib}\n\n\\begin{document}\n\n\\cite{robertson2007}\n\\cite{earnshaw1842}\n\n\\printbibliography\n\n\\end{document}\n</code></pre> <p>Where journals.bib and phd-references.bib are BibTeX databases</p>"},{"location":"latex/bibliography/#the-bibliography-database-file-bib","title":"The bibliography database file (<code>.bib</code>)","text":"<pre><code>@article{einstein,\n    author =       \"Albert Einstein\",\n    title =        \"{Zur Elektrodynamik bewegter K{\\\"o}rper}. ({German})\n    [{On} the electrodynamics of moving bodies]\",\n    journal =      \"Annalen der Physik\",\n    volume =       \"322\",\n    number =       \"10\",\n    pages =        \"891--921\",\n    year =         \"1905\",\n    DOI =          \"http://dx.doi.org/10.1002/andp.19053221004\",\n    keywords =     \"physics\"\n}\n\n@book{dirac,\n    title={The Principles of Quantum Mechanics},\n    author={Paul Adrien Maurice Dirac},\n    isbn={9780198520115},\n    series={International series of monographs on physics},\n    year={1981},\n    publisher={Clarendon Press},\n    keywords = {physics}\n}\n\n@online{knuthwebsite,\n    author    = \"Donald Knuth\",\n    title     = \"Knuth: Computers and Typesetting\",\n    url       = \"http://www-cs-faculty.stanford.edu/~uno/abcde.html\",\n    keywords  = \"latex,knuth\"\n}\n\n@inbook{knuth-fa,\n    author = \"Donald E. Knuth\",\n    title = \"Fundamental Algorithms\",\n    publisher = \"Addison-Wesley\",\n    year = \"1973\",\n    chapter = \"1.2\",\n    keywords  = \"knuth,programming\"\n}\n...\n</code></pre>"},{"location":"latex/bibliography/#references","title":"References","text":"<ul> <li>Bibtex bibliography styles - Overleaf</li> <li>Bibliography management with biblatex - Overleaf</li> </ul>"},{"location":"latex/derivatives/","title":"Derivatives","text":"<p>The <code>esdiff</code> package has handy macros for derivatives and partial derivatives, taking care of indices.</p> <pre><code>\\documentclass{article}\n\n\\usepackage[utf8]{inputenc}\n\\usepackage[T1]{fontenc}\n\\usepackage{mathtools}\n\\usepackage[thinc]{esdiff}\n\n\\begin{document}\n\n  First order derivative: df/dx\n\n  \\begin{equation}\n      \\diff{f}{x}\n  \\end{equation}\n\n  Fourth order derivative: d4f/dx4|x=1\n\n  \\begin{equation}\n      \\diff*[4]{f}{x}{x = 1}\n  \\end{equation}\n\n  First order partial derivative:\n\n  \\begin{equation}\n      \\diffp{f}{x}\n  \\end{equation}\n\n  Second order crossed partial derivative\n\n  \\begin{equation}\n    \\diffp{g}{tu}\n  \\end{equation}\n\n\\end{document}\n</code></pre>"},{"location":"latex/derivatives/#references","title":"References:","text":"<ul> <li>Is there a short hand command to write derivatives?</li> </ul>"},{"location":"latex/figures/","title":"Working with figures","text":""},{"location":"latex/figures/#simple-figure","title":"Simple figure","text":"<pre><code>\\begin{figure}[!htbp]\n    \\centering\n    \\includegraphics{path/to/figure.pdf}\n    \\caption{Figure caption here.}\n    \\label{fig:fig-label}\n\\end{figure}\n</code></pre> <p>The <code>!htbp</code> forces the image position.</p>"},{"location":"latex/figures/#figures-side-by-side","title":"Figures side by side","text":"<pre><code>\\usepackage{graphicx}\n\\usepackage{caption}\n\\usepackage{subcaption}\n\n\n\\begin{figure}\n    \\centering\n    \\begin{subfigure}{0.45\\textwidth}\n        \\includegraphics{fig1.pdf}\n        \\label{fig:fig1}\n        \\caption{fig1 caption}\n    \\end{subfigure}\n\n    \\begin{subfigure}{0.45\\textwidth}\n        \\centering\n        \\includegraphics{fig2.pdf}\n        \\label{fig:fig2}\n        \\caption{fig2 caption}\n    \\end{subfigure}\n    \\caption{global caption}\n\\end{figure}\n</code></pre>"},{"location":"latex/latex-intro/","title":"An Introduction to LaTeX","text":""},{"location":"latex/latex-intro/#managing-large-documents","title":"Managing large documents","text":"<p>For smaller projects it is okay to keep everything in a single <code>.tex</code> file. For more involved projects this approach quickly becomes cumbersome. The <code>\\include</code> command makes it possible to break your document down into smaller chunks. Working with smaller chunks is more manageable. An example structure for a thesis project could look like the following:</p> <pre><code>thesis/\n|-- thesis.tex\n|-- chapters/\n    |-- chapter_1.tex\n    |-- chapter_2.tex\n    |-- chapter_3.tex\n|-- internal/\n    |-- preamble.tex\n|-- fig/\n    |-- science.png\n|-- references.bib\n</code></pre> <p>Example <code>thesis.tex</code>:</p> <pre><code>\\documentclass[12pt]{report}\n\n\\include{internal/preamble}\n\n\\begin{document}\n\n\\include{chapters/chapter _1}\n\\include{chapters/chapter _2}\n\\include{chapters/chapter _3}\n\n\\bibliography{references}\n\n\\end{document}\n</code></pre> <p>Example <code>internal/preamble.tex</code>:</p> <pre><code>% Preamble, packages, commands, etc .\n\\ usepackage{microtype}\n\\ usepackage{booktabs}\n\\ usepackage{cleveref}\n\\ usepackage{graphicx}\n\n% Make it easier to include figures\n\\graphicspath{{fig/}}\n</code></pre> <p>Example <code>chapters/chapter_1.tex</code>:</p> <pre><code>\\chapter{Literature review}\n\\label{cha:lit _ review}\n\nHere's stuff others did which I don't really understand \\ldots\n</code></pre>"},{"location":"latex/latex-intro/#custom-commands","title":"Custom commands","text":""},{"location":"latex/latex-intro/#simple-macros","title":"Simple macros","text":"<p>Used to simplify repetitive and/or complex formatting. Usually specified in the preamble:</p> <pre><code>\\newcommand{\\name}{definition}\n</code></pre>"},{"location":"latex/latex-intro/#macros-with-parameters","title":"Macros with parameters","text":"<pre><code>\\newcommand{\\name}[#params]{definition}\n</code></pre> <p>For example: </p> <pre><code>\\newcommand{\\bb}[1]{\\mathbb{#1}}\n</code></pre>"},{"location":"latex/latex-intro/#macros-with-default-parameters","title":"Macros with default parameters","text":"<pre><code>\\newcommand{\\name}[# params][default #1]{def.}\n</code></pre> <p>For example: </p> <pre><code>\\newcommand{\\plusbinomial}[3][2]{(#2 + #3)^#1}\n</code></pre>"},{"location":"latex/latex-intro/#references","title":"References","text":"<ul> <li>Preparing your thesis with LaTeX</li> <li>Thesis based on Tufte style</li> <li>ClassicThesis \u2013 A \u201cclassically styled\u201d thesis package</li> <li>Entry types which BibTeX understands</li> <li>Plot publication-quality figures with matplotlib and LaTeX</li> </ul>"},{"location":"linux/batch-script/","title":"Create a Windows batch script","text":"<p>A batch file is a text file with the extension .bat that contains one or more command line commands to be run consecutively. </p>"},{"location":"linux/batch-script/#some-usefull-commands","title":"Some usefull commands:","text":"<p>@echo - This parameter will allow you to view your working script in the command prompt. This parameter is useful for viewing your working code. If any issues arise from the batch file, you will be able to view the issues associated with your script using the echo function. Adding a following off to this parameter will allow you to quickly close your script after it has finished.</p> <p>title - This will provide a title for your batch script in your Command Prompt window.</p> <p>cls - Clears your command prompt, best used when extraneous code can make what you\u2019re accessing had to find.</p> <p>rem OR :: - Shorthand for remark. Rem statements are not entered into your code. Instead, they are used to explain and give information regarding the code.</p> <p>%%a - Each file in the folder.</p> <p>(\u201c.\\\u201d) - The root folder. When using the command prompt, one must direct the prompt to a particular directory before changing a files name, deleting a file, and so on. With batch files, you only need to paste your .bat file into the directory of your choosing.</p> <p>pause - Allows a break in the logical chain of your .bat file. This allows for users to read over command lines before proceeding with the code. The phrase \u201cPress any key to continue\u2026\u201d will denote a pause.</p> <p>start \u201c\u201d [website] - Will head to a website of your choice using your default web browser.</p> <p>A complete list can be found here.</p>"},{"location":"linux/batch-script/#useful-batch-files","title":"Useful batch files:","text":""},{"location":"linux/batch-script/#start-flask-server","title":"Start Flask server","text":"<p>The following script starts a Flask development server provided the batch file is located in the project root directory.</p> <pre><code>echo off\ncd %localhost%\ncall venv\\Scripts\\activate.bat\nstart python dashboard\\__init__.py\npause\n</code></pre>"},{"location":"linux/crontab/","title":"Linux Crontab","text":"<p>To view currently active crontab entries: <code>$ sudo crontab -l</code></p> <p>To enter the edit the crontab enter the following command in the terminal: <code>$ sudo crontab -e</code></p> <p>Note: Don't use <code>sudo</code> in a cron job. Instead edit root's crontab instead of your own, e.g. <code>sudo crontab -e</code> and then enter commands without <code>sudo</code>.</p> <p>At the bottom of the file enter one line for each task in the following format:</p> <pre><code>Minute   Hour   Day of Month       Month          Day of Week        Command    \n(0-59)  (0-23)     (1-31)    (1-12 or Jan-Dec)  (0-6 or Sun-Sat)               \n</code></pre> <p>The command must use a complete link. Instead of the first five fields, one of eight special strings may appear:</p> string meaning @reboot Run once, at startup. @yearly Run once a year, \"0 0 1 1 *\". @annually (same as @yearly) @monthly Run once a month, \"0 0 1 * *\". @weekly Run once a week, \"0 0 * * 0\". @daily Run once a day, \"0 0 * * *\". @midnight (same as @daily) @hourly Run once an hour, \"0 * * * *\"."},{"location":"linux/crontab/#example-1-run-a-python-script-every-day-a-1615","title":"Example 1: Run a python script every day a 16:15","text":"<pre><code>15 16 * * * sudo python /home/pi/projects/script1.py\n</code></pre>"},{"location":"linux/crontab/#example-2-run-a-python-script-every-five-days-a-1830","title":"Example 2: Run a python script every five days a 18:30","text":"<pre><code>30 18 */5 * * sudo python /home/pi/projects/script1.py\n</code></pre>"},{"location":"linux/crontab/#crontab-log","title":"Crontab log","text":"<p>On a default installation the cron jobs get logged to <pre><code>$ /var/log/syslog\n</code></pre></p> <p>You can see just cron jobs in that logfile by running <pre><code>$ grep CRON /var/log/syslog\n</code></pre></p>"},{"location":"linux/crontab/#helpfull-links","title":"Helpfull links:","text":"<p>https://crontab.guru</p>"},{"location":"linux/django-production-server/","title":"Set up a Django production server with gunicorn","text":"<p>We are going to set up a production ready Django server using Gunicorn and manage it using systemd. </p>"},{"location":"linux/django-production-server/#1-install-gunicorn","title":"1) Install Gunicorn","text":"<p>Inside the virtual environment with Django and all other required packages for your project run:</p> <pre><code>$ pip install gunicorn\n</code></pre>"},{"location":"linux/django-production-server/#2-configure-gunicorn","title":"2) Configure Gunicorn","text":"<p>In your project directory, create a file named <code>gunicorn_config.py</code> with the Gunicorn configuration for your Django project:</p> <pre><code>import multiprocessing\n\nbind = \"127.0.0.1:8000\"  # Replace with your desired IP and port\nworkers = multiprocessing.cpu_count() * 2 + 1\nworker_class = \"gthread\"\nthreads = 2\ntimeout = 60\n</code></pre> <p>To test that Gunicorn can serve your Django app run:</p> <pre><code>$ gunicorn -c gunicorn_config.py myproject.wsgi\n</code></pre> <p>If Gunicorn starts without errors, it's working correctly. You can stop it by pressing <code>Ctrl + C</code>.</p>"},{"location":"linux/django-production-server/#3-create-a-systemd-service","title":"3) Create a <code>systemd</code> service","text":"<p>Create a <code>systemd</code> service file to manage the Gunicorn process. Use a text editor to create a file named <code>myproject_gunicorn.service</code> in the <code>/etc/systemd/system/</code> directory:</p> <pre><code>$ sudo nano /etc/systemd/system/myproject_gunicorn.service\n</code></pre> <p>Add the following content to the file, adjusting the paths and configuration as neede. Replace <code>your_username</code>, <code>your_group</code>, <code>/path/to/your/project</code>, and <code>/path/to/your/virtualenv</code> with your actual information.</p> <pre><code>[Unit]\nDescription=Gunicorn daemon for myproject\nAfter=network.target\n\n[Service]\nUser=your_username\nGroup=your_group\nWorkingDirectory=/path/to/your/project\nExecStart=/path/to/your/virtualenv/bin/gunicorn -c gunicorn_config.py myproject.wsgi\nRestart=always\n\n[Install]\nWantedBy=multi-user.target\n</code></pre>"},{"location":"linux/django-production-server/#4-enable-and-start-the-systemd-service","title":"4) Enable and start the <code>systemd</code> service","text":"<p>Enable the systemd service and start Gunicorn:</p> <pre><code>$ sudo systemctl enable myproject_gunicorn\n$ sudo systemctl start myproject_gunicorn\n</code></pre> <p>Check the status of the Gunicorn service to make sure it's running without errors:</p> <pre><code>$ sudo systemctl status myproject_gunicorn\n</code></pre> <p>If everything is configured correctly, your Django application should now be running in production using Gunicorn and managed by systemd. You can access it through the specified IP and port. Make sure to configure your web server (e.g., Nginx or Apache) as a reverse proxy to forward requests to Gunicorn for better security and performance in a production environment.</p>"},{"location":"linux/django-production-server/#references","title":"References","text":"<ul> <li>https://dev.to/karthiknarayan/setting-up-django-for-production-using-gunicorn-on-linux-37ce</li> </ul>"},{"location":"linux/keep-scripts-running-ssh/","title":"Keep processes running and closing SSH connection","text":"<p>The are several alternatives. Here we cover <code>nohup</code> and <code>tmux</code>.</p>"},{"location":"linux/keep-scripts-running-ssh/#using-nohup","title":"Using <code>nohup</code>","text":"<p><pre><code>$ nohup long-running-command &amp;\n</code></pre> It logs <code>stdout</code> to <code>nohup.log</code>.</p>"},{"location":"linux/keep-scripts-running-ssh/#using-tmux","title":"Using <code>tmux</code>","text":"<p>1) SSH into the remote machine.</p> <p>2) Install <code>tmux</code>: <pre><code>$ apt install tmux\n</code></pre></p> <p>3) Start <code>tmux</code>: <pre><code>$ tmux\n</code></pre></p> <p>4) Start the process you want inside the started <code>tmux</code> session.</p> <p>5) Leave/detach the <code>tmux</code> session by typing <code>Ctrl+b</code> and then <code>d</code>.</p> <p>6) You can now safely log off from the remote machine, your process will keep running inside <code>tmux</code>.</p> <p>7) When you come back again and want to check the status of your process you can attach to your tmux session using: <pre><code>$ tmux attach\n</code></pre></p> <p>If you want to have multiple sessions running side-by-side, you should name each session using <code>Ctrl+b</code> and <code>$</code>. </p> <p>You can get a list of the currently running sessions using: <pre><code>$ tmux list-sessions\n</code></pre> or  <pre><code>$ tmux ls\n</code></pre></p> <p>To attach to a running session with use: <pre><code>$ tmux attach-session -t &lt;session-name&gt;\n</code></pre></p>"},{"location":"linux/keep-ssh-running/","title":"Keep SSH sessions running after disconnecting","text":""},{"location":"linux/keep-ssh-running/#using-nohup","title":"Using nohup","text":"<pre><code>$ nohup long-running-process &amp;\n$ exit\n</code></pre>"},{"location":"linux/keep-ssh-running/#using-gnu-screen","title":"Using GNU Screen","text":"<pre><code>$ screen             # to start a screen session\n$ run-a-process\nCTRL+a , d           # to detatch from your screen session\n$ exit               # to disconnect from the server, while run-a-process continues\n$ screen -r          # to resume the screen session when you come back to your laptop\n</code></pre>"},{"location":"linux/keep-ssh-running/#using-tmux","title":"Using tmux","text":"<pre><code>$ tmux               # to start a screen session\n$ run-a-process\nCtrl+b then d        # to detatch from your session\n$ tmux attach        # to resume the session when you come back to your laptop\n</code></pre>"},{"location":"linux/linux-terminal-cheatsheet/","title":"Ubuntu CLI cheat sheet","text":""},{"location":"linux/linux-terminal-cheatsheet/#system","title":"System","text":""},{"location":"linux/linux-terminal-cheatsheet/#system-information","title":"System information","text":"<p><code>uname -a</code>: Displays all system information.</p> <p><code>hostnamectl</code>: Shows current hostname and related details.</p> <p><code>lscpu</code>: Lists CPU architecture information.</p> <p><code>timedatectl status</code>: Shows system time.</p>"},{"location":"linux/linux-terminal-cheatsheet/#system-monitoring-and-management","title":"System monitoring and management","text":"<p><code>top</code>: Displays real-time system processes.</p> <p><code>htop</code>: An interactive process viewer (needs installation).</p> <p><code>df -h</code>: Shows disk usage in a human-readable format.</p> <p><code>free -m</code>: Displays free and used memory in MB.</p> <p><code>kill &lt;process id&gt;</code>: Terminates a process.</p>"},{"location":"linux/linux-terminal-cheatsheet/#running-commands","title":"Running commands","text":"<p><code>&lt;command&gt; &amp;</code>: Runs command in the background.</p> <p><code>jobs</code>: Displays background commands.</p> <p><code>fg &lt;command number&gt;</code>: Brings command to the foreground.</p>"},{"location":"linux/linux-terminal-cheatsheet/#service-management","title":"Service management","text":"<p><code>sudo systemctl start &lt;service&gt;</code>: Starts a service.</p> <p><code>sudo systemctl stop &lt;service&gt;</code>: Stops a service.</p> <p><code>sudo systemctl status &lt;service&gt;</code>: Checks the status of a service.</p> <p><code>sudo systemctl reload &lt;service&gt;</code>: Reloads a service\u2019s configuration without `interrupting its operation.</p> <p><code>journalctl -f</code>: Follows the journal, showing new log messages in real time.</p> <p><code>journalctl -u &lt;unit_name&gt;</code>: Displays logs for a specific systemd unit.</p>"},{"location":"linux/linux-terminal-cheatsheet/#cron-jobs-and-scheduling","title":"Cron jobs and scheduling","text":"<p><code>crontab -e</code>: Edits cron jobs for the current user.</p> <p><code>crontab -l</code>: Lists cron jobs for the current user.</p>"},{"location":"linux/linux-terminal-cheatsheet/#files","title":"Files","text":""},{"location":"linux/linux-terminal-cheatsheet/#file-management","title":"File management","text":"<p><code>ls</code>: Lists files and directories.</p> <p><code>touch &lt;filename&gt;</code>: Creates an empty file or updates the last accessed date.</p> <p><code>cp &lt;source&gt; &lt;destination&gt;</code>: Copies files from source to destination.</p> <p><code>mv &lt;source&gt; &lt;destination&gt;</code>: Moves files or renames them.</p> <p><code>rm &lt;filename&gt;</code>: Deletes a file.</p>"},{"location":"linux/linux-terminal-cheatsheet/#directory-navigation","title":"Directory navigation","text":"<p><code>pwd</code>: Displays the current directory path.</p> <p><code>cd &lt;directory&gt;</code>: Changes the current directory.</p> <p><code>mkdir &lt;dirname&gt;</code>: Creates a new directory.</p>"},{"location":"linux/linux-terminal-cheatsheet/#file-permissions-and-ownership","title":"File permissions and ownership","text":"<p><code>chmod [who][+/-][permissions] &lt;file&gt;</code>: Changes file permissions.</p> <p><code>chmod u+x &lt;file&gt;</code>: Makes a file executable by its owner.</p> <p><code>chown [user]:[group] &lt;file&gt;</code>: Changes file owner and group.</p>"},{"location":"linux/linux-terminal-cheatsheet/#searching-and-finding","title":"Searching and finding","text":"<p><code>find [directory] -name &lt;search_pattern&gt;</code>: Finds files and directories.</p> <p><code>grep &lt;search_pattern&gt; &lt;file&gt;</code>: Searches for a pattern in files.</p>"},{"location":"linux/linux-terminal-cheatsheet/#archiving-and-compression","title":"Archiving and compression","text":"<p><code>tar -czvf &lt;name.tar.gz&gt; [files]</code>: Compresses files into a tar.gz archive.</p> <p><code>tar -xvf &lt;name.tar.[gz|bz|xz]&gt; [destination]</code>: Extracts a compressed tar archive.</p>"},{"location":"linux/linux-terminal-cheatsheet/#text-editing-and-processing","title":"Text editing and processing","text":"<p><code>nano &lt;file&gt;</code>: Opens a file in the Nano text editor.</p> <p><code>cat &lt;file&gt;</code>: Displays the contents of a file.</p> <p><code>less &lt;file&gt;</code>: Displays the paginated content of a file.</p> <p><code>head &lt;file&gt;</code>: Shows the first few lines of a file.</p> <p><code>tail &lt;file&gt;</code>: Shows the last few lines of a file.</p> <p><code>awk \u2018{print}\u2019 &lt;file&gt;</code>: Prints every line in a file.</p>"},{"location":"linux/linux-terminal-cheatsheet/#packages","title":"Packages","text":""},{"location":"linux/linux-terminal-cheatsheet/#package-management-apt","title":"Package management (APT)","text":"<p><code>sudo apt install &lt;package&gt;</code>: Installs a package.</p> <p><code>sudo apt install -f \u2013reinstall &lt;package&gt;</code>: Reinstalls a broken package.</p> <p><code>apt search &lt;package&gt;</code>: Searches for APT packages.</p> <p><code>apt-cache policy &lt;package&gt;</code>: Lists available package versions.</p> <p><code>sudo apt update</code>: Updates package lists.</p> <p><code>sudo apt upgrade</code>: Upgrades all upgradable packages.</p> <p><code>sudo apt remove &lt;package&gt;</code>: Removes a package.</p> <p><code>sudo apt purge &lt;package&gt;</code>: Removes a package and all its configuration files.</p>"},{"location":"linux/linux-terminal-cheatsheet/#package-management-snap","title":"Package management (Snap)","text":"<p><code>snap find &lt;package&gt;</code>: Search for Snap packages.</p> <p><code>sudo snap install &lt;snap_name&gt;</code>: Installs a Snap package.</p> <p><code>sudo snap remove &lt;snap_name&gt;</code>: Removes a Snap package.</p> <p><code>sudo snap refresh</code>: Updates all installed Snap packages.</p> <p><code>snap list</code>: Lists all installed Snap packages.</p> <p><code>snap info &lt;snap_name&gt;</code>: Displays information about a Snap package.</p>"},{"location":"linux/linux-terminal-cheatsheet/#users-and-groups","title":"Users and groups","text":""},{"location":"linux/linux-terminal-cheatsheet/#user-management","title":"User management","text":"<p><code>w</code>: Shows which users are logged in.</p> <p><code>sudo adduser &lt;username&gt;</code>: Creates a new user.</p> <p><code>sudo deluser &lt;username&gt;</code>: Deletes a user.</p> <p><code>sudo passwd &lt;username&gt;</code>: Sets or changes the password for a user.</p> <p><code>su &lt;username&gt;</code>: Switches user.</p> <p><code>sudo passwd -l &lt;username&gt;</code>: Locks a user account.</p> <p><code>sudo passwd -u &lt;username&gt;</code>: Unlocks a user password.</p> <p><code>sudo chage &lt;username&gt;</code>: Sets user password expiration date.</p>"},{"location":"linux/linux-terminal-cheatsheet/#group-management","title":"Group management","text":"<p><code>id [username]</code>: Displays user and group IDs.</p> <p><code>groups [username]</code>: Shows the groups a user belongs to.</p> <p><code>sudo addgroup &lt;groupname&gt;</code>: Creates a new group.</p> <p><code>sudo delgroup &lt;groupname&gt;</code>: Deletes a group.</p>"},{"location":"linux/linux-terminal-cheatsheet/#networking","title":"Networking","text":""},{"location":"linux/linux-terminal-cheatsheet/#networking_1","title":"Networking","text":"<p><code>ip addr show</code>: Displays network interfaces and IP addresses.</p> <p><code>ip -s link</code>: Shows network statistics.</p> <p><code>ss -l</code>: Shows listening sockets.</p> <p><code>ping &lt;host&gt;</code>: Pings a host and outputs results.</p>"},{"location":"linux/linux-terminal-cheatsheet/#firewall-management","title":"Firewall management","text":"<p><code>sudo ufw status</code>: Displays the status of the firewall.</p> <p><code>sudo ufw enable</code>: Enables the firewall.</p> <p><code>sudo ufw disable</code>: Disables the firewall.</p> <p><code>sudo ufw allow &lt;port/service&gt;</code>: Allows traffic on a specific port or service.</p> <p><code>sudo ufw deny &lt;port/service&gt;</code>: Denies traffic on a specific port or service.</p> <p><code>sudo ufw delete allow/deny &lt;port/service&gt;</code>: Deletes an existing rule.</p>"},{"location":"linux/linux-terminal-cheatsheet/#ssh-and-remote-access","title":"SSH and remote access","text":"<p><code>ssh &lt;user@host&gt;</code>: Connects to a remote host via SSH.</p> <p><code>scp &lt;source&gt; &lt;user@host&gt;:&lt;destination&gt;</code>: Securely copies files between hosts.</p>"},{"location":"linux/path/","title":"Set <code>$PATH</code> variable in Ubuntu","text":"<p>The <code>$PATH</code> variable is one of the default environment variable in linux (ubuntu). It is used by the shell to look for executable files or commands.</p> <p>One way to permanently add a directory to <code>$PATH</code> environment variable is to use the <code>~/.profile</code> file. Add the following to the <code>~/.profile</code> file to add <code>myNewDir</code> to <code>$PATH</code></p> <pre><code>$ export PATH=$PATH:/myNewDir\n$ source ~/.profile\n</code></pre>"},{"location":"linux/path/#the-source-command","title":"The <code>source</code> command","text":"<p><code>source</code> is a bash shell built-in command that executes the content of the file passed as argument, in the current shell. It has a synonym in <code>.</code> (period). </p> <p>Note that <code>./</code> and <code>source</code> are not quite the same: </p> <ul> <li><code>./script</code> runs the script as an executable file, launching a new shell to run it </li> <li><code>source some_script</code> reads and executes commands from filename in the current shell environment</li> <li><code>source some_script</code> is the same as <code>. some_script</code></li> </ul>"},{"location":"linux/python-raspbian/","title":"Installing Python 3.7 on Raspbian","text":"<p>As of January 2018, Raspbian does not yet include the latest Python release, Python 3.6. This means we will have to build it ourselves, and here is how to do it. There is also an ansible role attached that automates it all for you.</p> <p>1) Install the required build-tools (some might already be installed on your system).</p> <pre><code>$ sudo apt-get update\n$ sudo apt-get install build-essential tk-dev libncurses5-dev libncursesw5-dev libreadline6-dev libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev\n</code></pre> <p>If one of the packages cannot be found, try a newer version number (e.g. <code>libdb5.4-dev</code> instead of <code>libdb5.3-dev</code>).</p> <p>2) Download and install Python 3.6. When downloading the source code, select the most recent release of Python 3.6, available on the official site. Adjust the file names accordingly.</p> <pre><code>$ wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz\n$ tar xf Python-3.7.0.tar.xz\n$ cd Python-3.7.0\n$ ./configure\n$ make\n$ sudo make altinstall\n</code></pre> <p>3) Optionally: Delete the source code and uninstall the previously installed packages. When uninstalling the packages, make sure you only remove those that were not previously installed on your system. Also, remember to adjust version numbers if necesarry.</p> <pre><code>$ sudo rm -r Python-3.7.0\n$ rm Python-3.7.0.tar.xz\n$ sudo apt-get --purge remove build-essential tk-dev\n$ sudo apt-get --purge remove libncurses5-dev libncursesw5-dev libreadline6-dev\n$ sudo apt-get --purge remove libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev\n$ sudo apt-get --purge remove libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev\n$ sudo apt-get autoremove\n$ sudo apt-get clean\n</code></pre>"},{"location":"linux/python-raspbian/#references","title":"References","text":"<ul> <li>https://liudr.wordpress.com/2016/02/04/install-python-on-raspberry-pi-or-debian/</li> <li>https://gist.github.com/BMeu/af107b1f3d7cf1a2507c9c6429367a3b</li> </ul>"},{"location":"linux/raspberrypi/","title":"Set up server in Raspberry Pi","text":""},{"location":"linux/raspberrypi/#set-up-django-web-app-locally","title":"Set up Django web app locally","text":"<p>Find you IP:</p> <pre><code>$ ifconfig\n</code></pre> <p>Run:</p> <pre><code>$ python manage.py runserver 192.XXX.XX.XX:8000\n</code></pre> <p>You should be able to access your web app from any device in the local network.</p> <p>This will keep the web app running while the SSH connection is active. </p> <p>If you want to serve the app continously you can use <code>gunicorn</code>: </p> <pre><code>$ gunicorn --bind 192.XXX.XX.XX:8000 your_project.wsgi --daemon\n</code></pre>"},{"location":"linux/raspberrypi/#references","title":"References","text":"<ul> <li>[stackoverflow](https://stackoverflow.com/questions/13654688/what-is-the-correct-way-to-leave-gunicorn-running)</li> </ul>"},{"location":"linux/server-setup/","title":"Initial Server Setup with Ubuntu 18.04","text":"<p>When first creating a new Ubuntu 18.04 server, there are a few configuration steps that you should take early on as part of the basic setup.</p>"},{"location":"linux/server-setup/#1-creating-a-new-user","title":"1) Creating a New User","text":"<p>Once you are logged in as root, we're prepared to add the new user (synergix) account that we will use to log in from now on.</p> <p><code>adduser synergix</code></p> <p>Enter a strong password and, optionally, fill in any of the additional information if you would like. This is not required and you can just hit ENTER in any field you wish to skip.</p>"},{"location":"linux/server-setup/#2-granting-administrative-privileges","title":"2) Granting Administrative Privileges","text":"<p>Set up what is known as \"superuser\" or root privileges for our normal account. This will allow our normal user to run commands with administrative privileges by putting the word <code>sudo</code> before each command. As root, run this command to add your new user to the sudo group:</p> <p><code>usermod -aG sudo synergix</code></p>"},{"location":"linux/server-setup/#3-setting-up-a-basic-firewall","title":"3) Setting Up a Basic Firewall","text":"<p>Ubuntu 18.04 servers can use the UFW firewall to make sure only connections to certain services are allowed. We can set up a basic firewall very easily using this application.</p> <p>Different applications can register their profiles with UFW upon installation. These profiles allow UFW to manage these applications by name. OpenSSH, the service allowing us to connect to our server now, has a profile registered with UFW. You can see this by typing:</p> <p><code>ufw app list</code></p> <p>Afterwards, we can enable the firewall by typing:</p> <p><code>ufw enable</code></p> <p>Type \"y\" and press ENTER to proceed. You can see that SSH connections are still allowed by typing:</p> <p><code>ufw status</code></p> <p>As the firewall is currently blocking all connections except for SSH, if you install and configure additional services, you will need to adjust the firewall settings to allow acceptable traffic in. More info here: https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands</p>"},{"location":"linux/server-setup/#4-enabling-external-access-for-your-regular-user","title":"4) Enabling External Access for Your Regular User","text":"<p>Now that we have a regular user for daily use, we need to make sure we can SSH into the account directly. The process for configuring SSH access for your new user depends on whether your server's root account uses a password or SSH keys for authentication.</p>"},{"location":"linux/server-setup/#if-the-root-account-uses-password-authentication","title":"If the Root Account Uses Password Authentication","text":"<p>If you logged in to your root account using a password, then password authentication is enabled for SSH. You can SSH to your new user account by opening up a new terminal session and using SSH with your new username:</p> <p><code>ssh synergix@your_server_ip</code></p> <p>After entering your regular user's password, you will be logged in. You will be prompted for your regular user password when using sudo for the first time each session (and periodically afterwards).</p> <p>To enhance your server's security, it is recommended to set up SSH keys instead of using password authentication: https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1804</p>"},{"location":"linux/server-setup/#if-the-root-account-uses-ssh-key-authentication","title":"If the Root Account Uses SSH Key Authentication","text":"<p>If you logged in to your root account using SSH keys, then password authentication is disabled for SSH. You will need to add a copy of your local public key to the new user's <code>~/.ssh/authorized_keys</code> file to log in successfully.</p> <p>Since your public key is already in the root account's <code>~/.ssh/authorized_keys</code> file on the server, we can copy that file and directory structure to our new user account in our existing session.</p> <p>The simplest way to copy the files with the correct ownership and permissions is with the <code>rsync</code> command. This will copy the root user's .ssh directory, preserve the permissions, and modify the file owners, all in a single command:</p> <p><code>rsync --archive --chown=synergix:synergix ~/.ssh /home/synergix</code></p> <p>Now, open up a new terminal session and using SSH with your new username:</p> <p><code>ssh synergix@your_server_ip</code></p> <p>You should be logged in to the new user account without using a password. </p>"},{"location":"linux/server-setup/#5-other","title":"5) Other","text":"<p>Chose the timezone by running: <code>sudo dpkg-reconfigure tzdata</code></p>"},{"location":"linux/server-setup/#references","title":"References:","text":"<ul> <li>https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04</li> </ul>"},{"location":"linux/ubuntu-vps/","title":"Deploy a Flask Application on an Ubuntu VPS (DigitalOcean)","text":"<p>This page details the process of seting up a Ubuntu VPS (in this case a DigitalOcean dropplet using Ubuntu 16.04 was used) to serve a Flask based websiite. MySQL databases are used.</p>"},{"location":"linux/ubuntu-vps/#1-install-apache","title":"1) Install Apache","text":"<pre><code>$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get install apache2\n</code></pre> <p>You can do a spot check right away to verify that everything went as planned by visiting your server's public IP address in your web browser. You will see the default Ubuntu 16.04 Apache web page. <pre><code>http://your_server_IP_address\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#how-to-find-your-servers-public-ip-address","title":"How To Find your Server's Public IP Address","text":"<p>Usually, this is the address you use to connect to your server through SSH. However you can find the IP address from the command line by typing this: <pre><code>$ ip addr show eth0 | grep inet | awk '{ print $2; }' | sed 's/\\/.*$//'\n</code></pre></p> <p>Alternatively you can use <code>curl</code> to contact an outside party to tell you how it sees your server. You can do this by asking a specific server what your IP address is: <pre><code>$ sudo apt-get install curl\n$ curl http://icanhazip.com\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#2-install-mysql","title":"2) Install MySQL","text":"<p><pre><code>$ sudo apt-get install mysql-server mysql-client\n</code></pre> During the installation, your server will ask you to select and confirm a password for the MySQL \"root\" user. This is an administrative account in MySQL that has increased privileges. Think of it as being similar to the root account for the server itself (the one you are configuring now is a MySQL-specific account, however). Make sure this is a strong, unique password, and do not leave it blank.</p> <p>Optional: Run a simple security script that will remove some dangerous defaults and lock down access to our database system a little bit. See more info on this on reference [2]. <pre><code>$ mysql_secure_installation\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#3-install-and-enable-mod_wsgi","title":"3) Install and enable mod_wsgi","text":"<p>WSGI (Web Server Gateway Interface) is an interface between web servers and web apps for python. Mod_wsgi is an Apache HTTP server mod that enables Apache to serve Flask applications. <pre><code>$ cd /var/www\n</code></pre> Copy in your Flask app directory struture. It should look like this: <pre><code>|----FlaskApp\n|---------FlaskApp\n|--------------static\n|--------------templates\n|--------------__init__.py\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#4-install-flask-and-virtualenv","title":"4) Install Flask and virtualenv","text":"<p>Install <code>pip</code> <pre><code>$ sudo apt-get install python-pip \n</code></pre></p> <p>Install <code>virtualenv</code> and create a new virtual environment names <code>venv</code> for the Flask app <pre><code>$ sudo pip install virtualenv \n$ cd /var/www/FlaskApp/FlaskApp\n$ sudo virtualenv venv\n$ source venv/bin/activate \n</code></pre></p> <p>Install <code>Flask</code> and other necessary Flask plug-ins and extensions <pre><code>$ sudo pip install Flask \n$ sudo pip install flask-mysqldb\n$ sudo pip install Flask-WTF\n$ sudo pip install passlib\n</code></pre></p> <p>Test if the installation is successful and the app is running: <pre><code>$ sudo python __init__.py \n</code></pre> It should display \u201cRunning on http://localhost:5000/\u201d or \"Running on http://127.0.0.1:5000/\". If you see this message, you have successfully configured the app.</p> <p>To deactivate the environment, give the following command: <pre><code>$ deactivate\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#5-configure-and-enable-a-new-virtual-host","title":"5) Configure and Enable a New Virtual Host","text":"<pre><code>$ sudo nano /etc/apache2/sites-available/FlaskApp.conf\n</code></pre> <p>Add the following lines of code to the file to configure the virtual host. Be sure to change the ServerName to your domain or cloud server's IP address:</p> <pre><code>&lt;VirtualHost *:80&gt;\n        ServerName mywebsite.com\n        ServerAlias www.mywebsite.com\n        ServerAdmin admin@mywebsite.com\n        WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi\n        &lt;Directory /var/www/FlaskApp/FlaskApp/&gt;\n            Order allow,deny\n            Allow from all\n        &lt;/Directory&gt;\n        Alias /static /var/www/FlaskApp/FlaskApp/static\n        &lt;Directory /var/www/FlaskApp/FlaskApp/static/&gt;\n            Order allow,deny\n            Allow from all\n        &lt;/Directory&gt;\n        ErrorLog ${APACHE_LOG_DIR}/error.log\n        LogLevel warn\n        CustomLog ${APACHE_LOG_DIR}/access.log combined\n&lt;/VirtualHost&gt;\n</code></pre> <p>Enable the virtual host with the following command: <pre><code>$ sudo a2ensite FlaskApp\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#6-create-the-wsgi-file","title":"6) Create the .wsgi File","text":"<pre><code>$ cd /var/www/FlaskApp\n$ sudo nano flaskapp.wsgi \n</code></pre> <p>Add the following lines of code to the flaskapp.wsgi file: <pre><code>#!/usr/bin/python\nimport sys\nimport logging\nlogging.basicConfig(stream=sys.stderr)\nsys.path.insert(0,\"/var/www/FlaskApp/\")\n\nfrom FlaskApp import app as application\napplication.secret_key = 'Add your secret key'\n</code></pre></p>"},{"location":"linux/ubuntu-vps/#7-restart-apache","title":"7) Restart Apache","text":"<pre><code>$ sudo service apache2 restart \n</code></pre> <p>To view your application, open your browser and navigate to the domain name or IP address that you entered in your virtual host configuration.</p>"},{"location":"linux/ubuntu-vps/#final-directory-structure","title":"Final directory structure","text":"<pre><code>|--------FlaskApp\n|----------------FlaskApp\n|-----------------------static\n|-----------------------templates\n|-----------------------venv\n|-----------------------__init__.py\n|----------------flaskapp.wsgi\n</code></pre>"},{"location":"linux/ubuntu-vps/#useful-references","title":"Useful references:","text":"<p>1) How To Deploy a Flask Application on an Ubuntu VPS 2) How To Install Linux, Apache, MySQL, PHP (LAMP) stack on Ubuntu 16.04 3) Initial Server Setup with Ubuntu 16.04 4) Building a Flask site</p>"},{"location":"matlab/artificial-data/","title":"Create artificial data","text":"<p>Sometimes we want to create artificial (synthetic) data so that we can use it in an example of in a test. For instance, imagine we have a script that fits a function to data and we want to test it on some data. We can generate that data artificially.</p>"},{"location":"matlab/artificial-data/#general-approach","title":"General approach","text":"<pre><code>% Define the range of x values\nx = linspace(0, 10, 100);\n\n% Define the true function (e.g., a quadratic)\ny_true = 2*x.^2 + 3*x + 5;\n\n% Add some random noise to simulate measurement errors\nnoise = randn(size(x)) * 10;  % Gaussian noise with std dev = 10\ny_noisy = y_true + noise;\n\n% Plot the noisy data\nfigure;\nplot(x, y_noisy, 'o');\nhold on;\nplot(x, y_true, '-');\nlegend('Noisy Data', 'Function');\nxlabel('x');\nylabel('y');\n</code></pre>"},{"location":"matlab/artificial-data/#types-of-noise","title":"Types of noise","text":"<p>The most common noise types you can add include Gaussian (normal), uniform, and Poisson.</p>"},{"location":"matlab/artificial-data/#gaussian-noise","title":"Gaussian noise","text":"<p>Simulates measurement errors or natural variation in physical systems.</p> <pre><code>x = linspace(0, 10, 100);\n\ny_true = 2*x.^2 + 3*x + 5;  % function\n\nsigma = 10;  % standard deviation of noise\nnoise = randn(size(x)) * sigma;\ny_noisy = y_true + noise;\n</code></pre> <p>Using <code>randn</code> gives standard normal values (mean 0 and standard deviation 1). <code>sigma</code> controls the intensity of the noise.</p>"},{"location":"matlab/artificial-data/#uniform-noise","title":"Uniform Noise","text":"<p>Every value within a range is equally likely. This is less realistic, but can be useful.</p> <pre><code>range = 5;  % total range of uniform noise\nnoise = (rand(size(x)) - 0.5) * range;\ny_noisy = y_true + noise;\n</code></pre> <p>Using <code>rand</code> generates values between [0, 1], we can then shift and scale to get the desired range.</p>"},{"location":"matlab/artificial-data/#poisson-noise","title":"Poisson Noise","text":"<p>Useful for count data.</p> <p><pre><code>y_true = 20 * exp(-0.5*x);   % expected count values\ny_noisy = poissrnd(y_true);  % Poisson-distributed noise\n</code></pre> The <code>poissrnd</code> function takes the expected (mean) value for each x. The output is directly a Poisson-distributed version of the expected value. It requires the Statistics and Machine Learning Toolbox.</p>"},{"location":"matlab/doe/","title":"Design of Experiments","text":"<p>Note: Requires Matlab Statistics Toolbox.</p> <p>The Statistics Toolbox offers a collection of DOE tools rather than a beginning-to-end DOE application. Here's how to use some of those tools. </p> <p>You can generate a full factorial design for four factors each taking two values as follows: <pre><code>design = fullfact([2 2 2 2])\n</code></pre></p> <p>For historical reasons, this codes the two levels as 1 and 2. The fracfact function codes them as -1 and 1. Here's how to use that function to get the equivalent design and its confounding pattern: <pre><code>[design,confounding] = fracfact('a b c d')\n</code></pre></p> <p>Here's how to generate a 2^(4-1) design: <pre><code>[design,confounding] = fracfact('a b c abc')\n</code></pre></p> <p>Here's how to change the limits in the first column to other limits that you specify (you could repeat for other columns or loop over them): <pre><code>limits = [5 10];\ndesign(:,1) = limits(1) + (limits(2)-limits(1))*(1+design(:,1))/2\n</code></pre></p> <p>Finally, you may want to randomize the order of runs when you carry out the experiment. Here's how to do that: <pre><code>order = randperm(8)\ndesign = design(order,:)\n</code></pre></p>"},{"location":"matlab/figures-publication/","title":"Preparing figures for publication","text":"<p>Here is a summary of the most important steps and commands necessary to obtain nice figures of your data that can be imported into the text editing program of your choice.</p>"},{"location":"matlab/figures-publication/#scaling","title":"Scaling","text":"<p>Here is how to set the figure dimensions to (8 x 6) cm:</p> <pre><code>fig = figure;\n\n% create figure here\n\nfig.Units               = 'centimeters';\nfig.Position(3)         = 8;\nfig.Position(4)         = 6;\n</code></pre> <p>Alternatively, you can do the following and use the <code>gcf</code> command:</p> <pre><code>set(gcf, 'units', 'centimeters', 'position', [0 0 width height])\n</code></pre> <p>The maximum width for one-column and two-column figures, respectively, is usually given by the journal you want to submit to. Or, if you are using a LaTeX, you can output the required widths with the <code>\\the</code> command:</p> <pre><code>\\the\\hsize\n</code></pre>"},{"location":"matlab/figures-publication/#formatting-text","title":"Formatting text","text":"<p>Here we select the font Times and set the font size to 9.</p> <pre><code>set(fig.Children, 'FontName', 'Times', 'FontSize', 9);\n</code></pre>"},{"location":"matlab/figures-publication/#remove-unnecessary-white-space","title":"Remove unnecessary white space","text":"<p>As the white space surrounding the plot wastes a lot of the precious figure space, especially for small figures, it should be removed (or minimized) in the next step:</p> <pre><code>set(gca, 'LooseInset', max(get(gca,'TightInset'), 0.02))\n</code></pre>"},{"location":"matlab/figures-publication/#exporting","title":"Exporting","text":"<p>The figure can be exported to the desired graphics format. This can be done with the saveas command, but the print command allows for the definition of more attributes of the exported file. </p> <p>First, in order for the exported file to have the same size as the Matlab figure, it's necessary to first set the <code>PaperPositionMode</code> to automatic. Then we export the current figure to a png file with 600 dpi resolution:</p> <pre><code>fig.PaperPositionMode   = 'auto';\nprint('img/my_figure', '-dpng', '-r600')\n</code></pre> <p>If using vector graphics, <code>-dpng</code> can be replaced by <code>-epsc</code> for colored eps or <code>-dsvg</code>.</p>"},{"location":"matlab/figures-publication/#summary","title":"Summary","text":"<p>Here is a simple copy-pastable template:</p> <pre><code>filename = 'something';  % output file name\nwidth = 8; % cm\nheight = 5; % cm\n\nfig.Units               = 'centimeters';\nfig.Position(3)         = width;\nfig.Position(4)         = height;\nset(fig, 'LooseInset', max(get(gca,'TightInset'), 0.02))\nset(fig, 'PaperPositionMode','auto', 'PaperUnits','centimeters', 'PaperSize',[fig.Position(3), fig.Position(4)])\nprint(filename, '-dpng', '-r600')  % save as png using 600 dpi resolution\nprint(filename, '-dtiff', '-r600')  % save as svg using 600 dpi resolution\nprint(filename, '-dpdf', '-r600')  % save as pdf using 600 dpi resolution\nprint(filename, '-dsvg', '-r600')  % save as svg using 600 dpi resolution\n</code></pre>"},{"location":"matlab/figures/","title":"Figures in MATLAB","text":"<p>Hierarchy of Figure objects.</p> <p></p>"},{"location":"matlab/integrate/","title":"Integrating from data points","text":"<p>Consider the following data</p> <pre><code>t = [ ... ];\ny = [ ... ];\n</code></pre>"},{"location":"matlab/integrate/#matlab-trapz-function","title":"Matlab trapz function","text":"<p>Calculate the area (integral) directly from the datapoints.</p> <pre><code>int_trapz = trapz(t,y)\n</code></pre>"},{"location":"matlab/integrate/#fiting-a-curve-to-data-and-then-integrating","title":"Fiting a curve to data and then integrating","text":"<pre><code>[fitobject,gof,output] = fit(t,y,'cubicspline');\n</code></pre>"},{"location":"matlab/integrate/#calculate-with-matlab-integrate-function-from-the-fitted-curve","title":"Calculate with Matlab integrate function from the fitted curve","text":"<pre><code>int_fit_integrate = integrate(fitobject, t(end), 0)\n</code></pre>"},{"location":"matlab/integrate/#calculate-with-simpson38-function-from-the-fitted-curve","title":"Calculate with simpson38 function from the fitted curve","text":"<pre><code>int_fit_simp38 = simpson38(fitobject, 0, t(end), 3*100)\n</code></pre>"},{"location":"matlab/integrate/#simpsons-38-rule","title":"Simpson's 3/8 rule","text":"<pre><code>%% \nfunction integral = simpson38(f , a , b , n)\n%{\ndescription:\n    this function evaluates the integral of a mathematical function f\n    between the limits a and b using the simpson's 1/3 formula given by,\n        I = 3 * h / 8 * (f(a) + f(b) + 3 * f(x_interiors))\n\ninputs:\n    1. f = the function which to be integrated.\n    2. a = lower limit of the integral.\n    3. b = upper limit of the integral.\n    4. n = the no of intervals to which the domain is to be split. note\n    that n is always even for this case.\n    note: n is an optional argument. if n is not specified, the function\n    splits the interval into 60 pieces.\noutputs:\n    1. integral = this will give the value of the integral of the\n    mathematical function f between the limits a and b.\n%}\n    %adding robustness - argumental pre-check\n    if nargin &lt; 3\n        error('not enough input arguments. minimum 3 arguments needed.')\n    end\n\n    if a &gt; b\n        error(\"lowerlimit can't be greater than upperlimit.\")\n    end\n\n    if mod(n , 3) ~= 0\n        error(\"n must be a multiple of 3.\")\n    end\n\n    if nargin &lt; 4\n        n = 60;\n    end\n\n    %calculate h value\n    h = (b - a) / n;\n\n    %evaluate the function values\n    x = linspace(a , b , n + 1);\n    for i = 1 : n + 1\n       fofx(i) = f(x(i)); \n    end\n\n    %split up the points\n    g = fofx;\n    g(1) = [];\n    g(end) = [];\n    inot3 = 0; %not a 3 multiple\n    i3 = 0; %is a 3 multiple\n\n    global g_3;\n    for j = 1 : length(g)\n        if mod(j , 3) == 0\n            i3 = i3 + 1;\n            g_3(i3) = g(j);\n        else\n            inot3 = inot3 + 1;\n            g_not3(inot3) = g(j);\n        end\n    end\n\n    if isempty(g_3)\n        g_3 = 0;\n    end\n\n    %evaluate the integral\n    integral = 3 * h / 8 * (fofx(1) + fofx(end) + 3 * sum(g_not3) + 2 * sum(g_3));\n\nend\n</code></pre>"},{"location":"matlab/integrate/#composite-simpsons-38-rule","title":"Composite Simpson's 3/8 rule","text":"<pre><code>function int = simpson38comp(f, a, b, n)\n\nif nargin &lt; 3\n    error('Not enough input arguments.')\nend\n\nif a &gt; b\n    error(\"Lower limit can't be greater than upper limit.\")\nend\n\nif mod(n , 3) ~= 0\n    error(\"n must be a multiple of 3.\")\nend\n\nh=(b-a)/n;\n\nso = 0;\nsm3 = 0;\n\n% (3h/8)*[(y0+yn)+2*(y3+y6+..+yn-3)+3*(y1+y2+y4+y5+...+yn-2+yn-1)]\nfor k = 1:1:n-1\n    x(k) = a+k*h;\n    y(k) = f(x(k));\n\n    if rem(k,3) == 0\n       sm3 = sm3+y(k);  %sum of multiple of 3 terms \n    else\n        so = so+y(k);  %sum of others terms \n    end\nend\n\nint = (3*h/8)*(f(a)+f(b)+3*so+2*sm3);\n</code></pre>"},{"location":"matlab/links/","title":"Links and Resources","text":"<ul> <li>MATLAB Style Guide</li> </ul>"},{"location":"matlab/strings/","title":"Working with strings","text":""},{"location":"matlab/strings/#fprintf-over-multiple-lines","title":"<code>fprintf</code> over multiple lines","text":"<pre><code>fprintf( ['The results of test %d are such that %d of the ', ...\n'cats are older than %d years old.\\nThe results of test ', ... \n'%d are such that %d of the dogs are older than %d years ', ...\n'old.\\nThe results of test %d are such that %d of the ', ...\n'fish are older than %d years old.\\n'], t1, cats, age, ...\nt2, dogs, age, t3, fish, age);\n</code></pre>"},{"location":"matlab/surface-fit/","title":"Surface fitting with MATLAB","text":""},{"location":"matlab/surface-fit/#polyfitn","title":"<code>polyfitn</code>","text":"<p>polyfitn at File Exchange</p> <p>Polynomial modeling in 1 or n dimensions</p>"},{"location":"matlab/surface-fit/#gridfit","title":"<code>gridfit</code>","text":"<p>gridfit at File Exchange</p> <p>Model 2-d surfaces from scattered data.</p>"},{"location":"python/anaconda/","title":"Anaconda","text":"<p>Anaconda is a distribution of the Python language aimed for scientific computing (data science, machine learning applications, large-scale data processing, predictive analytics, etc.). It aims to simplify package management and deployment. The distribution includes data-science packages suitable for Windows, Linux, and macOS.</p>"},{"location":"python/anaconda/#managing-enviroments","title":"Managing enviroments","text":""},{"location":"python/anaconda/#enviroments-info","title":"Enviroments info","text":"<p><pre><code>$ conda env list\n</code></pre> or  <pre><code>$ conda info --envs\n</code></pre></p>"},{"location":"python/anaconda/#create-a-new-enviroment","title":"Create a new enviroment","text":"<p>Create an environment: <pre><code>$ conda create --name venv_name\n</code></pre></p> <p>Create an environment with a specific version of Python:  <pre><code>$ conda create -n venv_name python=3.6\n</code></pre></p> <p>To activate this environment: <pre><code>$ conda activate venv_name\n</code></pre></p> <p>To deactivate an active environment: <pre><code>$ conda deactivate\n</code></pre></p> <p>To remove an environment: <pre><code>$ conda remove --name myenv --all\n</code></pre></p> <p>To specify the location of the new enviroment use: <pre><code>$ conda create --prefix /tmp/test-env\n</code></pre></p>"},{"location":"python/anaconda/#create-an-enviroment-from-a-file","title":"Create an enviroment from a file","text":"<p>Export your active environment to a new file: <pre><code>$ conda env export &gt; environment.yml\n</code></pre></p> <p>Create from <code>environment.yml</code>: <pre><code>$ conda env create -f environment.yml\n</code></pre> The first line of the <code>yml</code> file sets the new environment's name.</p>"},{"location":"python/anaconda/#create-a-requirements-file","title":"Create a requirements file","text":"<p>To create an Anaconde requirements file use: <pre><code>$ conda list -e &gt; requirements.txt\n</code></pre> Note: This <code>requirements.txt</code> is not compatible with <code>pip</code>. </p> <p>The resulting file can be used to create a conda virtual environment with: <pre><code>$ conda create --name venv_name --file requirements.txt\n</code></pre></p> <p>However, this output isn't in the right format for <code>pip</code>. If you want a file which you can use to create a <code>pip</code> virtual environment you can install pip within the conda environment, the use pip to create <code>requirements.txt</code>.</p> <pre><code>$ conda activate venv_name\n$ conda install pip\n$ pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"python/anaconda/#clone-an-existing-enviroment","title":"Clone an existing enviroment","text":"<p>For instance, to clone the base enviroment use: <pre><code>$ conda create --name venv_name --clone base\n</code></pre></p>"},{"location":"python/anaconda/#add-a-folder-to-the-anaconda-path","title":"Add a folder to the Anaconda path","text":"<p>By adding a folder to the Anaconda path you can call its Python scripts from any location in the Anaconda Prompt. </p> <pre><code>cd your_folder\nconda-develop .\n</code></pre> <p>or </p> <pre><code>conda-develop /path/to/module/\n</code></pre>"},{"location":"python/anaconda/#set-environment-variables","title":"Set environment variables","text":"<p>To list any variables: <pre><code>$ conda env config vars list\n</code></pre></p> <p>To set environment variables: <pre><code>$ conda env config vars set my_var=value\n</code></pre></p> <p>Once you have set an environment variable, you have to reactivate your environment with <code>conda activate venv_name</code>. To check if the environment variable has been set, run <code>echo my_var</code> or <code>conda env config vars list</code>.</p> <p>Declare environment variables in the <code>environment.yml</code>: <pre><code>name: venv_name\nchannels:\n  - conda-forge\n  - defaults\ndependencies:\n  - python=3.7\n  - codecov\nvariables:\n  VAR1: valueA\n  VAR2: valueB\n</code></pre></p>"},{"location":"python/anaconda/#rollback-anaconda-environment","title":"Rollback Anaconda environment","text":"<p>Rollback Anaconda environment</p> <p>Sometimes updating your environment can bring unintended consequences. Fortunatly Anaconda allows you to list the changes to your environment and revert to a previous point.</p> <p>List the history of each change to the current environment:</p> <pre><code>$ conda list --revisions\n</code></pre> <p>You'll get an output like this:</p> <pre><code>     ...\n\n2020-06-24 12:47:58  (rev 12)\n     _anaconda_depends  {2019.03 (defaults/win-64) -&gt; 2020.02 (defaults/win-64)}\n     astropy  {4.0 (defaults/win-64) -&gt; 4.0.1.post1 (defaults/win-64)}\n     atomicwrites  {1.3.0 (defaults/win-64) -&gt; 1.4.0 (defaults/noarch)}\n     autopep8  {1.4.4 (defaults/noarch) -&gt; 1.5.3 (defaults/noarch)}\n     backcall  {0.1.0 (defaults/win-64) -&gt; 0.2.0 (defaults/noarch)}\n     bcrypt  {3.1.7 (defaults/win-64) -&gt; 3.1.7 (defaults/win-64)}\n     beautifulsoup4  {4.8.2 (defaults/win-64) -&gt; 4.9.1 (defaults/win-64)}\n     bitarray  {1.2.1 (defaults/win-64) -&gt; 1.2.2 (defaults/win-64)}\n     ...\n     xz  {5.2.4 (defaults/win-64) -&gt; 5.2.5 (defaults/win-64)}\n     yapf  {0.28.0 (defaults/noarch) -&gt; 0.29.0 (defaults/noarch)}\n     zipp  {2.2.0 (defaults/noarch) -&gt; 3.1.0 (defaults/noarch)}\n     zlib  {1.2.11 (defaults/win-64) -&gt; 1.2.11 (defaults/win-64)}\n     zstd  {1.3.7 (defaults/win-64) -&gt; 1.4.4 (defaults/win-64)}\n    -backports.os-0.1.1 (defaults/win-64)\n    +brotlipy-0.7.0 (defaults/win-64)\n    +importlib-metadata-1.6.1 (defaults/win-64)\n    +prompt-toolkit-3.0.5 (defaults/noarch)\n    +regex-2020.5.14 (defaults/win-64)\n    +threadpoolctl-2.1.0 (defaults/noarch)\n    +toml-0.10.1 (defaults/noarch)\n\n2020-06-24 14:57:05  (rev 13)\n    +plotly-4.8.1 (plotly/noarch)\n    +retrying-1.3.3 (defaults/win-64)\n\n2020-11-02 14:49:53  (rev 14)\n     _anaconda_depends  {2020.02 (defaults/win-64) -&gt; 2020.07 (defaults/win-64)}\n     asn1crypto  {1.3.0 (defaults/win-64) -&gt; 1.4.0 (defaults/noarch)}\n     astroid  {2.3.3 (defaults/win-64) -&gt; 2.4.2 (defaults/win-64)}\n     astropy  {4.0.1.post1 (defaults/win-64) -&gt; 4.0.2 (defaults/win-64)}\n     attrs  {19.3.0 (defaults/noarch) -&gt; 20.2.0 (defaults/noarch)}\n     autopep8  {1.5.3 (defaults/noarch) -&gt; 1.5.4 (defaults/noarch)}\n     bcrypt  {3.1.7 (defaults/win-64) -&gt; 3.2.0 (defaults/win-64)}\n     ...\n    +nest-asyncio-1.4.1 (defaults/noarch)\n    +tifffile-2020.10.1 (defaults/win-64)\n    +typed-ast-1.4.1 (defaults/win-64)\n    +zope-1.0 (defaults/win-64)\n    +zope.event-4.5.0 (defaults/win-64)\n    +zope.interface-5.1.2 (defaults/win-64)\n</code></pre> <p>It list each revision along with updated packages (old version -&gt; new version) and newly added packages (the ones with + symbol). Now you can safely rollback to previous versions of your environment by using <code>conda install -\u2013revision revision number</code>. For instance:</p> <pre><code>conda install --revision 13\n</code></pre>"},{"location":"python/anaconda/#references","title":"References","text":"<ul> <li>https://stackoverflow.com/a/37008663/5240904</li> <li>https://docs.conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html</li> </ul>"},{"location":"python/basemap/","title":"Geo ploting with Basemap","text":"<p>The matplotlib basemap toolkit is a library for plotting 2D data on maps in Python.</p>"},{"location":"python/basemap/#installation","title":"Installation","text":""},{"location":"python/basemap/#option-1","title":"Option 1:","text":"<p>The recommended installation method for Basemap is using Anaconda and the conda-forge channel. In the Anaconda Prompt run: <pre><code>$ conda install -c anaconda basemap\n</code></pre></p> <p>You might also need to run the following command to install PROJ, which is a required dependency of Basemap: <pre><code>$ conda install -c conda-forge proj\n</code></pre></p> <p>If the installation was sucessful you should now be able to run the following import in the Python (Anaconda) prompt without any errors: <pre><code>from mpl_toolkits.basemap import Basemap\n</code></pre></p>"},{"location":"python/basemap/#option-2","title":"Option 2:","text":"<p>If you are on Windows you can also install the binaries directly. This worked better for me than installing through Anaconda and conda-forge. Download the Basemap and PROJ binaries. Make sure you download the correct binary for your Python version. For instance, if you have Python 3.7 64-bit make sure to download the <code>pyproj\u20112.4.2.post1\u2011cp37\u2011cp37m\u2011win_amd64.whl</code> and <code>basemap\u20111.2.1\u2011cp37\u2011cp37m\u2011win_amd64.whl</code> files. The <code>cp37</code> indicates Python version and <code>amd64</code> the 64-bit version. You can now install both libraries with pip.</p> <pre><code>$ pip install pyproj\u20112.4.2.post1\u2011cp37\u2011cp37m\u2011win_amd64.whl\n$ pip install basemap\u20111.2.1\u2011cp37\u2011cp37m\u2011win_amd64.whl\n</code></pre> <p>Test the instalation by running:</p> <pre><code>from mpl_toolkits.basemap import Basemap\n</code></pre>"},{"location":"python/basemap/#ploting-a-simple-map","title":"Ploting a simple map","text":"<p>Let's plot a simple world map.</p> <pre><code>from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nm = Basemap(projection='mill',llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, resolution='c')\n\n# Draw map features\nm.drawcoastlines()\nm.fillcontinents(color='#072B57',lake_color='#FFFFFF')\n\n# Draw parallels and meridians\nm.drawparallels(np.arange(-90.,91.,30.))\nm.drawmeridians(np.arange(-180.,181.,60.))\n\nm.drawmapboundary(fill_color='#FFFFFF')\nplt.title(\"Basemap Example!\")\nplt.show()\n</code></pre> <p><code>projection='mill'</code> is the map projection. There are multiple projections availlable. Check here.</p> <p><code>llcrnrlat</code>, <code>llcrnrlon</code>, <code>urcrnrlat</code>, and <code>urcrnrlon</code> are the latitude and longitude values of the lower left and upper right corners of the map.</p> <p>There are three resolution levels: <code>resolution='c'</code> (used above) is crude resolution but faster render time. There is also <code>resolution='l'</code> for low resolution and <code>resolution='h'</code> for high resolution, which represent increasing map resolution and increased render time. Unless coastlines or lakes are really important to you crude resolution is usually enough.</p>"},{"location":"python/basemap/#drawing-other-map-features","title":"Drawing other map features:","text":"<pre><code>m.drawcountries()  # draw countries\nm.drawstates()  # draw states\nm.drawrivers()  # draw rivers\nm.bluemarble()  # satellite style map\n</code></pre>"},{"location":"python/basemap/#ploting-coordinates","title":"Ploting coordinates","text":"<pre><code>from mpl_toolkits.basemap import Basemap\nimport matplotlib.pyplot as plt\n\nm = Basemap(projection='mill',llcrnrlat=-90, urcrnrlat=90, llcrnrlon=-180, urcrnrlon=180, resolution='c')\nm.drawcoastlines()\nm.fillcontinents(color='#072B57',lake_color='#FFFFFF')\nm.drawmapboundary(fill_color='#FFFFFF')\n\nlat, lon = 29.7630, -95.3630  # define the coordinates\nx,y = m(lon, lat)  # convert to Basemap system using your map\nm.plot(x, y, 'ro', markersize=20, alpha=.5)  # plot and specify marker size and marker fill transparency\n\nplt.title(\"Basemap Example!\")\nplt.show()\n</code></pre>"},{"location":"python/basemap/#references","title":"References:","text":"<ul> <li>Basemap installation via Anaconda</li> <li>PROJ installation instructions</li> <li>pythonprogramming.net</li> </ul>"},{"location":"python/beautifulsoup4/","title":"Web scrapping with Beautiful Soup 4","text":""},{"location":"python/beautifulsoup4/#required-modules","title":"Required modules","text":"<pre><code>pip install beautifulsoup4\npip install lxml\npip instal html5lib\npip install requests\n</code></pre>"},{"location":"python/beautifulsoup4/#usage","title":"Usage","text":"<pre><code>from bs4 import BeautifulSoup\nimport requests\n\nsource = requests.get('http://example.com').text\nsoup = BeautifulSoup(source, 'lxml')\n</code></pre>"},{"location":"python/beautifulsoup4/#references","title":"References","text":"<p>https://www.youtube.com/watch?v=ng2o98k983k</p>"},{"location":"python/boilerplate/","title":"Python boilerplates","text":""},{"location":"python/boilerplate/#simple-python-boilerplate","title":"Simple Python boilerplate","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nModule Docstring\n\"\"\"\n\n__author__ = \"Your Name\"\n__version__ = \"0.1.0\"\n__license__ = \"MIT\"\n\n\ndef main():\n    \"\"\" Main entry point of the app \"\"\"\n    print(\"hello world\")\n\n\nif __name__ == \"__main__\":\n    \"\"\" This is executed when run from the command line \"\"\"\n    main()\n</code></pre> <p>The first line is for executable scripts.</p>"},{"location":"python/boilerplate/#argparse-boilerplate","title":"Argparse boilerplate","text":"<pre><code>\"\"\"\nModule Docstring\n\"\"\"\n\n__author__ = \"Your Name\"\n__version__ = \"0.1.0\"\n__license__ = \"MIT\"\n\nimport argparse\n\n\ndef main(args):\n    \"\"\" Main entry point of the app \"\"\"\n    print(\"hello world\")\n    print(args)\n\n\nif __name__ == \"__main__\":\n    \"\"\" This is executed when run from the command line \"\"\"\n    parser = argparse.ArgumentParser()\n\n    # Required positional argument\n    parser.add_argument(\"arg\", help=\"Required positional argument\")\n\n    # Optional argument flag which defaults to False\n    parser.add_argument(\"-f\", \"--flag\", action=\"store_true\", default=False)\n\n    # Optional argument which requires a parameter (eg. -d test)\n    parser.add_argument(\"-n\", \"--name\", action=\"store\", dest=\"name\")\n\n    # Optional verbosity counter (eg. -v, -vv, -vvv, etc.)\n    parser.add_argument(\n        \"-v\",\n        \"--verbose\",\n        action=\"count\",\n        default=0,\n        help=\"Verbosity (-v, -vv, etc)\")\n\n    # Specify output of \"--version\"\n    parser.add_argument(\n        \"--version\",\n        action=\"version\",\n        version=\"%(prog)s (version {version})\".format(version=__version__))\n\n    args = parser.parse_args()\n    main(args)\n</code></pre>"},{"location":"python/config-files/","title":"Configuration files","text":"<p>Most interesting programs need some kind of configuration. For very simple tasks you might choose to write these configuration variables directly into the source code. But this is a bad idea when you want to distribute your code and allow users to change configurations. Here are a few alternatives on how to handle configuration files in Python.</p>"},{"location":"python/config-files/#using-a-ini-file","title":"Using a <code>.ini</code> file *","text":"<p>Create a <code>myfile.ini</code> like: <pre><code>[SectionOne]\nStatus: Single\nName: Derek\nValue: Yes\nAge: 30\nSingle: True\n\n[SectionTwo]\nFavoriteColor=Green\n[SectionThree]\nFamilyName: Johnson\n\n[Others]\nbarList=item1,item2\n</code></pre></p> <p>Retrieve the data like: <pre><code>&gt;&gt;&gt; import ConfigParser\n&gt;&gt;&gt; Config = ConfigParser.ConfigParser()\n&gt;&gt;&gt; Config\n&lt;ConfigParser.ConfigParser instance at 0x00BA9B20&gt;\n&gt;&gt;&gt; Config.read(\"myfile.ini\")\n['c:\\\\tomorrow.ini']\n&gt;&gt;&gt; Config.sections()\n['Others', 'SectionThree', 'SectionOne', 'SectionTwo']\n&gt;&gt;&gt; Config.options('SectionOne')\n['Status', 'Name', 'Value', 'Age', 'Single']\n&gt;&gt;&gt; Config.get('SectionOne', 'Status')\n'Single'\n</code></pre></p>"},{"location":"python/config-files/#using-yaml","title":"Using YAML *","text":"<p>YAML is a human friendly data serialization standard for all programming languages.</p> <p>Create a <code>config.yml</code> file <pre><code>database:\n    username: admin\n    password: foobar  # TODO get prod passwords out of config\n    socket: /var/tmp/database.sock\n    options: {use_utf8: true}\nmemcached:\n    host: 10.0.0.99\nworkers:\n  - host: 10.0.0.101\n    port: 2301\n  - host: 10.0.0.102\n    port: 2302\n</code></pre></p> <p>Parse with: <pre><code>import yaml\nconfig = yaml.safe_load(open(\"config.yml\"))\n</code></pre></p>"},{"location":"python/config-files/#using-a-python-module","title":"Using a Python module","text":"<p>Create a regular Python module, say <code>config.py</code>, like this: <pre><code>truck = dict(\n    color = 'blue',\n    brand = 'ford',\n)\ncity = 'new york'\ncabriolet = dict(\n    color = 'black',\n    engine = dict(\n        cylinders = 8,\n        placement = 'mid',\n    ),\n    doors = 2,\n)\n</code></pre></p> <p>Use it like this: <pre><code>import config\nprint(config.truck['color'])  \n</code></pre></p>"},{"location":"python/config-files/#other-alternatives","title":"Other alternatives","text":"<ul> <li>Using a JSON file.</li> <li>Using .env files to write configuration as environmental variables.</li> </ul>"},{"location":"python/config-files/#references","title":"References","text":"<ul> <li>What's the best practice using a settings file in Python?</li> <li>Configuration files in Python</li> <li>From Novice to Expert: How to Write a Configuration file in Python</li> </ul>"},{"location":"python/create-exe/","title":"Create a standalone executable of a Python app","text":""},{"location":"python/create-exe/#alternatives","title":"Alternatives","text":"<p>Most popular options:</p> <ul> <li>pyinstaller</li> <li>cx_Freeze</li> <li>Nuitka</li> </ul> <p>Other alternatives:</p> <ul> <li>py2exe - Based on <code>pyinstaller</code>. For Windows.</li> <li>py2app - Based on <code>pyinstaller</code>. For MacOS X.</li> <li>PyOxidizer</li> </ul>"},{"location":"python/create-exe/#using-pyinstaller","title":"Using <code>pyinstaller</code>","text":"<p>It's pretty straight forward: 1. Create an entry-point script that calls your main function. 2. Install PyInstaller. 3. Run PyInstaller on your entry-point. 4. Test your new executable. 5. Ship your resulting <code>dist/</code> folder to users.</p>"},{"location":"python/create-exe/#install","title":"Install","text":"<p>To install <code>pyinstaller</code> on your pc run (more details can be found here: https://www.pyinstaller.org/):</p> <pre><code>pip install pyinstaller\n</code></pre>"},{"location":"python/create-exe/#for-a-single-file-program","title":"For a single file program","text":"<p>If your program is a single script use <code>cmd</code> to go to your program directory and to turn it into a exe folder run</p> <pre><code>pyinstaller myprogram.py\n</code></pre>"},{"location":"python/create-exe/#for-a-package","title":"For a package","text":"<p>Create an entrypoint outside your package folder that imports and runs your program. This will be the entry point. Call pyinstaller on the entrypoint script as above.</p>"},{"location":"python/create-exe/#options","title":"Options","text":"<p>Change the name of your executable:  <pre><code>pyinstaller myprogram.py --name MY_PROGRAM\n</code></pre></p> <p>Package your entire application into a single executable file:  <pre><code>pyinstaller myprogram.py --onefile\n</code></pre></p> <p>Insert additional data or binary files into your build:  <pre><code>pyinstaller myprogram.py --add-data data/file.csv\n</code></pre></p> <p>Exclude some modules from being included with your executable:  <pre><code>pyinstaller myprogram.py --exclude-module=pytest\n</code></pre></p> <p>Avoid automatically opening a console window for stdout logging:  <pre><code>pyinstaller myprogram.py -w\n</code></pre></p> <p>What I usually run: </p> <pre><code>pyinstaller -F --windowed --icon=myapp.ico myprogram.py\n</code></pre> <p>This makes it a single exe (without the folders with all dependables) but is slightly slower, minimizes the console window sine I have a GUI, and gives it a snazzy icon that I had saved (you have to copy over the icon, or have an exception incase it isn't found)</p>"},{"location":"python/create-exe/#references","title":"References","text":"<ul> <li>Using PyInstaller to Easily Distribute Python Applications</li> </ul>"},{"location":"python/csv/","title":"CSV files","text":"<p>CSV (Comma Separated Values) is a very popular import and export data format used in spreadsheets and databases. Each line in a CSV file is a data record. Each record consists of one or more fields, separated by commas. While CSV is a very simple data format, there can be many differecies, such as different delimiters, new lines, or quoting characters.</p>"},{"location":"python/csv/#reading-csv-files","title":"Reading CSV files","text":"<p>Reading of CSV files into memory:</p> <pre><code># example1.csv\n1/2/2014,5,8,red\n1/3/2014,5,2,green\n1/4/2014,9,1,blue\n</code></pre> <pre><code>import csv\n\nwith open('example1.csv') as csvfile:\n    readCSV = csv.reader(csvfile, delimiter=',')\n    for row in readCSV:\n        print(row)\n        print(row[0])\n        print(row[0],row[1],row[2],)\n</code></pre> <p>Another example: reading a file with headers and data with specific encoding and delimiter. Print the header and create a data list (without the header line).</p> <pre><code>data = []\nwith open('data.csv', 'r', encoding='utf-8') as f:\n    csvreader = csv.reader(f, delimiter=';')\n    header = next(csvreader)  # skip header\n    print(header)\n    for row in csvreader:\n        data.append([float(val) for val in row])\n</code></pre>"},{"location":"python/csv/#dictreader","title":"DictReader","text":"<p>The <code>csv.DictReader</code> class operates like a regular reader but maps the information read into a dictionary. The keys for the dictionary can be passed in with the fieldnames parameter or inferred from the first row of the CSV file.</p> <pre><code># example2.csv\nmin,avg,max\n1, 5.5, 10\n2, 3.5, 5\n</code></pre> <pre><code>import csv\n\nwith open('values.csv', 'r') as f:\n    reader = csv.DictReader(f)\n    for row in reader:\n        print(row['min'], row['avg'], row['max'])\n</code></pre>"},{"location":"python/csv/#writing-to-csv-files","title":"Writing to CSV files","text":"<p>The <code>csv.writer()</code> method returns a writer object which converts the user's data into delimited strings on the given file-like object.</p> <pre><code>import csv\n\nnms = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12]]\n\nwith open('numbers2.csv', 'w') as f:\n    writer = csv.writer(f)\n    for row in nms:\n        writer.writerow(row)\n</code></pre>"},{"location":"python/csv/#dictwriter","title":"DictWriter","text":"<p>The csv.DictWriter class operates like a regular writer but maps Python dictionaries into CSV rows. The fieldnames parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow() method are written to the CSV file. <pre><code>import csv\n\nwith open('names.csv', 'w') as f:\n    fnames = ['first_name', 'last_name']\n    writer = csv.DictWriter(f, fieldnames=fnames)    \n\n    writer.writeheader()  # writes the headers to the CSV file.\n    writer.writerow({'first_name' : 'John', 'last_name': 'Smith'})\n    writer.writerow({'first_name' : 'Robert', 'last_name': 'Brown'})\n    writer.writerow({'first_name' : 'Julia', 'last_name': 'Griffin'})\n</code></pre></p>"},{"location":"python/csv/#quoting-csv-files","title":"Quoting CSV Files","text":"<p>With the CSV module, you can also perform a variety of quoting functions.</p> <p>They are:</p> <ul> <li><code>csv.QUOTE_ALL</code> - Quote everything, regardless of type.</li> <li><code>csv.QUOTE_MINIMAL</code> - Quote fields with special characters</li> <li><code>csv.QUOTE_NONNUMERIC</code> - Quote all fields that are not integers or floats</li> <li><code>csv.QUOTE_NONE</code> - Do not quote anything on output</li> </ul>"},{"location":"python/datetime/","title":"Datetime module","text":"<p>The <code>datetime</code> module is a standard library module that supplies classes for manipulating dates and times. While date and time arithmetic is supported, the focus of the implementation is on efficient attribute extraction for output formatting and manipulation.</p> <p>The <code>datetime</code> module has three types for storing a point in time:</p> <ul> <li><code>date</code> for year, month, day of month</li> <li><code>time</code> for hours, minutes, seconds, microseconds, time zone info</li> <li><code>datetime</code> combines <code>date</code> and <code>time</code>. It has the methods <code>date()</code> and <code>time()</code> to get the corresponding date and time objects, and there's a handy <code>combine</code> function to combine date and time into a datetime.</li> </ul>"},{"location":"python/datetime/#parsing-and-formatting-date-strings","title":"Parsing and formatting date strings","text":"<p><code>datetime.strptime</code> is the main routine for parsing strings into datetimes. It can handle all sorts of formats, with the format determined by a format string you give it:</p> <pre><code>from datetime import datetime\n\ndatetime_object = datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')\n</code></pre> <p><code>datetime.strftime</code> is the routine to format datetime objects to string. <pre><code>import datetime\n\nt = datetime.datetime(2012, 2, 23, 0, 0)\nt.strftime('%m/%d/%Y')\n# output: '02/23/2012'\n</code></pre></p> <p>Format options available in the datetime documentation and at strftime.org.</p> <p>To summarize: * <code>strptime</code> = \"string parse time\" * <code>strftime</code> = \"string format time\"</p>"},{"location":"python/email/","title":"Sending e-mails with Python","text":"<p>In all examples I am using a gmail server to send emails. If you are not using a gmail address you need to insert the respective smtp server and possibly the port.</p> <ul> <li>Gmail: smtp.gmail.com, port 587</li> <li>Hotmail: smtp.live.com, port 587</li> <li>Outlook: smtp-mail.outlook.com, port 587</li> </ul>"},{"location":"python/email/#very-basic-example","title":"Very basic example","text":"<p>This is a very barebones example. No subject is added to the email. </p> <pre><code>import smtplib\n\nsender = 'sender@gmail.com'\npwd = 'senderpassword'  # password for sender email\nreceiver = 'receiver@gmail.com'\nmsg = 'Hi there!'\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)  # smtp server and port for the sender email\nserver.ehlo()\nserver.starttls()  # starts a TLS encrypted connection\nserver.login(sender, pwd)\nserver.sendmail(sender, receiver, msg)\nserver.close()\n\nprint('Mail sent!')\n</code></pre>"},{"location":"python/email/#more-complete-case","title":"More complete case","text":"<p>This uses the Python email library to help compose the email. You can add the subject to the email. </p> <pre><code>import smtplib\nfrom email.message import EmailMessage\n\nsender = 'sender@gmail.com'\npwd = 'senderpassword'  # password for sender email\nreceiver = 'receiver@gmail.com'\nmessage = 'Hi there!'\n\nmsg = EmailMessage()\nmsg.set_content(message)\nmsg['Subject'] = subject\nmsg['From'] = sender\nmsg['To'] = receiver\n\nserver = smtplib.SMTP('smtp.gmail.com', 587)\nserver.ehlo()\nserver.starttls()  # starts a TLS encrypted connection\nserver.login(sender, pwd)\nserver.sendmail(sender, receiver, msg.as_string())\nserver.close()\n\nprint('Mail sent!')\n</code></pre>"},{"location":"python/email/#html-email","title":"HTML email","text":"<p>Here\u2019s an example of how to create an HTML message with an alternative plain text version.</p> <pre><code>import smtplib\n\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# me == my email address\n# you == recipient's email address\nme = \"my@email.com\"\nyou = \"your@email.com\"\n\n# Create message container - the correct MIME type is multipart/alternative.\nmsg = MIMEMultipart('alternative')\nmsg['Subject'] = \"Link\"\nmsg['From'] = me\nmsg['To'] = you\n\n# Create the body of the message (a plain-text and an HTML version).\ntext = \"Hi!\\nHow are you?\\nHere is the link you wanted:\\nhttp://www.python.org\"\nhtml = \"\"\"\\\n&lt;html&gt;\n  &lt;head&gt;&lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;Hi!&lt;br&gt;\n       How are you?&lt;br&gt;\n       Here is the &lt;a href=\"http://www.python.org\"&gt;link&lt;/a&gt; you wanted.\n    &lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n\"\"\"\n\n# Record the MIME types of both parts - text/plain and text/html.\npart1 = MIMEText(text, 'plain')\npart2 = MIMEText(html, 'html')\n\n# Attach parts into message container.\n# According to RFC 2046, the last part of a multipart message, in this case\n# the HTML message, is best and preferred.\nmsg.attach(part1)\nmsg.attach(part2)\n\n# Send the message via local SMTP server.\ns = smtplib.SMTP('localhost')\n# sendmail function takes 3 arguments: sender's address, recipient's address\n# and message to send - here it is sent as one string.\ns.sendmail(me, you, msg.as_string())\ns.quit()\n</code></pre>"},{"location":"python/flask/","title":"Building a Flask site","text":""},{"location":"python/flask/#installing-flask-and-other-usefull-python-modules","title":"Installing Flask and other usefull Python modules","text":"<pre><code>pip install Flask\npip install flask-mysqldb\npip install Flask-WTF\npip install passlib\n</code></pre>"},{"location":"python/flask/#project-file-structure","title":"Project file structure","text":"<pre><code>/flask-site\n    /venv\n    /flask-site\n        __init__.py\n        /static\n            style.css\n        /templates\n            layout.html\n            index.html\n            about.html\n            ...\n</code></pre>"},{"location":"python/flask/#the-__init__py-file","title":"The <code>__init__.py</code> file","text":"<pre><code>from flask import Flask, render_template, flash, redirect, url_for, session, request, logging\n\napp = Flask(__name__)\n\n# Home page route\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n# About page route\n@app.route('/about')\ndef about():\n    return render_template('about.html')\n\nif __name__ == '__main__':\n    app.secret_key = 'secret123'\n    app.run(debug=True)\n</code></pre>"},{"location":"python/ghp-import/","title":"Deploying to Github pages with <code>ghp-import</code>","text":""},{"location":"python/ghp-import/#example-directory-structure","title":"Example directory structure","text":"<pre><code>myproject/\n\u251c\u2500\u2500 myproject/\n\u251c\u2500\u2500 jupyterbook/\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 build.bat\n</code></pre>"},{"location":"python/ghp-import/#building-with-ghp-import","title":"Building with <code>ghp-import</code>","text":"<p>The build.bat file can then be used to run:</p> <pre><code>jupyter-book build jupyterbook\ncd jupyterbook\nghp-import -n -p -f _build/html\ncd ..\n</code></pre>"},{"location":"python/ghp-import/#references","title":"References","text":"<ul> <li>GitHub Pages Import</li> </ul>"},{"location":"python/gui/","title":"Graphical User Interfaces (GUIs) in Python","text":""},{"location":"python/gui/#for-simple-command-line-programs","title":"For simple command line programs","text":"<ul> <li>Gooey - Turn (almost) any Python command line program into a full GUI application</li> </ul>"},{"location":"python/gui/#gui-libraries","title":"GUI libraries","text":"<ul> <li> <p>TkInter - Python's de-facto standard GUI available in the standard library</p> </li> <li> <p>PySimpleGUI - Transforms tkinter, Qt, Remi, WxPython into portable people-friendly Pythonic interfaces. Easy for beginners, not really recommended for production ready app.</p> </li> <li> <p>Kivy - Cross-platform GUI library supporting both desktop operating systems (Windows, macOS, Linux) and mobile devices (Android, iOS).</p> </li> <li> <p>PyQt5, QtPy, PySide - There are Python bindings available for the Qt toolkit (using either PyQt or PySide). PyQt is currently more mature than PySide, but you must buy a PyQt license if you want to write proprietary applications. PySide is free for all applications.</p> </li> <li> <p>DearPyGUI - Has nice documentation, good tutorial made by dev himself, loaded with features but frequent updates change the functionality sometimes. Built with Dear ImGui.</p> </li> <li> <p>WX-Python - Hasn't been updated in a while.</p> </li> <li> <p>Toga - Still in beta.</p> </li> </ul>"},{"location":"python/gui/#other","title":"Other","text":"<ul> <li>Streamlit - Makes it easy to build beautiful apps for machine learning.</li> </ul>"},{"location":"python/image-manipulation/","title":"Image manipulation in Python","text":"<p>The Python Imaging Library (PIL) development has stagnated, with its last release in 2009. Luckily, there\u2019s an actively-developed fork of PIL called Pillow. Pillow is easier to install, runs on all operating systems, and supports Python 3.</p>"},{"location":"python/image-manipulation/#pillow","title":"Pillow","text":"<ul> <li>Pillow and PIL cannot co-exist in the same environment. Before installing Pillow, please uninstall PIL.</li> <li>Pillow &gt;= 2.0.0 supports Python versions 2.6, 2.7, 3.2, 3.3, 3.4</li> <li>Before installing Pillow, you\u2019ll have to install Pillow\u2019s prerequisites. Instructions here.</li> </ul>"},{"location":"python/image-manipulation/#instalation","title":"Instalation:","text":"<p>Windows: </p> <p><code>$ pip install Pillow</code></p> <p>Linux (Debian or Ubuntu): </p> <p>Make sure you have Python\u2019s development libraries installed. In Debian or Ubuntu: <code>$ sudo apt-get install python3-dev python3-setuptools</code> Prerequisites are installed on Ubuntu 12.04 LTS or Raspian Wheezy 7.0 with: <code>$ sudo apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk</code></p> <p><code>$ pip install Pillow</code></p> <pre><code>from PIL import Image, ImageFilter\n#Read image\nim = Image.open( 'image.jpg' )\n#Display image\nim.show()\n\n#Applying a filter to the image\nim_sharp = im.filter( ImageFilter.SHARPEN )\n#Saving the filtered image to a new file\nim_sharp.save( 'image_sharpened.jpg', 'JPEG' )\n\n#Splitting the image into its respective bands, i.e. Red, Green,\n#and Blue for RGB\nr,g,b = im_sharp.split()\n\n#Viewing EXIF data embedded in image\nexif_data = im._getexif()\nexif_data\n</code></pre>"},{"location":"python/json/","title":"Working with JSON","text":""},{"location":"python/json/#saving","title":"Saving","text":"<pre><code>import json\nwith open('data.json', 'w') as fp:\n    json.dump(data, fp)\n</code></pre> <p>Supply extra arguments like sort_keys or indent to get a pretty result. The argument sort_keys will sort the keys alphabetically and indent will indent your data structure with indent=N spaces.</p> <pre><code>json.dump(data, fp, sort_keys=True, indent=4)\n</code></pre>"},{"location":"python/json/#loading","title":"Loading","text":"<pre><code>with open('data.json', 'r') as fp:\n    data = json.load(fp)\n</code></pre>"},{"location":"python/json/#jsondump-vs-jsondumps-jsonload-vs-jsonloads","title":"json.dump() vs json.dumps(), json.load() vs json.loads()","text":"<p>If you want to dump the JSON into a file/socket or whatever, then you should go for <code>dump()</code>. If you only need it as a string (for printing, parsing or whatever) then use <code>dumps()</code> (dump string). The functions with an <code>s</code> take string parameters. The others take file streams.</p>"},{"location":"python/json/#query-json","title":"Query JSON","text":"<p>JMESPath is a query language for JSON, which allows you to obtain the data you need from a JSON document or dictionary easily. This library is available for Python, but also for many other programming languages, meaning that if you master the JMESPath query language, you can use it in many places. Here's some example code to get a feeling for what's possible:</p> <pre><code>import jmespath\n\npersons = {\n   \"persons\": [\n     { \"name\": \"erik\", \"age\": 38 },\n     { \"name\": \"john\", \"age\": 45 },\n     { \"name\": \"rob\", \"age\": 14 }\n   ]\n}\njmespath.search('persons[*].age', persons)\n# [38, 45, 14]\n</code></pre>"},{"location":"python/json/#references","title":"References","text":"<ul> <li>python.land/data-processing/working-with-json/jmespath</li> </ul>"},{"location":"python/jupyter/","title":"Jupyter","text":"<p>Jupyter Notebook is an open-source web application that allows you to create and share documents that contain live code, equations, visualizations and narrative text. Uses include: data cleaning and transformation, numerical simulation, statistical modeling, data visualization, machine learning, and much more.</p> <p>JupyterLab is the next-generation user interface for Project Jupyter. It offers all the familiar building blocks of the classic Jupyter Notebook (notebook, terminal, text editor, file browser, rich outputs, etc.) in a flexible and powerful user interface.</p>"},{"location":"python/jupyter/#setup-jupyter-notebook","title":"Setup Jupyter Notebook","text":"<p>Install Jupyter Notebook with the following command. Alternatively, it is already packaged and ready to use with the Anaconda distribution.</p> <pre><code>pip install jupyter\n</code></pre> <p>Starting the Notebook Server: <pre><code>jupyter notebook\n</code></pre></p> <p>Open a specific Notebook: <pre><code>jupyter notebook notebook.ipynb\n</code></pre></p>"},{"location":"python/jupyter/#setup-jupyterlab","title":"Setup JupyterLab","text":"<p>Install JupyterLab with the following command.</p> <pre><code>pip install jupyterlab\n</code></pre> <p>Launch by running: <pre><code>jupyter lab\n</code></pre></p>"},{"location":"python/jupyter/#useful-jupyterlab-extensions","title":"Useful JupyterLab extensions","text":"<ul> <li>JupyterLab-LSP: adds code assistance capabilities to JupyterLab</li> <li>Debugger: a proper debugger </li> <li>jupyterlab-toc: auto-generates a table of contents in the left area when you have a notebook or markdown document open</li> <li>jupyterlab_spellchecker: spellchecker for markdown cells</li> </ul> <p>Here is a curated list of JupyterLab extensions</p>"},{"location":"python/jupyter/#useful-ipython-commands","title":"Useful IPython commands","text":"<p>The <code>%matplotlib inline</code> command is an IPython magic function that sets the output of plotting commands to be displayed inline within frontends like the Jupyter notebook, directly below the code cell that produced it. The resulting plots will then also be stored in the notebook document.</p> <pre><code>%matplotlib inline\n</code></pre> <p>The <code>figsize</code> sets the figure size</p> <pre><code>from IPython.core.pylabtools import figsize\n\nfigsize(10, 12)\n</code></pre> <p>Globaly set the scale of text and font for Seaborn</p> <pre><code>import seaborn as sns\nsns.set(font_scale=2, font='Palatino Linotype')\n</code></pre>"},{"location":"python/jupyter/#add-parent-folder-to-path","title":"Add parent folder to path","text":"<p>This is useful so you can import into the notebook utility functions from a parent directory. </p> <pre><code># Add parent directory to Python path\nimport os\nimport sys\nmodule_path = os.path.abspath(os.path.join('..'))\nif module_path not in sys.path:\n    sys.path.append(module_path)\n\n# Import function fun1 from modeule file1 in directory utils\nfrom utils.file1 import fun1\n</code></pre>"},{"location":"python/jupyter/#here-is-another-alternative","title":"Here is another alternative.","text":"<p>Supose you have the following diretory structure. </p> <pre><code>myproject/\n|-- README\n|-- myproject/\n    |-- utils.py\n|-- notebooks/\n    |-- example.ipynb\n</code></pre> <p>We want to use our functions inside <code>utils.py</code> from our <code>example.ipynb</code> notebook.</p> <pre><code>import sys; sys.path.insert(0, '..')\n\nfrom myproject.utils import func1\n</code></pre>"},{"location":"python/jupyter/#references","title":"References","text":"<ul> <li>JupyterLab Documentation</li> </ul>"},{"location":"python/logging/","title":"Logging","text":"<p>Pyhton standard library comes with a powerful logging module.</p>"},{"location":"python/logging/#usage","title":"Usage","text":"<p>By default, there are 5 standard levels indicating the severity of events: <code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code> and <code>CRITICAL</code>.  The default logger configurarion will log all events with level <code>WARNING</code> or above. Example:</p> <pre><code>import logging\n\nlogging.debug('This is a debug message')\nlogging.info('This is an info message')\nlogging.warning('This is a warning message')\nlogging.error('This is an error message')\nlogging.critical('This is a critical message')\n\n# Outputs:\n# WARNING:root:This is a warning message\n# ERROR:root:This is an error message\n# CRITICAL:root:This is a critical message\n</code></pre>"},{"location":"python/logging/#configurating-the-logger","title":"Configurating the logger","text":"<pre><code>import logging\n\nlogging.basicConfig(filename='log.txt', filemode='w', level=logging.DEBUG, format='%(name)s - %(levelname)s - %(message)s')\nlogging.warning('This will log every log level to a file.')\n</code></pre> <p>Adding time info:</p> <pre><code>import logging\n\nlogging.basicConfig(format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S')\nlogging.warning('Admin logged out')\n</code></pre>"},{"location":"python/logging/#references","title":"References:","text":"<ul> <li>Logging in Python</li> <li>Logging Cookbook</li> </ul>"},{"location":"python/matlab/","title":"Run Matlab programs in Python","text":"<p>This example shows how to create a Python package using a MATLAB function. You can then pass the generated package to the developer who is responsible for integrating it into an application. The target system does not require a licensed copy of MATLAB.</p>"},{"location":"python/matlab/#requirements","title":"Requirements","text":"<ul> <li>A Matlab version with a license for MATLAB Compiler or MATLAB Compiler SDK to compile the Python package.</li> <li>The target computer (where the final application will run) does not require Matlab or a Matlab Licence. However, it requires the Matlab Runtime (free, download here) of the same version of the Matlab used to compile the application. For instance, if the package was compiled in Matlab 2018a the target computer must have Matlab Runtime version 2018a installed</li> </ul>"},{"location":"python/matlab/#1-create-a-python-package-for-the-maltab-application","title":"1) Create a Python package for the Maltab Application","text":"<p>For this example let's create a simple Matlab function and save it as <code>makesqr.m</code>:</p> <pre><code>function y = makesqr(x)\n\ny = magic(x);\n</code></pre> <p>Now lets create the Python package. Enter <code>libraryCompiler</code> at the MATLAB prompt to open the Library Compiler. To use the Library Compiler you need a license for MATLAB Compiler or MATLAB Compiler SDK.</p> <p>In the MATLAB Compiler project window, specify the main file of the MATLAB application that you want to deploy. Select whether to include the MATLAB Runtime installer in the generated application by selecting one of the two options in the Packaging Options section:</p> <ul> <li> <p>Runtime downloaded from web \u2014 Generates an installer that downloads the MATLAB Runtime and installs it along with the deployed MATLAB application.</p> </li> <li> <p>Runtime included in package \u2014 Generates an application that includes the MATLAB Runtime installer.</p> </li> </ul> <p>Fill in the remaining fields. For this example lets edit the Library Name field, replacing makesqr with <code>MagicSquarePkg</code>. </p> <p>To generate the packaged application, click Package. When the deployment process is complete, the output folder contains:</p> <ul> <li> <p>for_redistribution \u2014 Folder containing the file that installs the application and the MATLAB Runtime.</p> </li> <li> <p>for_testing \u2014 Folder containing all the artifacts created by mcc, such as binaries and JAR, header, and source files for a specific target. Use these files to test the installation.</p> </li> <li> <p>for_redistribution_files_only \u2014 Folder containing the files required for redistributing the application. Distribute these files to users who have MATLAB or MATLAB Runtime installed on their machines.</p> </li> <li> <p>PackagingLog.txt \u2014 Log file generated by MATLAB Compiler.</p> </li> </ul>"},{"location":"python/matlab/#2-set-up-the-target-computer-ubuntu-server","title":"2) Set up the target computer (Ubuntu server)","text":"<p>1) Make sure Python is installed. Python versions supported are versions 2.7, 3.5, and 3.6. For 64-bit MATLAB, the 64-bit Python version is requiered.</p> <p>2) If necessary install setuptools for python: <code>sudo apt-get install python-setuptools</code></p> <p>3) Now we need to install the Matlab Runtime in the Ubuntu server. Download the it from the website at Mathworks. Make sure you download and install the version corresponding to the Matlab you used to create the Python package.</p> <p>3) Start the MATLAB Runtime installer.     On Ubuntu: <code>sudo ./install</code>     On Debian: <code>gksudo ./install</code></p> <p>4) Follow the installation dialog instructions.</p>"},{"location":"python/matlab/#install-the-matlab-runtime-non-interactively","title":"Install the MATLAB Runtime Non-Interactively","text":"<p>To install the MATLAB Runtime without having to interact with the installer dialog boxes (headless Ubuntu server for instance), use the MATLAB Runtime installer\u2019s non-interactive <code>silent</code> mode. The installer runs as a background task and does not display any dialog boxes. Extract the contents of the MATLAB Runtime installer file to a temporary folder and run the MATLAB Runtime installer, specifying the -mode option: <pre><code>./install -mode silent -agreeToLicense yes\n</code></pre></p>"},{"location":"python/matlab/#3-create-and-install-the-python-application-that-will-use-the-matlab-function","title":"3) Create and install the Python application that will use the Matlab function","text":"<p>To install the Python application, open a command prompt in the <code>for_redistribution_files_only</code> folder and run the script:</p> <pre><code>python setup.py install\n</code></pre> <p>Create a file called getmagic.py, and include the following code in it.</p> <pre><code>import MagicSquarePkg\n\nmyMagic = MagicSquarePkg.initialize()\nprint(myMagic.makesqr(3))\nmyMagic.terminate()\n</code></pre> <p>At the system command prompt, navigate to the folder containing getmagic.py and run the application as follows: <pre><code>python getmagic.py\n</code></pre></p>"},{"location":"python/matlab/#notes","title":"Notes","text":""},{"location":"python/matlab/#uninstall-matlab-runtime","title":"Uninstall MATLAB Runtime","text":"<p>Exit the application and run the command: <pre><code>rm -rf mcr_root\n</code></pre></p> <p>where <code>mcr_root</code> represents the name of your top-level MATLAB installation folder.</p>"},{"location":"python/matlab/#references","title":"References","text":"<ul> <li>https://www.mathworks.com/help/compiler_sdk/gs/create-a-python-application-with-matlab-code.html</li> <li>https://www.mathworks.com/help/matlab/matlab-engine-for-python.html</li> <li>https://www.mathworks.com/help/compiler/deployment-process.html</li> </ul>"},{"location":"python/matplotlib/","title":"Matplotlib","text":"<p>Index:  - Set font - Set font size - Set X and T axis to start on 0 - Adding labels to a bar chart   * For a vertical bar chart:   * And for an horizontal bar chart: - Defining a style sheet</p>"},{"location":"python/matplotlib/#set-font","title":"Set font","text":"<pre><code>from matplotlib import rcParams\nrcParams['font.family'] = 'serif'\nrcParams['font.sans-serif'] = ['cmb10', 'Adobe Caslon Pro', 'Palatino Linotype']\n</code></pre> <p>or </p> <pre><code>import matplotlib.pyplot as plt\nplt.rcParams.update({'font.family': 'serif', 'font.sans-serif': ['cmb10', 'Adobe Caslon Pro', 'Palatino Linotype']})\n</code></pre> <p>A list of available fonts can be found here.</p>"},{"location":"python/matplotlib/#set-font-size","title":"Set font size","text":"<pre><code>import matplotlib.pyplot as plt\nplt.rcParams.update({'font.size': 22})\n</code></pre>"},{"location":"python/matplotlib/#set-x-and-t-axis-to-start-on-0","title":"Set X and T axis to start on 0","text":"<pre><code>plt.xlim(left=0)\nplt.ylim(bottom=0)\n</code></pre>"},{"location":"python/matplotlib/#adding-labels-to-a-bar-chart","title":"Adding labels to a bar chart","text":""},{"location":"python/matplotlib/#for-a-vertical-bar-chart","title":"For a vertical bar chart:","text":"<pre><code>import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Bring some raw data.\nfrequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]\n\n# In my original code I create a series and run on that,\n# so for consistency I create a series from the list.\nfreq_series = pd.Series.from_array(frequencies)\n\nx_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0,\n            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]\n\n# Plot the figure.\nplt.figure(figsize=(12, 8))\nax = freq_series.plot(kind='bar')\nax.set_title('Amount Frequency')\nax.set_xlabel('Amount ($)')\nax.set_ylabel('Frequency')\nax.set_xticklabels(x_labels)\n\n\ndef add_value_labels(ax, spacing=5):\n    \"\"\"Add labels to the end of each bar in a bar chart.\n\n    Arguments:\n        ax (matplotlib.axes.Axes): The matplotlib object containing the axes\n            of the plot to annotate.\n        spacing (int): The distance between the labels and the bars.\n    \"\"\"\n\n    # For each bar: Place a label\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        y_value = rect.get_height()\n        x_value = rect.get_x() + rect.get_width() / 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        va = 'bottom'\n\n        # If value of bar is negative: Place label below bar\n        if y_value &lt; 0:\n            # Invert space to place label below\n            space *= -1\n            # Vertically align label at top\n            va = 'top'\n\n        # Use Y value as label and format number with one decimal place\n        label = \"{:.1f}\".format(y_value)\n\n        # Create annotation\n        ax.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(0, space),          # Vertically shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            ha='center',                # Horizontally center label\n            va=va)                      # Vertically align label differently for\n                                        # positive and negative values.\n\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax)\n</code></pre>"},{"location":"python/matplotlib/#and-for-an-horizontal-bar-chart","title":"And for an horizontal bar chart:","text":"<pre><code># Bring some raw data.\nfrequencies = [6, -16, 75, 160, 244, 260, 145, 73, 16, 4, 1]\n\nfreq_series = pd.Series(frequencies)\n\ny_labels = [108300.0, 110540.0, 112780.0, 115020.0, 117260.0, 119500.0, \n            121740.0, 123980.0, 126220.0, 128460.0, 130700.0]\n\n# Plot the figure.\nplt.figure(figsize=(12, 8))\nax = freq_series.plot(kind='barh')\nax.set_title('Amount Frequency')\nax.set_xlabel('Frequency')\nax.set_ylabel('Amount ($)')\nax.set_yticklabels(y_labels)\nax.set_xlim(-40, 300) # expand xlim to make labels easier to read\n\ndef add_value_labels(ax, spacing=5, precision=2):\n    \"\"\"Add labels to the end of each bar in a bar chart.\n\n    Arguments:\n        ax (matplotlib.axes.Axes): The matplotlib object containing the axes of the plot to annotate.\n        spacing (int): The distance between the labels and the bars.\n        precision (int): Float precision to use in the annotation.\n    \"\"\"\n\n    # For each bar: Place a label\n    for rect in ax.patches:\n        # Get X and Y placement of label from rect.\n        x_value = rect.get_width()\n        y_value = rect.get_y() + rect.get_height() / 2\n\n        # Number of points between bar and label. Change to your liking.\n        space = spacing\n        # Vertical alignment for positive values\n        ha = 'left'\n\n        # If value of bar is negative: Place label left of bar\n        if x_value &lt; 0:\n            # Invert space to place label to the left\n            space *= -1\n            # Horizontally align label at right\n            ha = 'right'\n\n        # Use X value as label and format number with one decimal place\n        label = \"{:.{prec}f}\".format(x_value, prec=precision)\n\n        # Create annotation\n        plt.annotate(\n            label,                      # Use `label` as label\n            (x_value, y_value),         # Place label at end of the bar\n            xytext=(space, 0),          # Horizontally shift label by `space`\n            textcoords=\"offset points\", # Interpret `xytext` as offset in points\n            va='center',                # Vertically center label\n            ha=ha,                      # Horizontally align label differently for positive and negative values\n            fontsize=12)\n\n# Call the function above. All the magic happens there.\nadd_value_labels(ax)\n</code></pre>"},{"location":"python/matplotlib/#defining-a-style-sheet","title":"Defining a style sheet","text":"<p>You can create custom styles and use them by calling <code>style.use()</code> with the path or URL to the style sheet. For example, for a style in <code>images/pub.mplstyle</code>:</p> <pre><code>axes.titlesize : 24\naxes.labelsize : 20\nlines.linewidth : 3\nlines.markersize : 10\nxtick.labelsize : 16\nytick.labelsize : 16\n</code></pre> <p>We use this style by:</p> <pre><code>import matplotlib.pyplot as plt\nplt.style.use('images/pub.mplstyle')\n</code></pre> <p>If you only want to use a style for a specific block of code but don't want to change the global styling, use a context manager:</p> <pre><code>with plt.style.context('images/pub.mplstyle'):\n    plt.plot(np.sin(np.linspace(0, 2 * np.pi)), 'r-o')\n</code></pre> <p>To see an exhaustive list of <code>rcparams</code> you can run:</p> <pre><code>import matplotlib as mpl\nmpl.rcParams.keys()\n</code></pre> <p>Here is an example stylesheet:</p> <pre><code># Set custom colors. All colors are in web style hex format.\naxes.prop_cycle: cycler('color', ['1879CE', 'FC4F30', '3EBCD2', '379A8B', 'EBB434', '758D99'])\n\n\n# Style spines\naxes.linewidth: 1               # Spine edge line width\naxes.spines.top: False          # Display axis spines (True or False)\naxes.spines.left: True          # We only want the left and bottom spines\naxes.spines.right: False\naxes.spines.bottom: True\n\n# Set line styling for line plots\nlines.linewidth: 4              # line width in points\nlines.solid_capstyle: butt      # Makes a square ending of the line stopping at datapoint\n\n# Grid style\naxes.grid: true                 # display grid or not\naxes.grid.axis: y               # which axis the grid should apply to          \ngrid.linewidth: 1               # in points\ngrid.color: A5A5A5              # grid color\naxes.axisbelow: True            # Sets axis gridlines below lines and patches.\n\n# Setting font sizes and spacing\naxes.labelsize: 18              # font size of the x and y labels\nxtick.labelsize: 18             # font size of the x tick labels      \nytick.labelsize: 18             # font size of the y tick labels\nfont.size: 18                   # default font size for text, given in points.\nxtick.major.pad: 8              # distance to major tick label in points  \nytick.major.pad: 12             # distance to major tick label in points\n\n# Title styling\naxes.titlelocation: left        # alignment of the title: {left, right, center}\naxes.titlepad: 20               # pad between axes and title in points\naxes.titlesize: 28              # font size of the axes title\naxes.titleweight: bold          # font weight of title\n\n# Remove major and minor ticks except for on the x-axis.\nxtick.major.size: 5             # major tick size in points\nxtick.minor.size: 0             # minor tick size in points\nytick.major.size: 0\nytick.minor.size: 0\n\n# Set spacing for figure and also DPI.\nfigure.subplot.left: 0.08       # the left side of the subplots of the figure\nfigure.subplot.right: 0.95      # the right side of the subplots of the figure\nfigure.subplot.bottom: 0.07     # the bottom of the subplots of the figure\nfigure.figsize: 16, 11          # figure size in inches\nfigure.dpi: 150                 # figure dots per inch\n\n# Properties for saving the figure. Ensure a high DPI when saving so we have a good resolution.\nsavefig.dpi:       300          # figure dots per inch or 'figure'\nsavefig.facecolor: white        # figure face color when saving\nsavefig.bbox:      tight        # {tight, standard}\nsavefig.pad_inches:   0.2       # padding when bbox is set to tight\n\n# Legend Styling\nlegend.framealpha: 1\n</code></pre> <p>See more on stylesheets:</p> <ul> <li>Matplotlib docs</li> <li>The Magic of Matplotlib Stylesheets</li> </ul>"},{"location":"python/msgpack/","title":"MessagePack serializer for Python","text":"<p>MessagePack is an efficient binary serialization format. It lets you exchange data among multiple languages like JSON. But it's faster and smaller.</p>"},{"location":"python/msgpack/#install","title":"Install","text":"<pre><code>$ pip install msgpack\n</code></pre>"},{"location":"python/msgpack/#usage","title":"Usage","text":"<pre><code>import msgpack\nimport json\nimport random\n\n\ndef msgpack_example_1():\n    example_dict = {i: random.random() for i in range(10000)}\n\n    with open('json_file.json', 'w') as f:\n        json.dump(example_dict, f)\n    with open('json_file.json') as f:\n        back_from_json = json.load(f)\n\n    # Saving and loading\n    with open('msgpack_file.msgpack', 'wb') as f:\n        # f.write(msgpack.packb(example_dict))\n        f.write(msgpack.packb(example_dict, use_single_float=True))\n    with open('msgpack_file.msgpack', 'rb') as f:\n        back_from_msgpack = msgpack.unpackb(f.read())\n\n    # Data integrity\n    print(type(next(iter(back_from_json.keys()))))\n    print(type(next(iter(back_from_msgpack.keys()))))\n\n\ndef msgpack_example_2():\n    list_of_dicts = [{0: random.random()} for i in range(100)]\n    with open('streamed.msgpack', 'wb') as f:\n        for d in list_of_dicts:\n            f.write(msgpack.packb(d))\n\n    with open('streamed.msgpack', 'rb') as f:\n        loaded_list_of_dicts = [item for item in msgpack.Unpacker(f)]\n\n    print(list_of_dicts[3][0], loaded_list_of_dicts[3][0])\n\nif __name__ == '__main__':\n    # msgpack_example_1()\n    msgpack_example_2()\n</code></pre>"},{"location":"python/mysql/","title":"Using MySQL in Python","text":""},{"location":"python/mysql/#some-basic-mysql-commands","title":"Some basic MySQL commands","text":"<p>In MySQL a <code>DATABASE</code> is composed by one or more <code>TABLE</code>s. Typically you create a database for each project.</p>"},{"location":"python/mysql/#to-create-a-new-mysql-database-named-database_name-the-starting-point-of-a-new-project-using-mysql","title":"To create a new MySQL database named <code>database_name</code> (the starting point of a new project using MySQL):","text":"<pre><code>CREATE DATABASE database_name;\n</code></pre> <p>Show all databases:  <code>SHOW DATABASES;</code></p>"},{"location":"python/mysql/#to-start-using-a-database-you-must","title":"To start using a database you must:","text":"<p><code>USE database_name;</code></p>"},{"location":"python/mysql/#to-create-a-new-table-named-users-an-example","title":"To create a new table named users (an example):","text":"<pre><code>CREATE TABLE users(id INT(11) AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), username VARCHAR(30), password VARCHAR(100), register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);\n</code></pre> <p>Show all tables:  <code>SHOW TABLES;</code></p> <p>Get info on a TABLE (in this example users): <code>DESCRIBE users;</code></p>"},{"location":"python/mysql/#add-data-to-table-via-command","title":"Add data to table via command:","text":"<pre><code>INSERT INTO users(name, email, username, password) VALUES(x, x, x, x)\n</code></pre>"},{"location":"python/mysql/#typical-queries","title":"Typical queries:","text":"<p><code>SELECT * FROM users;</code>  Select all rows from users table</p>"},{"location":"python/mysql/#copying-a-database-to-another-server","title":"Copying a database to another server","text":"<ol> <li>One the server where the DB is located make a backup file by running the following command (on Windows it may be necessary to <code>cd Program Files/MySQL/MySQL Server 5.1/bin</code> first: </li> </ol> <p><code>mysqldump -u root -p database_name &gt; C:\\Users\\USER\\Desktop\\database_name.sql</code></p> <p>Alternatively: <code>mysqldump -u[root] -p[password] database_123 &gt; C:\\Users\\USER\\Desktop\\database_123.sql</code></p> <p>If getting an \"Access Denied\" it message probably means you are outputing to a directory where you have no permission to create files.</p> <ol> <li>On the second server create a new database using the same database name:</li> </ol> <p><code>mysql -u root -p</code> to start the MySQL shell</p> <p><code>CREATE DATABASE database_123;</code> to create the new DB</p> <ol> <li>Copy the created backup to the second server and import it:</li> </ol> <p><code>mysql -u[root] -p[password] database_name &lt; database_name.sql</code></p>"},{"location":"python/mysql/#usage-in-python","title":"Usage in Python","text":""},{"location":"python/mysql/#configuring-in-mysql-in-flask","title":"Configuring in MySQL in Flask:","text":"<pre><code># Config MySQL\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'root'\napp.config['MYSQL_PASSWORD'] = 'mypassword'\napp.config['MYSQL_DB'] = 'flaskappdb'\napp.config['MYSQL_CURSORCLASS'] = 'DictCursor'  # useful to return queries as dictionaries\n\n# Initialize MySQL\nmysql = MySQL(app)\n</code></pre> <p>Create cursor:  <code>cursor = mysql.connection.cursor()</code></p> <p>Execute a MySQL command:  <code>cursor.execute( command )</code></p> <p>Add data:  <code>cursor.execute(\"INSERT INTO users(name, email, username, password) VALUES(%s, %s, %s, %s)\", (x, x, x, x))</code></p> <p>Commit to database:  <code>mysql.connection.commit()</code></p> <p>Close:  <code>cursor.close()</code></p>"},{"location":"python/mysql/#check-db-for-a-login","title":"Check DB for a login:","text":"<pre><code>result = cursor.execute(\"SELECT * FROM users WHERE username = %s\", [username])`\ndata = cursor.fetchone()\n</code></pre>"},{"location":"python/pandas/","title":"Data manipulation with <code>pandas</code>","text":"<p><code>pandas</code> is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool, built on top of the Python programming language.</p>"},{"location":"python/pandas/#instalation","title":"Instalation","text":"<p><code>pandas</code>, and other required libraries like <code>numpy</code> and the remaining scientific stack, comes pre-installed if you use the Anaconda Python distribution. </p> <p>To install via PyPI run:</p> <pre><code>$ pip install pandas\n</code></pre>"},{"location":"python/pandas/#dataframe-indexing","title":"DataFrame indexing","text":"<p>See here.</p>"},{"location":"python/pandas/#useful-snippets","title":"Useful snippets:","text":"<p>Create a test dataframe:</p> <pre><code>df = pd.DataFrame(np.arange(12).reshape(3, 4), columns=['A', 'B', 'C', 'D'])\n\n# Output:\n#    A  B   C   D\n# 0  0  1   2   3\n# 1  4  5   6   7\n# 2  8  9  10  11\n</code></pre>"},{"location":"python/pandas/#droping-removing-a-column","title":"Droping (removing) a column: ^","text":"<pre><code>df = df.drop(columns=['B', 'C'])\n\n# Output:\n#    A   D\n# 0  0   3\n# 1  4   7\n# 2  8  11\n</code></pre>"},{"location":"python/pandas/#copying-a-dataframe","title":"Copying a dataframe: ^","text":"<p>Note that you can't copy a dataframe simply by <code>df2 = df</code>. Here df2 and df refer to the same object and any change in one will affect the other. To create a new copy of a dataframe you do:</p> <pre><code>df2 = df.copy()\n</code></pre>"},{"location":"python/pandas/#merge-dataframes-on-common-column","title":"Merge dataframes on common column ^","text":"<pre><code>merged_df = pd.merge(df1, df2, on=\"column_name\")\n</code></pre> <p>Only rows for which common keys are found are kept in both data frames. In case you want to keep all rows from the left data frame and only add values from <code>df2</code> where a matching key is available, you can use <code>how=\"left\"</code>.</p> <p>Alternatively:</p> <pre><code>dfinal = df1.merge(df2, on=\"column_name\", how ='inner')\n</code></pre>"},{"location":"python/pandas/#applying-a-function-to-each-row-of-a-dataframe","title":"Applying a function to each row of a dataframe:","text":"<p>Use <code>dataframe.apply()</code> to run a function on each row, <code>axis=1</code>, (or column, <code>axis=0</code>) in a dataframe. In the example below we create a new column in the dataframe where the value for each row is the row index + 10.</p> <pre><code>def function1(x):\n    return x.name + 10\n\ndf['new_column'] = df.apply(lambda row: function1(row), axis=1)\n</code></pre>"},{"location":"python/pandas/#advanced-funtions","title":"Advanced funtions","text":""},{"location":"python/pandas/#collinear-variables","title":"Collinear variables: ^","text":"<p>The function below finds collinear variables and removes them from dataframe. It also prints a report of the collinear pairs found.</p> <pre><code>def remove_collinear_features(x, threshold):\n    '''\n    Objective:\n        Remove collinear features in a dataframe with a correlation coefficient greater than the threshold. \n        Removing collinear features can help a model to generalize and improves the interpretability of the model.\n\n    Inputs: \n        x: features dataframe\n        threshold: any features with correlations greater than this value are removed\n\n    Output: \n        dataframe that contains only the non-highly-collinear features\n    '''\n\n    # Calculate the correlation matrix\n    corr_matrix = x.corr()\n    iters = range(len(corr_matrix.columns) - 1)\n    drop_cols = []\n\n    # Iterate through the correlation matrix and compare correlations\n    for i in iters:\n        for j in range(i+1):\n            item = corr_matrix.iloc[j:(j+1), (i+1):(i+2)]\n            col = item.columns\n            row = item.index\n            val = abs(item.values)\n\n            # If correlation exceeds the threshold\n            if val &gt;= threshold:\n                # Print the correlated features and the correlation value\n                print(col.values[0], \"|\", row.values[0], \"|\", round(val[0][0], 2))\n                drop_cols.append(col.values[0])\n\n    # Drop one of each pair of correlated columns\n    drops = set(drop_cols)\n    x = x.drop(columns=drops)\n\n    return x\n</code></pre>"},{"location":"python/pandas/#references","title":"References","text":"<ul> <li>Pandas docs</li> <li>Pandas DataFrame Indexing Explained</li> </ul>"},{"location":"python/pathlib/","title":"Working with paths in Python using <code>pathlib</code>","text":"<p><code>pathlib</code> is a Python Standard Library module created to make it easier to work with paths in a file system. This module debuted in Python 3.4 and updated in Python 3.5.</p>"},{"location":"python/pathlib/#the-anatomy-of-a-pathlibpath-on-windows","title":"The anatomy of a <code>pathlib.Path</code> on Windows","text":"<pre><code>from pathlib import Path\n\npath = Path(r'C:/Users/Me/projects/blog/config.tar.gz')\n\npath.drive\n# 'C:'\n\npath.root\n# '/'\n\npath.root\n# 'C:/'\n\npath.parent\n# WindowsPath('C:/Users/Me/projects/blog')\n\npath.name\n# 'config.tar.gz'\n\npath.stem\n# 'config.tar'\n\npath.suffix\n# '.gz'\n\npath.suffixes\n# ['.tar', '.gz']\n</code></pre>"},{"location":"python/pathlib/#working-with-paths","title":"Working with paths","text":""},{"location":"python/pathlib/#creating-paths-and-directories","title":"Creating paths and directories","text":"<p>When we convert a <code>WindowsPath</code> to string, Python adds backslashes. <code>repr</code> returns the path with forward slashses as it is represented on Windows. <pre><code>path = Path(r'C:/Users/Me/projects/blog/config.tar.gz')\n\nstr(path)\n# 'C:\\\\Users\\\\Me\\\\projects\\\\blog\\\\config.tar.gz'\n\nrepr(path)\n# \"WindowsPath('C:/Users/Me/projects/blog/config.tar.gz')\"\n</code></pre></p> <p>Creating and joining paths: <pre><code>Path('.', 'projects', 'python', 'source')\n# WindowsPath('projects/python/source')\n\nPath('.', 'projects', 'python') / Path('source')\n# WindowsPath('projects/python/source')\n\nPath('.', 'projects', 'python') / 'source'\n# WindowsPath('projects/python/source')\n</code></pre></p> <p>Creating directories: <pre><code>path = Path('new_directory')\npath.mkdir()\n\npath.exists()\n# True\n</code></pre></p> <p>When you have a directory path and it already exists, Python raises <code>FileExistsError</code> if you call <code>Path.mkdir()</code> on it.</p> <p>Create parent directories recursively if not exists: <pre><code>path = Path('new_parent_dir/sub_dir')\npath.mkdir(parents=True)\n</code></pre></p>"},{"location":"python/pathlib/#list-all-files-and-directories","title":"List all files and directories","text":"<p>List all files and and directories: <pre><code>path = Path('/home/Me/projects/pathlib')\nlist(path.iterdir())\n</code></pre></p> <p>List only directories: <pre><code>[p for p in path.iterdir() if p.is_dir()]\n</code></pre></p> <p>List only files: <pre><code>[p for p in path.iterdir() if p.is_file()]\n</code></pre></p>"},{"location":"python/pathlib/#references","title":"References","text":"<ul> <li>Python pathlib Cookbook: 57+ Examples to Master It (2021)</li> </ul>"},{"location":"python/profiling/","title":"Profiling in Python","text":"<p>Python includes a profiler called cProfile. It not only gives the total running time, but also times each function separately, and tells you how many times each function was called, making it easy to determine where you should make optimizations.</p> <p>You can call it from within your code, or from the interpreter, like this:</p> <pre><code>import cProfile\ncProfile.run('foo()')\n</code></pre> <p>Even more usefully, you can invoke the cProfile when running a script:</p> <pre><code>python -m cProfile myscript.py\n</code></pre> <p>And I get this: <pre><code>1007 function calls in 0.061 CPU seconds\n\nOrdered by: standard name\nncalls  tottime  percall  cumtime  percall filename:lineno(function)\n    1    0.000    0.000    0.061    0.061 &lt;string&gt;:1(&lt;module&gt;)\n 1000    0.051    0.000    0.051    0.000 myscript.py:2(&lt;lambda&gt;)\n    1    0.005    0.005    0.061    0.061 myscript.py:2(&lt;module&gt;)\n    1    0.000    0.000    0.061    0.061 {execfile}\n    1    0.002    0.002    0.053    0.053 {map}\n    1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler objects}\n    1    0.000    0.000    0.000    0.000 {range}\n    1    0.003    0.003    0.003    0.003 {sum}\n</code></pre></p>"},{"location":"python/progress-bar/","title":"Progress Bars","text":""},{"location":"python/progress-bar/#basic-progress-bar","title":"Basic progress bar","text":"<p>There are many progressbars out there for Python, but they are dependencies, and this can be really annoying, especially when it is hard to install pip libraries.</p> <p>To make any progressbar, you need to know the string option <code>\\r</code>. What makes <code>\\r</code> unique is that it will go to the start of printing.</p> <p>For example, if you were to do <code>print('Hello World!')</code>, it would print Hello World!. To visualize it, it is more like</p> <p><pre><code>Hello World!\n            ^\n</code></pre> The cursor is at the character after the !. If we were to use <code>\\r</code>, the cursor would go to the front. In our example, it would mean</p> <p><pre><code>Hello World!\n^\n</code></pre> See how the cursor is at the h? If it were to print anything, it would overwrite the character h.</p> <p>Theoretically, if we want to make a progressbar, we have to print a string multiple times with <code>\\r</code>.</p> <pre><code>times = 1 # how many times the loop has looped\nfor i in range(10): # will repeat whatever is below 10 times.\n    print('\\rHappened '+str(times)+' times.') #happened x times\n    times += 1 #this is the same as times = times + 1\n</code></pre> <p>However, if we run this, there will be an error. Each line will print on a new line.</p> <pre><code>Happened 1 times.\nHappened 2 times.\nHappened 3 times.\nHappened 4 times.\nHappened 5 times.\nHappened 6 times.\nHappened 7 times.\nHappened 8 times.\nHappened 9 times.\nHappened 10 times.\n</code></pre> <p>This is because the print function adds <code>\\n</code> to the end of every string that is printed. Theoretically, it is printing <code>'\\rHappened '+str(times)+' times.\\n'</code>. We do not want <code>\\n</code> to be added, so to fix this, write <code>print('\\rHappened '+str(times)+' times.', end = '')</code>. This makes it so that print will add <code>''</code> to the end of every string, which is equal to nothing. Finally if you run</p> <p><pre><code>times = 1 # how many times the loop has looped\nfor i in range(10): # will repeat whatever is below 10 times.\n    print('\\rHappened '+str(times)+' times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1\n</code></pre> You will get just one line of text. The only problem is that it happens so quickly, that you cannot see the bar updating. Try making it loop 1000000 times.</p> <p><pre><code>times = 1 # how many times the loop has looped\nfor i in range(1000000): # will repeat whatever is below 1000000 times.\n    print('\\rHappened '+str(times)+' times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1\n</code></pre> Now you can see the text changing.</p> <p>Finally, you want to make sure to run <code>times = 1</code> every time you use this progressbar so that the number restarts at 1. You can also change the text to say whatever you want.</p> <p>To do a basic x/total bar, just add a bit of text that says the total: <pre><code>times = 1 # how many times the loop has looped\nfor i in range(1000000): # will repeat whatever is below 1000000 times.\n    print('\\rHappened '+str(times)+'/1000000 times.', end = '') #happened x times\n    times += 1 #this is the same as times = times + 1\n</code></pre></p> <p>For basic programmers: <pre><code>def basic_function():\n    sum = 1+1\n\ndef counter(reps):\n    times = 1\n    for i in range(reps): # will repeat whatever is below reps times.\n        basic_function()\n        print('\\rHappened '+str(times)+'/'+str(reps)+' times.', end = '') #happened x times\n        times += 1 #this is the same as times = times + 1\n\ncounter(1000000)\n</code></pre></p> <p>Just replace whatever is in basic_function with whatever you want to happen</p> <p>If you are on Python2, enter in from <code>__future__ import print_function</code> at the top of the file/first thing on your interpter</p>"},{"location":"python/progress-bar/#using-tqdm-library","title":"Using tqdm library","text":"<pre><code>from tqdm import tqdm\n\nalist = list(range(5))\n\nfor thing in tqdm(alist):\n    print(thing)  # or whatever you do...\n</code></pre> <p>A few more examples:</p> <pre><code>from tqdm import tqdm, trange\nimport random\nimport time\n\n\ndef tqdm_example_1():\n    for i in tqdm(range(10)):\n        time.sleep(0.2)\n\n\ndef tqdm_example_2():\n    for i in trange(10, desc=\"outer_loop\"):\n        for j in trange(10, desc=\"inner_loop\"):\n            time.sleep(0.01)\n\n\ndef tqdm_example_3(add_tot=False):\n    max_iter = 100\n    tot = 0\n\n    if add_tot:\n        bar = tqdm(desc=\"update example\", total=max_iter)\n    else:\n        bar = tqdm()\n\n    while tot &lt; max_iter:\n        update_iter = random.randint(1, 5)\n        bar.update(update_iter)\n        tot += update_iter\n        time.sleep(0.03)\n\n\ndef tqdm_example_4():\n    t = trange(100)\n    for i in t:\n        t.set_description(f\"on iter {i}\")\n        time.sleep(0.02)\n\n\nif __name__ == \"__main__\":\n    # tqdm_example_1()\n    # tqdm_example_2()\n    # tqdm_example_3()\n    # tqdm_example_3(True)\n    tqdm_example_4()\n</code></pre>"},{"location":"python/python-packaging/","title":"Python packaging","text":""},{"location":"python/python-packaging/#creating-a-setuppy","title":"Creating a <code>setup.py</code>","text":"<p>Example of a <code>setup.py</code> file:</p> <pre><code>from setuptools import find_packages, setup\n\nwith open(\"README.md\", \"r\", encoding=\"utf-8\") as f:\n    long_description = f.read()\n\nsetup(\n    name=\"marc\",\n    version=\"22.5.0\",\n    url=\"https://github.com/maxhumber/marc\",\n    description=\"Markov chain generator\",\n    long_description=long_description,\n    long_description_content_type=\"text/markdown\",\n    author=\"Max Humber\",\n    author_email=\"max.humber@gmail.com\",\n    license=\"MIT\",\n    classifiers=[\n        \"Development Status :: 5 - Production/Stable\",\n        \"License :: OSI Approved :: MIT License\",\n        \"Programming Language :: Python :: 3\",\n    ],\n    packages=[\"\"],\n    package_dir={\"\": \"python/src\"},\n    extras_require={\n        \"dev\": [\n            \"black&gt;=22.3.0\",\n        ],\n    },\n    python_requires=\"&gt;=3.9\",\n    setup_requires=[\"setuptools&gt;=62.1.0\"],\n)\n</code></pre>"},{"location":"python/python-packaging/#structure-of-package-with-cli-scripts","title":"Structure of package with CLI scripts","text":"<p>Example structure:</p> <pre><code>my_package/\n    my_package/\n        __init__.py\n        cli_scripts.py\n    setup.py\n</code></pre> <p>Let's assume your <code>__init__.py</code> looks like this (as a side note, I'd recommend moving the classes defined in there to a separate file, and then simply importing that file in the <code>__init__</code>):</p> <pre><code>class Test(object):\n\n    def __init__(self, a)\n        self.a = a\n\n    def __call__(self):\n        print(self.a)\n</code></pre> <p>Now there is an additional file inside the package that utilizes the stuff you implemented in the package, let's call it <code>cli_scripts.py</code>:</p> <p><pre><code>import argparse\n\nfrom my_package import Test\n\ndef parse_args():\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"a\", type=int, help=\"Just an example argument\")\n    return parser.parse_args()\n\ndef demonstration():\n    args = parse_args()\n    t = Test(a=args.a)\n    t()\n</code></pre> My suggestion now is to utilize the <code>console_scripts</code> entry point inside <code>setup.py</code>, which could now look something like this:</p> <p><pre><code>from setuptools import setup\n\nsetup(\n    name='testpy',\n    version='0.1',\n    description='Just an example',\n    author='RunOrVeith',\n    author_email='xyz@mailinator.com',\n    packages=[\"my_package\"],\n    entry_points={\n        \"console_scripts\": [\"mypkg=my_package.cli_scripts:demonstration\"]},\n    install_requires=[],\n)\n</code></pre> Now when you run <code>pip install .</code> inside the top-level <code>my_package</code> folder, your package will be installed. The <code>entry_points</code> automatically generate an executable for you, that you can now call with the name you gave it inside <code>setup.py</code>, in this example <code>mypkg</code>. This means you can now run <code>mypkg 5</code> and this will call <code>demonstration()</code>.</p> <p>This way:</p> <ul> <li>you do not need to handle any <code>__main__</code> files</li> <li>you can give your script a meaningful name</li> <li>you don't need to care whether your script is executable, or specify to run the script with python</li> <li>you can have as many of these as you want inside the list <code>entry_points</code></li> <li>it forces you to write functions that you could also call from other modules, instead of the <code>__main__</code></li> </ul>"},{"location":"python/python-version/","title":"Working with the Python version","text":"<p>To check the Python version installed, open a terminal window and entering the following: <pre><code>python \u2013\u2013version\n</code></pre></p>"},{"location":"python/python-version/#check-for-a-minimum-required-python-version","title":"Check for a minimum required Python version","text":"<p>You can check for the Python version in your code, to make sure your users are not running your script with an incompatible version. Use this simple check: <pre><code>if not sys.version_info &gt; (2, 7):\n   # berate your user for running a 10 year\n   # python version\nelif not sys.version_info &gt;= (3, 5):\n   # Kindly tell your user (s)he needs to upgrade\n   # because you're using 3.5 features\n</code></pre></p>"},{"location":"python/python-version/#check-if-32-or-64-bit-version","title":"Check if 32 or 64 bit version","text":"<pre><code>if sys.maxsize &gt; 2**32:\n    print('64 bit Python version')\nelse:\n    print('32 bit Python version')\n</code></pre>"},{"location":"python/schedule/","title":"Schedule task in Python","text":""},{"location":"python/schedule/#using-the-schedule-package","title":"Using the <code>schedule</code> package","text":"<p>Schedule lets you run Python functions (or any other callable) periodically at pre-determined intervals using a simple syntax.</p>"},{"location":"python/schedule/#install","title":"Install","text":"<pre><code>$ pip install schedule\n</code></pre>"},{"location":"python/schedule/#usage","title":"Usage","text":"<pre><code>import time\nimport schedule\n\ndef test_function():\n    print(f'test called at {time.time()}')\n\ndef test_function_2():\n    print(f'test 2 called at {time.time()}')\n\nif __name__ == '__main__':\n    schedule.every(1).seconds.do(test_function)\n    schedule.every(3).seconds.do(test_function_2)\n    # schedule.every(1).days.do(daily_task)\n    # schedule.every().thursday.at(\"10:00\").do(day_time_task)\n\n    while True:\n        schedule.run_pending()\n</code></pre>"},{"location":"python/schedule/#references","title":"References","text":"<ul> <li>schedule</li> </ul>"},{"location":"python/scientific-figures/","title":"Scientific quality figures","text":""},{"location":"python/scientific-figures/#1-using-scienceplots","title":"1) Using <code>SciencePlots</code>","text":"<p>SciencePlots is a Python pakage that provides Matplotlib styles for scientific figures. Install with:</p> <pre><code>$ pip install SciencePlots\n</code></pre> <p>To use, simple add the import and select the style:</p> <pre><code>import matplotlib.pyplot as plt\nimport scienceplots\n\nplt.style.use('science')\n</code></pre> <p>To use any of the styles temporarily, you can use a constext manager:</p> <pre><code>with plt.style.context('science'):\n    plt.figure()\n    plt.plot(x, y)\n    plt.show()\n</code></pre> <p>More information and available styles can be found here.</p>"},{"location":"python/scientific-figures/#2-using-a-predifined-stylesheet","title":"2) Using a predifined stylesheet","text":"<p>You can create and install a custom Matplotlib style. Install the styles by copying the respective <code>*.mplstyle</code> file into your Matplotlib style directory. To check where this is, in an interactive python console type:</p> <pre><code>import matplotlib\nprint(matplotlib.get_configdir())\n</code></pre> <p>You should get back something like <code>/home/johndoe/.matplotlib</code>. You can then put the <code>*.mplstyle</code> file in <code>/home/johndoe/.matplotlib/stylelib/</code> (you may need to create the stylelib directory). Here is a base configuration for a scientific style:</p> <pre><code># Matplotlib style for scientific plotting\n# Base style\n\n# Set color cycle: blue, green, yellow, red, violet, gray\naxes.prop_cycle : cycler('color', ['0C5DA5', '00B945', 'FF9500', 'FF2C00', '845B97', '474747', '9e9e9e'])\n\n# Set default figure size\nfigure.figsize : 3.5, 2.625\n\n# Set x axis\nxtick.direction : in\nxtick.major.size : 3\nxtick.major.width : 0.5\nxtick.minor.size : 1.5\nxtick.minor.width : 0.5\nxtick.minor.visible : True\n#xtick.top : True\n\n# Set y axis\nytick.direction : in\nytick.major.size : 3\nytick.major.width : 0.5\nytick.minor.size : 1.5\nytick.minor.width : 0.5\nytick.minor.visible : True\n#ytick.right : True\n\n# Set line widths\naxes.linewidth : 0.5\ngrid.linewidth : 0.5\nlines.linewidth : 1.\n\n# Remove legend frame\nlegend.frameon : False\n\n# Always save as 'tight'\nsavefig.bbox : tight\nsavefig.pad_inches : 0.05\n\n# Use serif fonts\nfont.serif : cmr10, Computer Modern Serif, DejaVu Serif\nfont.family : serif\naxes.formatter.use_mathtext : True\nmathtext.fontset : cm\n\n# Use LaTeX for math formatting\ntext.usetex : True\ntext.latex.preamble : \\usepackage{amsmath} \\usepackage{amssymb}\n</code></pre> <p>You can then use the styles in a similar fashion to that shown above. The following will apply the style globally:</p> <pre><code>plt.style.use('science')\n</code></pre> <p>You can also combine multiple styles by:</p> <pre><code>plt.style.use(['science', 'grid'])\n</code></pre> <p>To use styles on a figure by figure basis, use a contect manager:</p> <pre><code>with plt.style.context('science'):\n    plt.figure()\n    plt.plot(x, y)\n    plt.show()\n</code></pre> <p>More styles here.</p>"},{"location":"python/scientific-figures/#3-additional-usefull-formating","title":"3) Additional usefull formating","text":"<pre><code>import matplotlib.pyplot as plt\nfrom matplotlib.offsetbox import AnchoredText\n\nwith plt.style.context('science'):\n    fig, ax = plt.subplots()\n\n    ax = plot(x, y)\n\n    # Labels\n    ax.set_xlabel(r'$D_{12}$ $\\mathrm{(cm^2 s^{-1})}$')  # x-axis label using LaTeX\n    ax.set_ylabel(r'Y axis label')  # y-axis label using LaTeX\n\n    # Ticks and grids\n    ax.grid(False)  # Remove grid\n    ax.set_xlim([1, 11])  # Set x-axis limits\n    ax.set_ylim([6.5, 8.5])  # Set y-axis limits\n\n    ax.ticklabel_format(style='sci', axis='x', scilimits=(0,0))  # Set x-axis ticks to scientific notation\n    ax.ticklabel_format(style='sci', axis='both', scilimits=(0,0))  # Set both axis ticks to scientific notation\n\n    # Add a text box to a corner of the graph with e.g. 'a)'\n    anchor_text = AnchoredText('a)', pad=0, loc='upper right', frameon=False, prop=dict(fontweight=\"bold\", fontsize=12, fontfamily='serif'))\n    ax.add_artist(anchor_text)\n\n    plt.tight_layout()\n\n    fig.set_size_inches(5.25, 3.95)  # Set figure size in inches\n\n    fig.savefig('fig1.png', dpi=300, bbox_inches='tight')  # Save figure in png\n    fig.savefig('fig1.pdf', dpi=300, bbox_inches='tight')  # Save figure in pdf\n</code></pre>"},{"location":"python/seaborn/","title":"Seaborn","text":""},{"location":"python/seaborn/#change-overal-asthetics","title":"Change overal asthetics","text":"<p>Scaling plot elements, like line widths. In increasing size:</p> <pre><code>sns.set_context(\"paper\")\nsns.set_context(\"notebook\")  # default\nsns.set_context(\"talk\")\nsns.set_context(\"poster\")\n</code></pre> <p>Scaling overall text size:</p> <pre><code>sns.set(font_scale=2)\n</code></pre>"},{"location":"python/seaborn/#references","title":"References:","text":"<ul> <li>https://seaborn.pydata.org/tutorial/aesthetics.html</li> </ul>"},{"location":"python/sphinx/","title":"Creating documentation with Sphinx","text":""},{"location":"python/sphinx/#set-up","title":"Set up","text":"<p>Install Sphinx:</p> <pre><code>pip install sphinx\n</code></pre> <p>Generate the basic structure of Sphinx documentation. It is usually recommended to separate source and build directories.</p> <pre><code>sphinx-quickstart docs\n</code></pre> <p>Now we can build the HTML documentation with:</p> <pre><code>cd docs/\n.\\make.bat html\n</code></pre> <p>Note: <code>.\\make.bat html</code> is for Powershell. <code>make html</code> for macOS, Linux or Windows command prompt</p> <p>Serve with Python built-in HTTP server:</p> <pre><code>python -m http.server\n</code></pre>"},{"location":"python/sphinx/#using-markdown-with-sphinx","title":"Using Markdown with Sphinx","text":"<p>Convert RST files to Markdown:</p> <pre><code>pip install \"rst-to-myst[sphinx]\"\nrst2myst convert docs/**/*.rst\n</code></pre> <p>We can now delete the index.rst file.</p> <p>In the Sphinx <code>config.py</code> file we now need to add the following extension:</p> <pre><code>extensions = [\n    \"myst_parser\",\n]\n</code></pre> <p>and install it:</p> <pre><code>pip install myst-parser\n</code></pre> <p>Now we can build the HTML from the Markdown files.</p> <pre><code>cd docs/\nmake html\npython -m http\n</code></pre>"},{"location":"python/sphinx/#useful-configurations","title":"Useful configurations","text":"<p>To monitor changes in the docs and rebuild the HTML we can use <code>sphinx-autobuild</code>:</p> <pre><code>pip install sphinx-autobuild\nsphinx-autobuild docs/source/ docs/build/html\n</code></pre> <p>If you wish to include the README.md file in the docs, in the docs/source/index.md add the following directive:</p> <pre><code>```{include} ../../README.md\n:relative-images:\n```\n</code></pre> <p>To add a warning:</p> <pre><code>```{warning} \nWarning text.\n```\n</code></pre> <p>Other handy extensions:</p> <pre><code>extensions = [\n    'myst_parser',\n    'sphinx.ext.duration',\n    'sphinx.ext.autosectionlabel',\n]\n</code></pre> <p>Install another theme:</p> <pre><code>pip install furo\n</code></pre> <p>In the Sphinx <code>config.py</code>:</p> <pre><code>html_theme = 'furo'\n</code></pre> <p>Create a new page (<code>usage.md</code>) next to the <code>index.md</code> file. Link to a page:</p> <pre><code>Check page {doc}`usage`. \nSpecifically the section {ref}`Instalation`.\n</code></pre>"},{"location":"python/sphinx/#creating-module-pages-automatically","title":"Creating module pages automatically","text":"<pre><code>Joback Method\n=============\n\n.. automodule:: chem_eng_kit.properties.joback\n    :members:\n    :exclude-members: _sum_group_property\n</code></pre>"},{"location":"python/sphinx/#creating-docstrings","title":"Creating docstrings","text":""},{"location":"python/sphinx/#code-blocks","title":"Code blocks","text":"<pre><code>def foo():\n    '''\n    .. highlight:: python\n    .. code-block:: python\n\n        res = aFunction(something, goes, in)\n        print(res.avalue)\n    '''\n</code></pre> <p>Inline code in reStructuredText:</p> <pre><code>def foo():\n    '''\n    bla `foo()` bla\n    '''\n</code></pre> <p>Inline code in Markdown:</p> <pre><code>def foo():\n    '''\n    bla ``foo()`` bla\n    '''\n</code></pre>"},{"location":"python/sphinx/#math","title":"Math","text":"<p>Displayed math:</p> <pre><code>def foo():\n    '''\n    .. math:: V_c [cm^3/mol] = 17.5 + \\\\sum V_{c,i}\n    '''\n</code></pre> <p>Inline math:</p> <pre><code>def foo():\n    '''\n    where :math:`N_{atom}` is the number of atoms\n    '''\n</code></pre>"},{"location":"python/sql-alchemy/","title":"Databases with SQLAlchemy","text":"<p>This is an example of how to work with databases (in this example we use a SQLite database) using the SQLAlchemy Python package. The example hows how to set up a database for tracking financial transactions in several accounts (account movements).</p>"},{"location":"python/sql-alchemy/#creating-models","title":"Creating models","text":"<p>In the following example we want to create:</p> <ul> <li>A <code>User</code> model.</li> <li>Each <code>User</code> may have various <code>Account</code>s.</li> <li>The <code>Account</code> is associated to a single user.</li> <li>Each <code>Account</code> has many <code>Movement</code>s. These represent the transactions of currency in and out of each account.</li> <li>Each <code>Movement</code> belongs to a single <code>Account</code>.</li> <li>Each <code>Movement</code> may be categorized with a <code>Category</code> and a <code>Subcategory</code>.</li> <li>The <code>Subcategory</code> cannot repeat for the same <code>Category</code>.</li> </ul> <pre><code>from sqlalchemy import Column, Integer, String, Float, DateTime, Boolean, ForeignKey, UniqueConstraint\nfrom sqlalchemy.orm import declarative_base, sessionmaker, relationship\n\n\nBase = declarative_base()\n\n\nclass User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n\n    accounts = relationship(\"Account\", back_populates=\"user\", cascade=\"all, delete-orphan\")\n\n\nclass Account(Base):\n    __tablename__ = \"accounts\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n\n    user_id = Column(Integer, ForeignKey('users.id'), nullable=False)\n    user = relationship(\"User\", back_populates=\"accounts\")\n\n    movements = relationship(\"Movement\", back_populates=\"account\", cascade=\"all, delete-orphan\")\n\n\nclass Movement(Base):\n    __tablename__ = \"movements\"\n    id = Column(Integer, primary_key=True)\n    date = Column(DateTime, nullable=False)\n    description = Column(String)\n    debit = Column(Float)\n    credit = Column(Float)\n\n    account_id = Column(Integer, ForeignKey('accounts.id'), nullable=False)\n    account = relationship(\"Account\", back_populates=\"movements\")\n\n    category_id = Column(Integer, ForeignKey('categories.id'), nullable=True)\n    category = relationship(\"Category\", back_populates=\"movements\")\n\n    subcategory_id = Column(Integer, ForeignKey('subcategories.id'), nullable=True)\n    subcategory = relationship(\"Subcategory\", back_populates=\"movements\")\n\n    shared = Column(Boolean, default=False, nullable=False)\n\n\nclass Category(Base):\n    __tablename__ = \"categories\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False, unique=True)\n\n    subcategories = relationship(\"Subcategory\", back_populates=\"category\", cascade=\"all, delete-orphan\")\n    movements = relationship(\"Movement\", back_populates=\"category\")\n\n\nclass Subcategory(Base):\n    __tablename__ = \"subcategories\"\n    id = Column(Integer, primary_key=True)\n    name = Column(String, nullable=False)\n\n    category_id = Column(Integer, ForeignKey(\"categories.id\"), nullable=False)\n    category = relationship(\"Category\", back_populates=\"subcategories\")\n\n    movements = relationship(\"Movement\", back_populates=\"subcategory\")\n\n    # Make so a subcategory cannot repeat within a category but can across categories\n    __table_args__ = (\n        UniqueConstraint('name', 'category_id', name='uix_name_category'),\n    )\n</code></pre>"},{"location":"python/sql-alchemy/#connecting-to-the-database","title":"Connecting to the database","text":"<p>Let's connect to the database now. In the following, we if the database already exists and if it doesn't, we create it.</p> <pre><code>from pathlib import Path\nfrom sqlalchemy.orm import sessionmaker\n\n\ndb_path = Path('database.db')\n\nfirst_time = not db_path.exists()  # False if DB exist, otherwise True (first time connecting)\n\nengine = create_engine(f\"sqlite:///{db_path}\", echo=False)\n\n# If this is the first time connecting create all tables\nif first_time:\n    Base.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\n\nsession = Session()\n</code></pre>"},{"location":"python/sql-alchemy/#adding-data-to-the-database","title":"Adding data to the database","text":"<p>Adding a single <code>User</code>. The code avoids adding a user if another exists with the same name.</p> <pre><code>USERNAME = 'John'\n\nuser = session.query(User).filter_by(name=USERNAME).first()  # returns None if no user with name John exists.\n\n# Add user if it doesn't exist\nif not user:\n    user = User(name=USERNAME)\n    session.add(user)\n    print(f\"Created User &lt;{user.name}&gt;.\")\n</code></pre> <p>Adding rows from a Pandas dataframe. We assume <code>Account</code>s, <code>Category</code>s, and <code>Subcategory</code>s have already been added.</p> <pre><code># We assume we have a dataframe called df\n\nfor i, row in df.iterrows():\n    # Find account\n    account = session.query(Account).filter_by(name=row['Account']).first()\n\n    # Find category and subcategory\n    if pd.isna(row[\"Category\"]):  # We want NaN values in the dataframe to translate to NULL values in the database\n        category = None\n        subcategory = None\n\n    else:\n        category = session.query(Category).filter_by(name=row[\"Category\"]).first()\n\n        if pd.isna(row[\"Subcategory\"]):\n            subcategory = None\n        else:\n            subcategory = session.query(Subcategory).filter_by(name=row[\"Subcategory\"], category=category).first()\n\n    # Create movement\n    movement = Movement(\n            date=row['Date'],\n            description=row['Description'],\n            debit=row['Debit'],\n            credit=row['Credit'],\n            account=account,\n            category=category,\n            subcategory=subcategory\n        )\n    session.add(movement)\n\n# Commit all new items to the database. Including the user from above,\nsession.commit()\n</code></pre>"},{"location":"python/sql-alchemy/#references","title":"References","text":"<ul> <li>SQLAlchemy Documentation</li> </ul>"},{"location":"python/store-dicts/","title":"Storing dictionaries for later use: JSON and Pickle","text":""},{"location":"python/store-dicts/#json","title":"JSON","text":"<p>Saving: <pre><code>import json\nwith open('data.json', 'w') as fp:\n    json.dump(data, fp)\n</code></pre></p> <p>Supply extra arguments like sort_keys or indent to get a pretty result. The argument sort_keys will sort the keys alphabetically and indent will indent your data structure with indent=N spaces. <pre><code>json.dump(data, fp, sort_keys=True, indent=4)\n</code></pre></p> <p>Loading: <pre><code>with open('data.json', 'r') as fp:\n    data = json.load(fp)\n</code></pre></p>"},{"location":"python/store-dicts/#jsondump-vs-jsondumps-jsonload-vs-jsonloads","title":"json.dump() vs json.dumps(), json.load() vs json.loads()","text":"<p>If you want to dump the JSON into a file/socket or whatever, then you should go for <code>dump()</code>. If you only need it as a string (for printing, parsing or whatever) then use <code>dumps()</code> (dump string). The functions with an <code>s</code> take string parameters. The others take file streams.</p>"},{"location":"python/store-dicts/#pickle","title":"Pickle","text":"<p>Saving: <pre><code>import cPickle as pickle\nwith open('data.p', 'wb') as fp:\n    pickle.dump(data, fp)\n</code></pre></p> <p>Loading: <pre><code>with open('data.p', 'rb') as fp:\n    data = pickle.load(fp)\n</code></pre></p>"},{"location":"python/stravalib/","title":"Interfacing with Strava API using stavalib","text":""},{"location":"python/stravalib/#instalation","title":"Instalation:","text":"<p><code>$ pip install stravalib</code></p>"},{"location":"python/stravalib/#usage","title":"Usage:","text":"<pre><code>from stravalib import Client\n\nclient = Client(access_token='fgd456fgs5dgs546dfg')\nathlete = client.get_athlete()  # Get your athlete profile\nathlete2 = client.get_athlete(227615)  # By providing an athlete ID you can access other people\n</code></pre> <p>To get a given activity, use the get_activity function and provide activity_id: <pre><code>activity = client.get_activity(207650614)\n\n# Activity object has many basic properties such as type and distance.\nprint(\"type={0.type} distance={1} km\".format(activity, unithelper.kilometers(activity.distance)))\n</code></pre></p> <p>Activity information: <pre><code># Activities can have many streams, you can request desired stream types\ntypes = ['time', 'latlng', 'altitude', 'heartrate', 'temp', ]\n\nstreams = client.get_activity_streams(123, types=types, resolution='medium')\n\n#  Result is a dictionary object.  The dict's key are the stream type.\nif 'altitude' in streams.keys():\n    print(streams['altitude'].data)\n</code></pre></p> <p>List of Activities: <pre><code>for activity in client.get_activities(after = \"2010-01-01T00:00:00Z\",  limit=5):  # To get newest to oldest use before argument.\n    print(\"{0.name} {0.moving_time}\".format(activity))\n</code></pre></p>"},{"location":"python/stravalib/#official-documentation","title":"Official documentation","text":"<ul> <li>Strava API Docs</li> <li>stravalib Docs</li> </ul>"},{"location":"python/streamlit/","title":"Streamlit","text":""},{"location":"python/streamlit/#instalation","title":"Instalation","text":"<pre><code>$ pip install streamlit\n</code></pre>"},{"location":"python/streamlit/#run","title":"Run","text":"<pre><code>$ streamlit run myfile.py\n</code></pre>"},{"location":"python/streamlit/#references","title":"References","text":"<ul> <li>Streamlit Docs</li> <li>Streamlit Cheat Sheet</li> </ul>"},{"location":"python/type-hints/","title":"Python type hints","text":"<p>Python has support for optional \"type hints\". These \"type hints\" are a special syntax that allow declaring the type of a variable. By declaring types for your variables, editors and tools can give you better support.</p>"},{"location":"python/type-hints/#variables","title":"Variables","text":"<p>This is how you declare the type of a variable type in Python 3.6+:</p> <pre><code>age: int = 1\n</code></pre> <p>You don't need to initialize a variable to annotate it:</p> <pre><code>a: int  # Ok (no value at runtime until assigned)\n</code></pre> <p>This is useful in conditional branches:</p> <pre><code>child: bool\nif age &lt; 18:\n    child = True\nelse:\n    child = False\n</code></pre>"},{"location":"python/type-hints/#built-in-types","title":"Built-in types","text":"<pre><code>from typing import List, Set, Dict, Tuple, Optional\n</code></pre> <p>For simple built-in types, just use the name of the type:</p> <pre><code>x: int = 1\nx: float = 1.0\nx: bool = True\nx: str = \"test\"\nx: bytes = b\"test\"\n</code></pre> <p>For collections, the type of the collection item is in brackets (Python 3.9+):</p> <pre><code>x: list[int] = [1]\nx: set[int] = {6, 7}\n</code></pre> <p>Note: In Python 3.8 and earlier, the name of the collection type is capitalized, and the type is imported from the <code>typing</code> module:</p> <pre><code>x: List[int] = [1]\nx: Set[int] = {6, 7}\n</code></pre> <p>For mappings, we need the types of both keys and values:</p> <pre><code>x: dict[str, float] = {\"field\": 2.0}  # Python 3.9+\n</code></pre> <p>For tuples of fixed size, we specify the types of all the elements:</p> <pre><code>x: tuple[int, str, float] = (3, \"yes\", 7.5)  # Python 3.9+\n</code></pre> <p>For tuples of variable size, we use one type and ellipsis:</p> <pre><code>x: tuple[int, ...] = (1, 2, 3)  # Python 3.9+\n</code></pre> <p>Use <code>Optional[]</code> for values that could be <code>None</code>:</p> <pre><code>x: Optional[str] = some_function()\n</code></pre>"},{"location":"python/type-hints/#functions","title":"Functions","text":"<pre><code>from typing import Callable, Iterator, Union, Optional\n</code></pre> <p>This is how you annotate a function definition:</p> <pre><code>def stringify(num: int) -&gt; str:\n    return str(num)\n</code></pre> <p>And here's how you specify multiple arguments:</p> <pre><code>def plus(num1: int, num2: int) -&gt; int:\n    return num1 + num2\n</code></pre> <p>Add default value for an argument after the type annotation:</p> <pre><code>def f(num1: int, my_float: float = 3.5) -&gt; float:\n    return num1 + my_float\n</code></pre> <p>This is how you annotate a callable (function) value:</p> <pre><code>x: Callable[[int, float], float] = f\n</code></pre> <p>A generator function that yields ints is secretly just a function that returns an iterator of ints, so that's how we annotate it:</p> <pre><code>def g(n: int) -&gt; Iterator[int]:\n    i = 0\n    while i &lt; n:\n        yield i\n        i += 1\n</code></pre> <p>You can of course split a function annotation over multiple lines:</p> <pre><code>def send_email(address: Union[str, list[str]],\n               sender: str,\n               cc: Optional[list[str]],\n               bcc: Optional[list[str]],\n               subject='',\n               body: Optional[list[str]] = None\n               ) -&gt; bool:\n    ...\n</code></pre> <p>An argument can be declared positional-only by giving it a name starting with two underscores:</p> <pre><code>def quux(__x: int) -&gt; None:\n    pass\n\nquux(3)  # Fine\nquux(__x=3)  # Error\n</code></pre>"},{"location":"python/type-hints/#more-advanced-stuff","title":"More advanced stuff","text":"<p>Use <code>Union</code> when something could be one of a few types:</p> <pre><code>x: list[Union[int, str]] = [3, 5, \"test\", \"fun\"]\n</code></pre> <p>Use <code>Any</code> if you don't know the type of something or it's too dynamic to write a type for:</p> <pre><code>x: Any = mystery_function()\n</code></pre> <p>This makes each positional argument and each keyword arg a <code>str</code>:</p> <pre><code>def call(self, *args: str, **kwargs: str) -&gt; str:\n    request = make_request(*args, **kwargs)\n    return self.do_api_query(request)\n</code></pre>"},{"location":"python/type-hints/#standard-duck-types","title":"Standard \"duck types\"","text":"<p>In typical Python code, many functions that can take a list or a dict as an argument only need their argument to be somehow \"list-like\" or \"dict-like\". A specific meaning of \"list-like\" or \"dict-like\" (or something-else-like) is called a \"duck type\", and several duck types that are common in idiomatic Python are standardized.</p> <pre><code>from typing import Mapping, MutableMapping, Sequence, Iterable\n</code></pre> <p>Use <code>Iterable</code> for generic iterables (anything usable in <code>for</code>), and <code>Sequence</code> where a sequence (supporting <code>len</code> and <code>__getitem__</code>) is required:</p> <pre><code>def f(ints: Iterable[int]) -&gt; list[str]:\n    return [str(x) for x in ints]\n\nf(range(1, 3))\n</code></pre> <p><code>Mapping</code> describes a dict-like object (with <code>__getitem__</code>) that we won't mutate, and <code>MutableMapping</code> one (with <code>__setitem__</code>) that we might:</p> <pre><code>def f(my_mapping: Mapping[int, str]) -&gt; list[int]:\n    my_mapping[5] = 'maybe'  # if we try this, mypy will throw an error...\n    return list(my_mapping.keys())\n\nf({3: 'yes', 4: 'no'})\n</code></pre> <pre><code>def f(my_mapping: MutableMapping[int, str]) -&gt; set[str]:\n    my_mapping[5] = 'maybe'  # ...but mypy is OK with this.\n    return set(my_mapping.values())\n\nf({3: 'yes', 4: 'no'})\n</code></pre>"},{"location":"python/type-hints/#classes","title":"Classes","text":"<pre><code>class MyClass:\n    # You can optionally declare instance variables in the class body\n    attr: int\n    # This is an instance variable with a default value\n    charge_percent: int = 100\n\n    # The \"__init__\" method doesn't return anything, so it gets return type \"None\" just like any other method that doesn't return anything\n    def __init__(self) -&gt; None:\n        ...\n\n    # For instance methods, omit type for \"self\"\n    def my_method(self, num: int, str1: str) -&gt; str:\n        return num * str1\n</code></pre> <p>User-defined classes are valid as types in annotations:</p> <pre><code>x: MyClass = MyClass()\n</code></pre> <p>You can use the <code>ClassVar</code> annotation to declare a class variable:</p> <pre><code>class Car:\n    seats: ClassVar[int] = 4\n    passengers: ClassVar[list[str]]\n</code></pre> <p>You can also declare the type of an attribute in <code>__init__</code>:</p> <pre><code>class Box:\n    def __init__(self) -&gt; None:\n        self.items: list[str] = []\n</code></pre>"},{"location":"python/type-hints/#references","title":"References","text":"<ul> <li>mypy - Type hints cheat sheet</li> <li>FastAPI - Python Types Intro</li> </ul>"},{"location":"python/uv/","title":"Working with uv","text":"<p><code>uv</code> is a Python package and project manager. It is extremely fast, compared with alternatives.</p>"},{"location":"python/uv/#installing","title":"Installing","text":"<p>On Windows, you can install <code>uv</code> using Powershell:</p> <pre><code>$ powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n</code></pre> <p>More info on other installation options can be found on the uv docs.</p> <p>To update uv:</p> <pre><code>$ uv self update\n</code></pre>"},{"location":"python/uv/#starting-a-new-project","title":"Starting a new project","text":"<p>Starting a project with <code>uv</code>:</p> <pre><code>$ uv init project_name\n</code></pre> <p><code>uv</code> creates a new directory called <code>project_name</code> and sets up a few project files. You can then enter the project folder.</p> <pre><code>$ cd project_name\n</code></pre> <p>Note: If you already have a project folder you can ask <code>uv</code> to initialize the project there:</p> <pre><code>$ cd project_name\n$ uv init\n</code></pre> <p>When starting a new project you can specify the Python version using:</p> <pre><code>$ uv init project_name --python 3.11\n</code></pre>"},{"location":"python/uv/#installing-packages","title":"Installing packages","text":"<p>To add packages:</p> <pre><code>$ cd project_name\n$ uv add requests flask\n</code></pre> <p>To remove packages:</p> <pre><code>$ uv remove flask\n</code></pre> <p>Working with development dependencies:</p> <pre><code>$ uv add --dev black\n$ uv run black path\\to\\file.py\n</code></pre>"},{"location":"python/uv/#running-scripts","title":"Running scripts","text":"<p>To run python files in you environment use:</p> <pre><code>$ uv run example.py\n</code></pre>"},{"location":"python/uv/#working-with-tools","title":"Working with tools","text":"<p>Tools are pacakges that can perform several functions but are not part of your project. For instance, it is common to use a linter/formatter when developing (e.g., <code>ruff</code>). With <code>uv</code> you can use tools like <code>ruff</code> in different ways.</p>"},{"location":"python/uv/#ways-to-use-tools","title":"Ways to use tools","text":"<p>1) Running a tool without installing it (it's installed in a temporary environment and deleted after use). <pre><code>$ uv tool run ruff check\n</code></pre>   The following alias can also be used and results in the same:   <pre><code>$ uvx ruff check\n</code></pre></p> <p>2) When a tool is used frequently it may be usefull to install it to a persistent environment and add it to the <code>PATH</code>.   <pre><code>$ uv tool install ruff\n</code></pre>   Now, whatever the project you are wirking in, you can run <code>ruff</code> by doing:   <pre><code>$ ruff check\n</code></pre></p> <p>3) You can also install the tool in your project as a development dependency   <pre><code>$ uv add --dev ruff\n</code></pre>   And run it with   <pre><code>$ uv run ruff check\n</code></pre></p>"},{"location":"python/uv/#upgrading-tools","title":"Upgrading tools","text":"<p>Upgrade all tools with: <pre><code>$ uv tool upgrade --all\n</code></pre></p> <p>Or a single tool with: <pre><code>$ uv tool upgrade ruff\n</code></pre></p>"},{"location":"python/uv/#working-with-jupyter","title":"Working with <code>jupyter</code>","text":"<p>If you're working within a project, you can start a Jupyter server with access to the project's virtual environment by: <pre><code>$ uv run --with jupyter jupyter lab\n</code></pre></p> <p>Alternatively you can install Jupyter as a dev dependency in your project <pre><code>$ uv add --dev jupyterlab\n$ uv run jupyter lab\n</code></pre></p>"},{"location":"python/uv/#project-entry-points-and-command-line-interfaces","title":"Project entry points and command line interfaces","text":"<p>To create a project CLI you need to configure entry point tables in the <code>pyproject.toml</code> and add a build system. For example, to declare a command called <code>hello</code> that invokes the <code>hello</code> function in the <code>example</code> module:</p> <p>In the <code>pyproject.toml</code> file:</p> <pre><code>[build-system]\nrequires = [\"setuptools&gt;=61.0\", \"wheel\"]\nbuild-backend = \"setuptools.build_meta\"\n\n[project.scripts]\nhello = \"example:hello\"\n</code></pre> <p>You can then run the command with: <pre><code>$ uv run hello\n</code></pre></p>"},{"location":"python/uv/#deploying","title":"Deploying","text":"<p>Deploying the project to production excluding dev dependencies:</p> <pre><code>$ uv sync --no-dev\n</code></pre>"},{"location":"python/uv/#references","title":"References","text":"<ul> <li>uv Documentation</li> </ul>"},{"location":"python/virtual-environments/","title":"Virtual enviroments","text":""},{"location":"python/virtual-environments/#main-packages-to-handle-virtual-environments","title":"Main packages to handle virtual environments","text":"<ul> <li>venv (Standard Library)</li> <li>uv</li> <li>Pipenv</li> <li>virtualenv</li> <li>Poetry</li> </ul>"},{"location":"python/virtual-environments/#venv-standard-library","title":"venv (Standard Library)","text":"<p><code>venv</code> already comes with the Python Standard Library so no installation is required.</p>"},{"location":"python/virtual-environments/#create-a-new-virtual-enviroment","title":"Create a new virtual enviroment:","text":"<p>To create a new virtual environment:  <pre><code>$ python -m venv env_name\n</code></pre> A new folder appears in your current location containinng the new Python installation. The environemnt uses the same Python version as the one used to create it. </p> <p>To activate the virtual environment:  <pre><code>$ env_name/Scripts/activate.bat      # Windows command line\n$ env_name/Scripts/activate          # Windows command line or Powershell\n$ env_name/Scripts/Activate.ps1      # Windows Powershell\n$ source env_name/bin/activate       # Unix system\n</code></pre> Once the virtual environment is activated, when you install a package with <code>pip install package</code>, it will only be installed in the environment.</p> <p>To deactivate the virtual environment:  <pre><code>$ deactivate\n</code></pre></p> <p>You can check installed packages in the new environment by running the command below. For a new/clean environment you should get the following output. </p> <pre><code>$ pip list\n\nPackage    Version\n---------- -------\npip        24.1.1\nsetuptools 65.5.0\n</code></pre> <p>To create a requirements file for your project:  <pre><code>$ pip freeze &gt; requirements.txt\n</code></pre></p> <p>To delete the virtual environment completly just delete the enviroment folder (<code>env_name</code>) or run:  <pre><code>$ rmdir env_name /s\n</code></pre></p> <p>To install packages from an existing <code>requirements.txt</code> file:  <pre><code>pip install -r requirements.txt`\n</code></pre></p>"},{"location":"python/virtual-environments/#uv","title":"uv","text":"<p>To create a virtual environment in a given directory: <pre><code>$ uv venv\n</code></pre> If no directory name is provided, the venv will be created in the directory <code>.venv</code>.</p> <p>To activate the virtual environment run: <pre><code>$ .venv/Scripts/activate         # on Windows Powershell\n$ source .venv/bin/activate      # Unix system\n</code></pre></p> <p>Installing packages from PyPI: <pre><code>$ uv pip install &lt;package_name&gt;\n</code></pre></p> <p>Installing from a git repository: <pre><code>$ uv pip install \"&lt;package_name&gt; @ https://github.com/&lt;user&gt;/&lt;repo&gt;\"\n</code></pre></p> <p>To list what\u2019s installed in a given venv <pre><code>$ uv pip freeze\n</code></pre> You can direct the results to a file like: <pre><code>$ uv pip freeze &gt; requeirements.txt\n</code></pre> The list will have explicit version requirements for each package, meaning it will be \u201clocked\u201d to the specific versions.</p> <p>If you want to take an existing <code>pyproject.toml</code> or <code>requirements.in</code> file and generate a locked dependency set as <code>requirement.txt</code>, use: <pre><code>$ uv pip compile pyproject.toml -o requirements.txt\n# or\n$ uv pip compile requirements.in -o requirements.txt\n</code></pre></p> <p>To bring a project\u2019s installed dependencies in sync with a list of locked dependencies use: <pre><code>$ uv pip sync requirements.txt\n</code></pre></p>"},{"location":"python/virtual-environments/#pipenv","title":"Pipenv","text":"<p>Installing Pipenv: <code>$ pip install pipenv</code></p> <p>To upgrade Pipenv at any time run: <code>$ pip install --upgrade pipenv</code></p>"},{"location":"python/virtual-environments/#installing-packages-for-your-project","title":"Installing packages for your project","text":"<p><pre><code>$ cd myproject\n$ pipenv install requests\n</code></pre> Pipenv will install the excellent Requests library and create a Pipfile for you in your project\u2019s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with others.</p> <p>To install as a dev dependency run: <pre><code>$ pipenv install -dev requests\n</code></pre></p> <p>To remove an installed package run: <pre><code>$ pipenv uninstall requests\n</code></pre></p>"},{"location":"python/virtual-environments/#using-installed-packages","title":"Using installed packages","text":"<p>Import your packages normally in your scripts. Then you can run the script using <code>pipenv run</code>:</p> <pre><code>$ pipenv run python main.py\n</code></pre> <p>Using <code>$ pipenv run</code> ensures that your installed packages are available to your script. </p> <p>It's also possible to spawn a new shell that ensures all commands have access to your installed packages with <code>$ pipenv shell</code>. <pre><code>$ pipenv shell\n(env-name) $ python main.py\n</code></pre></p>"},{"location":"python/virtual-environments/#other-commands","title":"Other commands:","text":"<ul> <li><code>pipenv --rm</code>: Removes the virtual environment completly</li> <li><code>pipenv --python 3.6.5</code>: Specify Python version</li> <li><code>pipenv --venv</code>: Shows virtual environment path</li> <li><code>pipenv graph</code>: Dependencies tree</li> <li><code>pipenv install --dev -e .</code>: Install as editable</li> </ul>"},{"location":"python/virtual-environments/#set-enviromental-variables","title":"Set enviromental variables","text":"<p>Create a <code>.env</code> file at the root folder of the project, next to the <code>Pipfile</code>. Add enviromental variables like so: <pre><code>MY_TOKEN=SuperToKen\nMY_VAR=SuperVar\n</code></pre></p> <p>You can add comments in this file with a leading <code>#</code>. This file will be loaded automatically with <code>pipenv shell</code> or <code>pipenv run your_command</code> and the environment variables will be available.</p> <p>You can access/check them in your code with: <pre><code>print(os.getenv('MY_TOKEN', 'Token Not found'))\n</code></pre></p> <p>Note: Remember to exclude this file from your version control.</p>"},{"location":"python/virtual-environments/#references","title":"References","text":"<ul> <li>Pipenv Documentation</li> <li>Pipenv playground</li> </ul>"},{"location":"python/virtual-environments/#virtualenv-package","title":"virtualenv package","text":"<p>Install: <code>$ pip install virtualenv</code></p>"},{"location":"python/virtual-environments/#create-a-new-virtual-enviroment_1","title":"Create a new virtual enviroment:","text":"<p>My prefered method is to create the environment in the respective project folder and naming it venv. Another alternative is to have a folder where you place all your virtualenvironments and name them according to their respective project. <pre><code>$ cd desired_folder\n$ virtualenv venv \n</code></pre></p>"},{"location":"python/virtual-environments/#to-activate-the-environment","title":"To activate the environment:","text":"<p>(Windows) <code>$ venv/Scripts/activate.bat</code></p> <p>(Linux) <code>$ source venv/bin/activate</code> </p> <p>Once activated you can normaly use pip to install packages in this environment: <code>$ pip install blabla</code></p> <p>You can see the list of installed packages using: <code>$ pip list</code></p> <p>To transfer the environment to another machine you can use: <code>$ pip freeze &gt; requirements.txt</code> </p> <p>This will create a requirements.txt file, which contains a simple list of all the packages in the current environment, and their respective versions. Later, if you need to re-create the environment, install the same packages using the same versions: <code>$ pip install -r requirements.txt</code></p>"},{"location":"python/virtual-environments/#to-deactivate-the-environment","title":"To deactivate the environment:","text":"<p>(Windows) <code>$ venv/Scripts/deactivate.bat</code></p> <p>(Linux) <code>$ deactivate</code></p>"},{"location":"python/virtual-environments/#poetry","title":"Poetry","text":"<p>Poetry not only handles dependenct management through virtual environments but also has several other features like pachaging.</p>"},{"location":"python/virtual-environments/#install","title":"Install","text":"<p>The recommended way to install Poetry on Windows is via Powershell:</p> <p><pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n</code></pre> You only need to install Poetry once. It will automatically pick up the current Python version and use it to create virtualenvs accordingly.</p> <p>To compleatly uninstall Poetry run:</p> <pre><code>python get-poetry.py --uninstall\n</code></pre> <p>or </p> <pre><code>(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py - --uninstall\n</code></pre>"},{"location":"python/virtual-environments/#usage","title":"Usage","text":"<p>To create a new project run named <code>poetry-demo</code>: <pre><code>poetry new poetry-demo\n</code></pre> This will create the <code>poetry-demo</code> directory with the following content: <pre><code>poetry-demo\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.rst\n\u251c\u2500\u2500 poetry_demo\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_poetry_demo.py\n</code></pre></p> <p>To add or modify dependencies you can edit the <code>pyproject.toml</code> file. Alternatively you can add a dependency by running: <pre><code>poetry add package_name\n</code></pre> To add to dev packages run: <pre><code>poetry add package_name --dev\n</code></pre> By default, Poetry creates a virtual environment in <code>{cache-dir}\\virtualenvs</code> on Windows.</p> <p>To run your script user: <pre><code>poetry run python your_script.py\nOR\npoetry run pytest\n</code></pre></p> <p>To activate the virtual environment create a poetry shell with: <pre><code>poetry shell\n</code></pre></p> <p>To deactivate the virtual environment and exit this new shell type <code>exit</code></p> <p>To install the defined dependencies for your project:  <pre><code>poetry install\n</code></pre></p> <p>To list all of the available packages: <pre><code>poetry show\n</code></pre></p> <p>To create a <code>pip</code> style <code>requirements.txt</code> file (including dev dependencies) <pre><code>poetry export -f requirements.txt --output requirements.txt --dev --without-hashes\n</code></pre></p>"},{"location":"python/basics/abstract-classes/","title":"Abstract classes","text":"<p>Abstract class is an extension of a basic class. Like a basic class, an abstract class has methods and state. Unlike a basic class, it inherits the <code>ABC</code> class and has at least one <code>abstractmethod</code>. That means we cannot create an instance directly from its constructor. We will create an abstract class and two concrete classes.</p>"},{"location":"python/basics/abstract-classes/#creating-the-classes","title":"Creating the classes","text":"<p>First let's create an abstract definition of an employee. Any employee can work and relax. The way that one type of employee can work and relax is different from another type of employee.</p> <pre><code>from abc import ABC, abstractmethod\n\nclass Employee(ABC):\n    def __init__(self, name, title):\n        self.name = name\n        self.title = title\n\n    def __str__(self):\n        return self.name\n\n    @abstractmethod\n    def do_work(self):\n        \"\"\"Do something for work.\"\"\"\n        raise NotImplementedError\n\n    @abstractmethod\n    def do_relax(self):\n        \"\"\"Do something to relax.\"\"\"\n        raise NotImplementedError\n</code></pre> <p>Then we can create a concrete definition of an engineer. The Engineer class is concrete because it implements every <code>abstractmethod</code> that was not implemented above. Notice that we leverage the parent's constructor when creating this object. We also define <code>do_refactor</code> for an engineer, which is something that a manager prefers not to do.</p> <pre><code>class Engineer(Employee):\n    def __init__(self, name, title, skill):\n        super().__init__(name, title)\n        self.skill = skill\n\n    def do_work(self):\n        return f\"{self} is coding in {self.skill}\"\n\n    def do_relax(self):\n        return f\"{self} is watching YouTube\"\n\n    def do_refactor(self):\n        \"\"\"Do the hard work of refactoring code, unlike managers.\"\"\"\n        return f\"{self} is refactoring code\"\n</code></pre> <p>Now we create a oncrete definition of a manager. The Manager class is concrete for the same reasons as the Engineer class is concrete. Notice that a manager has direct reports and has the responsibility of hiring people on the team, unlike an engineer.</p> <pre><code>class Manager(Employee):\n    def __init__(self, name, title, direct_reports):\n        super().__init__(name, title)\n        self.direct_reports = direct_reports\n\n    def do_work(self):\n        return f\"{self} is meeting up with {len(self.direct_reports)} reports\"\n\n    def do_relax(self):\n        return f\"{self} is taking a trip to the Bahamas\"\n\n    def do_hire(self):\n        \"\"\"Do the hard work of hiring employees, unlike engineers.\"\"\"\n        return f\"{self} is hiring employees\"\n</code></pre>"},{"location":"python/basics/abstract-classes/#using-the-classes","title":"Using the classes","text":"<p>Declare two engineers:</p> <pre><code>engineer_john = Engineer(\"John Doe\", \"Software Engineer\", \"Android\")\nengineer_jane = Engineer(\"Jane Doe\", \"Software Engineer\", \"iOS\")\n</code></pre> <p>These engineers are employees but not managers: <pre><code>assert all(isinstance(engineer, Employee) for engineer in engineers)\nassert all(not isinstance(engineer, Manager) for engineer in engineers)\n</code></pre></p> <p>Engineers can work, relax and refactor: <pre><code>assert engineer_john.do_work() == \"John Doe is coding in Android\"\nassert engineer_john.do_relax() == \"John Doe is watching YouTube\"\nassert engineer_john.do_refactor() == \"John Doe is refactoring code\"\n</code></pre></p> <p>Declare manager with engineers as direct reports: <pre><code>manager_max = Manager(\"Max Doe\", \"Engineering Manager\", engineers)\n</code></pre></p> <p>Managers are employees but not engineers: <pre><code>assert isinstance(manager_max, Employee)\nassert not isinstance(manager_max, Engineer)\n</code></pre></p> <p>Managers can work, relax and hire: <pre><code>assert manager_max.do_work() == \"Max Doe is meeting up with 2 reports\"\nassert manager_max.do_relax() == \"Max Doe is taking a trip to the Bahamas\"\nassert manager_max.do_hire() == \"Max Doe is hiring employees\"\n</code></pre></p>"},{"location":"python/basics/arg-parse/","title":"Argument parsing using the argparse module","text":""},{"location":"python/basics/arg-parse/#argparse","title":"argparse","text":"<p>argparse is a Python Standard Library module to write user-friendly command-line interfaces. The program defines what arguments it requires, and argparse will figure out how to parse those out of sys.argv. The argparse module also automatically generates help and usage messages and issues errors when users give the program invalid arguments</p>"},{"location":"python/basics/arg-parse/#initialize","title":"Initialize","text":"<pre><code>import argparse\n\n# Instantiate the parser\nparser = argparse.ArgumentParser(prog='Optional app name', \n                                 description='Optional app description', \n                                 epilog='Enjoy the program!')\n</code></pre> <p>By default, the argparse uses the value of the sys.argv[0] element to set the name of the program (name of the Python script). However, you can specify the name of your program just by using the <code>prog</code> keyword.</p> <p>You can customize the text displayed before and after the arguments help text using the <code>description</code> and <code>epilog</code> keywords.</p>"},{"location":"python/basics/arg-parse/#add-arguments","title":"Add Arguments","text":"<pre><code># Required positional argument\nparser.add_argument('pos_arg', type=int,\n                    help='A required integer positional argument')\n\n# Optional positional argument\nparser.add_argument('opt_pos_arg', type=int, nargs='?',\n                    help='An optional integer positional argument')\n\n# Optional argument\nparser.add_argument('--opt_arg', type=int,\n                    help='An optional integer argument')\n\n# Switch\nparser.add_argument('--switch', action='store_true',\n                    help='A boolean switch')\n</code></pre>"},{"location":"python/basics/arg-parse/#parse","title":"Parse","text":"<pre><code>args = parser.parse_args()\n</code></pre>"},{"location":"python/basics/arg-parse/#access","title":"Access","text":"<pre><code>print(\"Argument values:\")\nprint(args.pos_arg)\nprint(args.opt_pos_arg)\nprint(args.opt_arg)\nprint(args.switch)\n</code></pre>"},{"location":"python/basics/arg-parse/#check-values","title":"Check Values","text":"<pre><code>if args.pos_arg &gt; 10:\n    parser.error(\"pos_arg cannot be larger than 10\")\n</code></pre>"},{"location":"python/basics/arg-parse/#usage","title":"Usage","text":"<p>Assuming the Python code above is saved into a file called <code>prog.py</code>.</p>"},{"location":"python/basics/arg-parse/#correct-use","title":"Correct use:","text":"<pre><code>$ python prog.py 1 2 --opt_arg 3 --switch\n\nArgument values:\n1\n2\n3\nTrue\n</code></pre>"},{"location":"python/basics/arg-parse/#incorrect-arguments","title":"Incorrect arguments:","text":"<pre><code>$ python prog.py foo 2 --opt_arg 3 --switch\nusage: convert [-h] [--opt_arg OPT_ARG] [--switch] pos_arg [opt_pos_arg]\nprog.py: error: argument pos_arg: invalid int value: 'foo'\n\n$ python prog.py 11 2 --opt_arg 3\nArgument values:\n11\n2\n3\nFalse\nusage: python prog.py [-h] [--opt_arg OPT_ARG] [--switch] pos_arg [opt_pos_arg]\nconvert: error: pos_arg cannot be larger than 10\n</code></pre>"},{"location":"python/basics/arg-parse/#full-help","title":"Full help","text":"<pre><code>$ python prog.py -h\n</code></pre>"},{"location":"python/basics/arg-parse/#subcommands","title":"Subcommands","text":"<p>Many programs split up their functionality into a number of sub-commands. You can create the sub-commands with the <code>add_subparsers()</code> method. Here is an example of a CLI names <code>program.py</code>.</p> <pre><code>import argparse\n\n# Create the parser\nparser = argparse.ArgumentParser(prog='argparseCLI', description='argparse CLI')\nsubparsers = parser.add_subparsers(dest='command', help='sub-command help')\n\n# Subparser for sum command\nsubparser_sum = subparsers.add_parser('sum', help='sum help')\nsubparser_sum.add_argument('num1', type=int, help='num 1')\nsubparser_sum.add_argument('num2', type=int, help='num 2')\n\n# Subparser for hi command\nsubparser_hi = subparsers.add_parser('hi', help='hi help')\nsubparser_hi.add_argument('name', type=str, help='Name')\n\n# Parse arguments\nargs = parser.parse_args()\n\n# Run\nif args.command == 'sum':\n    print(args.num1 + args.num2)\nelif args.command == 'hi':\n    print(f'Hi {args.name}')\n</code></pre> <p>You use it like so:</p> <pre><code>$ python program.py sum 1 3\n4\n\n$ python program.py hi John\nHi John\n\n$ python program.py sum John\nusage: program sum [-h] num1 num2\nargparseCLI sum: error: argument num1: invalid int value: 'John'\n</code></pre>"},{"location":"python/basics/arg-parse/#argh-wrapper-to-simplify-argparse","title":"<code>Argh</code>: wrapper to simplify argparse","text":"<pre><code>import argh\n\ndef do_the_thing(required_arg, optional_arg=1, other_optional_arg=False):\n    \"\"\"\n    I am a docstring\n    \"\"\"\n    print((required_arg, type(required_arg)))\n    print((optional_arg, type(optional_arg)))\n    print((other_optional_arg, type(other_optional_arg)))\n\n\n@argh.arg('--bool-arg-for-flag', '-b', help=\"Flip this flag for things\")\n@argh.arg('arg_with_choices', choices=['one', 'two', 'three'])\ndef do_the_other_thing(arg_with_choices, bool_arg_for_flag=False):\n    print(arg_with_choices)\n    print(bool_arg_for_flag)\n\n\nif __name__ == '__main__':\n    # argh.dispatch_command(do_the_thing)\n    argh.dispatch_commands([do_the_thing, do_the_other_thing])\n</code></pre>"},{"location":"python/basics/arg-parse/#alternatives","title":"Alternatives","text":"<ul> <li>Click</li> <li>Typer</li> <li>Fire</li> </ul>"},{"location":"python/basics/arg-parse/#references","title":"References:","text":"<ul> <li>Python docs</li> <li>Stack Overflow answer</li> <li>Real Python - How to Build Command Line Interfaces in Python With argparse</li> <li>Argh</li> </ul>"},{"location":"python/basics/args-kwargs/","title":"args and *kwargs","text":""},{"location":"python/basics/args-kwargs/#a-normal-function","title":"A normal function:","text":"<pre><code>def func1(one, two)\n  print(one)\n  print(two)\n\nfunc1('arg one', 'arg two')  # Correct\nfunc1('arg one')  # Error\nfunc1('arg one', 'arg two', 'arg three')  # Error\n</code></pre>"},{"location":"python/basics/args-kwargs/#args-usage","title":"*args usage:","text":"<pre><code>def func2(*args)\n  for stuff in args:\n    print(stuff)\n\nmy_list = ['green', 'yellow', 'blue', 'red']\n\nfunc2(*my_list)  # Correct\nfunc2('green', 'yellow', 'blue', 'red')  # Correct\n</code></pre> <pre><code>def func3(one, two, *args)\n  print(one)\n  print(two)\n  for stuff in args:\n    print(stuff)\n\nmy_list = ['green', 'yellow', 'blue', 'red']\n\nfunc3('required one', 'required two', *my_list)  # Correct\n</code></pre>"},{"location":"python/basics/args-kwargs/#kwargs-usage","title":"**kwargs usage:","text":"<pre><code>def func4(**kwargs)\n  for key, value in kwargs.items():\n    print(key)\n    print(value)\n\nmy_dict = {'key1': 'value1', 'key2': 'value2', 'key3': 'value3'}\n\nfunc4(**kwargs)  # Correct\nfunc4(key1 = 'value1', key2 = 'value2', key3 = 'value3')  # Correct\n</code></pre>"},{"location":"python/basics/builtin-functions/","title":"Sorting lists","text":"<p><code>sorted()</code> returns a new sorted list, leaving the original list unaffected. <code>list.sort()</code> sorts the list in-place, mutating the list indices, and returns None (like all in-place operations).</p> <p><code>sorted()</code> works on any iterable, not just lists. Strings, tuples, dictionaries (you'll get the keys), generators, etc., returning a list containing all elements, sorted.</p> <ul> <li>Use <code>list.sort()</code> when you want to mutate the list, sorted() when you want a new sorted object back. Use <code>sorted()</code> when you want to sort something that is an iterable, not a list yet.</li> <li>For lists, <code>list.sort()</code> is faster than <code>sorted()</code> because it doesn't have to create a copy. For any other iterable, you have no choice.</li> <li>No, you cannot retrieve the original positions. Once you called <code>list.sort()</code> the original order is gone.</li> </ul>"},{"location":"python/basics/builtin-functions/#useful-links","title":"Useful links:","text":"<p>https://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python https://stackoverflow.com/questions/18761776/sort-list-of-dictionaries-by-multiple-keys-with-different-ordering https://stackoverflow.com/questions/16082954/python-how-to-sort-a-list-of-dictionaries-by-several-values</p>"},{"location":"python/basics/classes/","title":"Classes and OOP (Object Oriented Programming)","text":"<pre><code>class Foo:\n    a = 0  # &lt;-- class variable\n\n    def __init__(self, b=0):\n        self.b = b  # &lt;-- instance variable\n\n    def bar(self):  # &lt;- instance method\n        return self.a + self.b\n\n    @classmethod\n    def foo(cls, c=12):  # &lt;-- class method\n        return cls(c).bar()\n\ndef foobar():   # &lt;-- function\n    print(Foo.foo())\n</code></pre> <p>A function and a method are not the same thing, and a class and an instance are not the same thing, which is why a class variable/method and an instance variable/method are very definitely not the same things.</p> <p>A class is like a blueprint, it tells you about some thing you want to make. An instance is the thing that gets made. </p> <p>For example, if you write up a blueprint for an airplane, the blueprint is like when you define a class. The airplanes that get made from that blueprint are like instances of a class. </p> <p>Defining a class looks like this:</p> <pre><code>class Airplane:\n  pass  \n</code></pre> <p>(Normally you would have some more code instead of <code>pass</code>. I'll explain that later.)</p> <p>Now once you define a class you can create instances of a class like this, <code>Airplane()</code>. For example,</p> <pre><code>airplane1 = Airplane()\nairplane2 = Airplane()\n</code></pre> <p>Here we created two instances of the Airplane class and put them in the variables <code>airplane1</code> and <code>airplane2</code>. The important thing here is that you can change <code>airplane1</code> without affecting <code>airplane2</code>. They're two separate instances.</p> <p>Okay now let's go back and talk about what goes inside a class. Let's take our Airplane class and fill it out: <pre><code>class Airplane:\n    def __init__(self):\n        print \"A new instance got made!\"\n</code></pre> So what's going on here? <code>__init__</code> is a function that gets run when you create an instance. That's it! So if you go back to where we created the two Airplane instances, <pre><code>airplane1 = Airplane()\nairplane2 = Airplane()\n</code></pre></p> <p>what would happen is, \"A new instance got made!\" would be printed out twice.</p> <p>What about the <code>self</code> parameter? I think this would be easier to understand if we added a new method.</p> <pre><code>class Airplane:\n    def __init__(self):\n        print \"A new instance got made!\"\n    def fly(self):\n        print \"I'm flying!\"\n</code></pre> <p>So if you wanted to call this method you'd do something like this: <code>airplane1.fly()</code>. Actually this is the same thing as this: <code>Airplane.fly(airplane1)</code>. Both of these would do the same thing, i.e. print out \"I'm flying!\". So <code>airplane1</code> is the instance that we used to call our <code>fly</code> method. This instance is what gets passed to <code>self</code>. </p>"},{"location":"python/basics/classes/#classes","title":"Classes","text":"<pre><code># Function, this lives outside a class\ndef add(a, b):\n    return a + b\n\n\nclass Adder():\n\n    # __init__ roughly equivilant to a constructor in other languages\n    def __init__(self, a, b):\n        # Adding attributes to this instance of our class\n        self.a = a\n        self.b = b\n\n    # Method, This belongs to an instance of a class and must have self as first argument. self refers to an instance of a class\n    def add(self):\n        return self.a + self.b\n\n    # CLass Method, belongs to a class and is shared by every instance of the class, must have the class as first argument\n    @classmethod\n    def class_add(cls, x, y):\n        return x + y\n\n    # Static Method, Only belongs to the class for organisation, can't reference class or instance attributes\n    @staticmethod\n    def static_add(c, d):\n        return c + d\n\n\n# Let's start with an instance initialized with values for a and b\nfoo = Adder(1, 2)\n# we call the add method of foo which refernces the values we initialized the class with\nprint ('Instance result', foo.add())\n\n# Class method doesnt require an instance, note no () after Adder, we arent creating an instance, just referencing the class\nbar = Adder.class_add(1, 2)\nprint ('Class result', bar)\n\n# Static, similar to classmethod we don't need to create an instance\nbaz = Adder.static_add(1, 2)\nprint ('Static result', baz)\n\n# Finally we'll just use our add function\nspam = add(1, 2)\nprint ('Function result', spam)\n</code></pre>"},{"location":"python/basics/classes/#references","title":"References:","text":"<ul> <li>https://www.reddit.com/r/learnpython/comments/1cpu7x/explain_classes_init_and_self_like_im_five/</li> </ul>"},{"location":"python/basics/custom-exceptions/","title":"Custom exceptions","text":"<p>Exceptions are a way to deal with errors in your code.</p> <p>For example imagine that you have a function that saves some data to the disk. And when the program executes, the disk happens to be full. In that case, an exception is \"raised\" (or \"thrown\"). Imagine it like an alternative result-value from your function.</p> <p>In areas where the function is called, you can \"catch\" those exceptions and do something sensible. For example, in the case of a disk full, show an error to the user that says: \"Error: Disk is full\" or something similar.</p> <p>Any exception that is not caught will cause the program to crash and exit.</p> <p>So clearly, handling (catching) them and doing something other than crashing is nicer for the end-user.</p> <p>Python comes with some standard/builtin exceptions. Each exception has a well defined reason why it might be thrown.</p> <p>If those \"builtin\" exceptions are not appropriate for your own program, you can define your own. This is done by creating a new class inheriting from \"Exception\".</p> <p>For example, let's say your program that creates files on disk only gives a user the permission to store 1GB of data. Everything above \"exceeds the quota\". The disk is still not full, so that error is not appropriate. So we need something else.</p> <p>In that case we can create such a subclass:</p> <pre><code>class QuotaExceeded(Exception):\n    pass\n</code></pre> <p>And then use it:</p> <pre><code>def store_file(user, file):\n    quota = get_quota(user)\n    used_diskspace = get_used_diskspace(user)\n    filesieze = get_filesize(file)\n    if (used_diskspace + filesize) &gt; quota:\n        raise QuotaExceeed(\n            f\"The file {file} would exceed the disk quota for {user}. \"\n            f\"Currently {used_diskspace} out of {quota} is used. \"\n            f\"Filesize: {filesize}\"\n        )\n    store_file_to_disk(user, file)\n</code></pre> <p>The <code>raise</code> line in the if-block will immediately stop executing that function and \"throw\" that custom <code>QuotaExceeded</code> error. It can then be caught using the <code>try/except</code> block:</p> <pre><code>try:\n    store_file(john_doe, uploaded_file)\nexcept QuotaExceeded as exc:\n    print(exc)\n</code></pre> <p>If that <code>try/except</code> block would not exist, the program would crash. </p> <p>Sometimes you want your program to crash out instead of being in an \"unknown/unpredictable\" state. That's when exceptions come in handy.</p> <p>To add to the example above, you can make custom exceptions more useful by adding a docstring and by storing useful context-values in the exception itself. For example:</p> <pre><code>class QuotaExceeded(Exception):\n    \"\"\"\n    This exception is raised if an operation would cause more disk-space\n    to be used than is allowed for a given user.\n    \"\"\"\n    def __init__(self, file, user, used_diskspace, quota, filesize):\n        super().__init__(\n            f\"The file {file} would exceed the disk quota for {user}. \"\n            f\"Currently {used_diskspace} out of {quota} is used. \"\n            f\"Filesize: {filesize}\"\n        )\n        self.file = file\n        self.user = user\n        self.used_diskspace = used_diskspace\n        self.quota = quota\n        self.filesize = filesize\n\ndef store_file(user, file):\n    quota = get_quota(user)\n    used_diskspace = get_used_diskspace(user)\n    filesieze = get_filesize(file)\n    if (used_diskspace + filesize) &gt; quota:\n        raise QuotaExceeed(file, user, used_diskspace, quota, filesize)\n    store_file_to_disk(user, file)\n</code></pre> <p>And finally, exceptions are one of those topics where people like to argue about whether or not they are good. There are valid arguments for both ways. To avoid unnecessary digression and complexity, all I will say is that you could rewrite the code above with <code>if</code> statements to something like this:</p> <pre><code>def store_file(user, file):\n    quota = get_quota(user)\n    used_diskspace = get_used_diskspace(user)\n    filesieze = get_filesize(file)\n    if (used_diskspace + filesize) &gt; quota:\n        return (\n            f\"The file {file} would exceed the disk quota for {user}. \"\n            f\"Currently {used_diskspace} out of {quota} is used. \"\n            f\"Filesize: {filesize}\"\n        )\n    store_file_to_disk(user, file)\n    return \"\"\n\nerror_message = store_file(john_doe, uploaded_file)\nif error_message:\n    print(error_message)\n</code></pre>"},{"location":"python/basics/data-structures/","title":"Data structures","text":"<p>Python offers several data structures such as: - Strings - Lists - Tuples - Dictionaries - Sets - Deques</p> <p>We'll cover some of these below.</p>"},{"location":"python/basics/data-structures/#tuples","title":"Tuples","text":"<p>Tuples are an ordered collection of values that cannot be modified at runtime. This module shows how tuples are created, iterated, accessed and combined.</p> <p>This is a tuple of integers: <pre><code>immutable = (1, 2, 3, 4)\n</code></pre></p> <p>It can be indexed like a list: <pre><code>assert immutable[0] == 1\nassert immutable[-1] == 4\n</code></pre></p> <p>It can be sliced like a list: <pre><code>assert immutable[1:3] == (2, 3)\nassert immutable[3:4] == (4,)\nassert immutable[1::2] == (2, 4)\nassert immutable[::-1] == (4, 3, 2, 1)\n</code></pre></p> <p>It can be iterated over like a list: <pre><code>for ix, number in enumerate(immutable):\n    assert immutable[ix] == number\n</code></pre></p> <p>But its contents cannot be changed. As an alternative, we can create new tuples from existing tuples  <pre><code>bigger_immutable = immutable + (5, 6)\nassert bigger_immutable == (1, 2, 3, 4, 5, 6)\nsmaller_immutable = immutable[0:2]\nassert smaller_immutable == (1, 2)\n</code></pre></p> <p>We use tuples when the number of items is consistent. An example where this can help is a 2D game with X and Y coordinates. Using a tuple with two numbers can ensure that the number of coordinates doesn't change to one, three, four, etc. <pre><code>moved_count = 0\npos_x, pos_y = (0, 0)\nfor i in range(1, 5, 2):\n    moved_count += 1\n    pos_x, pos_y = (pos_x + 10 * i, pos_y + 15 * i)\nassert moved_count == 2\nassert pos_x == 40 and pos_y == 60\n</code></pre></p>"},{"location":"python/basics/data-structures/#sets","title":"Sets","text":"<p>Sets are an unordered collection of unique values that can be modified at runtime. This module shows how sets are created, iterated, accessed, extended and shortened.</p> <p>Let's define one <code>set</code> for starters: <pre><code>simple_set = {0, 1, 2}\n</code></pre></p> <p>A set is dynamic like a <code>list</code> and <code>tuple</code>: <pre><code>simple_set.add(3)\nsimple_set.remove(0)\nassert simple_set == {1, 2, 3}\n</code></pre></p> <p>Unlike a <code>list</code> and <code>tuple</code>, it is not an ordered sequence as it does not allow duplicates to be added: <pre><code>for _ in range(5):\n    simple_set.add(0)\n    simple_set.add(4)\n    assert simple_set == {0, 1, 2, 3, 4}\n</code></pre></p> <p>Now let's define two new <code>set</code> collections: <pre><code>multiples_two = set()\nmultiples_four = set()\n</code></pre></p> <p>Fill sensible values into the set using <code>add</code>: <pre><code>for i in range(10):\n    multiples_two.add(i * 2)\n    multiples_four.add(i * 4)\n</code></pre></p> <p>As we can see, both sets have similarities and differences: <pre><code>assert multiples_two == {0, 2, 4, 6, 8, 10, 12, 14, 16, 18}\nassert multiples_four == {0, 4, 8, 12, 16, 20, 24, 28, 32, 36}\n</code></pre></p> <p>We cannot decide in which order the numbers come out - so let's look for fundamental truths instead, such as divisibility against 2 and 4. We do this by checking whether the modulus of 2 and 4 yields 0 (i.e. no remainder from performing a division): <pre><code>multiples_common = multiples_two.intersection(multiples_four)\nfor number in multiples_common:\n    assert number % 2 == 0 and number % 4 == 0\n</code></pre></p> <p>We can compute exclusive multiples: <pre><code>multiples_two_exclusive = multiples_two.difference(multiples_four)\nmultiples_four_exclusive = multiples_four.difference(multiples_two)\nassert len(multiples_two_exclusive) &gt; 0\nassert len(multiples_four_exclusive) &gt; 0\n</code></pre></p> <p>Numbers in this bracket are greater than 2 * 9 and less than 4 * 10: <pre><code>for number in multiples_four_exclusive:\n    assert 18 &lt; number &lt; 40\n</code></pre></p> <p>By computing a set union against the two sets, we have all integers in this program: <pre><code>multiples_all = multiples_two.union(multiples_four)\n</code></pre></p> <p>Check if set A is a subset of set B: <pre><code>assert multiples_four_exclusive.issubset(multiples_four)\nassert multiples_four.issubset(multiples_all)\n</code></pre></p> <p>Check if set A is a subset and superset of itself: <pre><code>assert multiples_all.issubset(multiples_all)\nassert multiples_all.issuperset(multiples_all)\n</code></pre></p> <p>Check if set A is a superset of set B: <pre><code>assert multiples_all.issuperset(multiples_two)\nassert multiples_two.issuperset(multiples_two_exclusive)\n</code></pre></p>"},{"location":"python/basics/data-structures/#references","title":"References","text":"<ul> <li>Ultimate Python - Tuples</li> <li>Ultimate Python - Sets</li> </ul>"},{"location":"python/basics/dataclasses/","title":"Dataclasses","text":"<p>Since version 3.7, Python offers data classes. There are several advantages over regular classes or other alternatives like returning multiple values or dictionaries: - a data class requires a minimal amount of code - you can compare data classes because <code>__eq__</code> is implemented for you - you can easily print a data class for debugging because <code>__repr__</code> is implemented as well - data classes require type hints, reduced the chances of bugs</p> <p>Example:</p> <pre><code>from dataclasses import dataclass\n\n@dataclass\nclass Card:\n    rank: str\n    suit: str\n\ncard = Card(\"Q\", \"hearts\")\n\nprint(card == card)\n# True\n\nprint(card.rank)\n# 'Q'\n\nprint(card)\nCard(rank='Q', suit='hearts')\n</code></pre>"},{"location":"python/basics/decorators/","title":"Decorators","text":"<p>Decorators are wrappers around a function that modify the behavior of the function in a certain way. Let\u2019s create our own decorator:</p> <pre><code>def print_argument(func):\n    def wrapper(the_number):\n        print(\"Argument for\", \n              func.__name__, \n              \"is\", the_number)\n        return func(the_number)\n    return wrapper\n@print_argument\ndef add_one(x):\n    return x + 1\nprint(add_one(1))\n</code></pre> <p>Inside <code>print_argument</code>, we define a wrapper function. This function prints the argument and the name of the called function. Next, it executes the actual function and returns its result as if the function was called regularly. With <code>@print_argument</code> we apply our decorator to a function. The output of our little script will be:</p> <pre><code># Argument for add_one is 1\n# 2\n</code></pre>"},{"location":"python/basics/imports/","title":"Imports in Python","text":""},{"location":"python/basics/imports/#namespace","title":"Namespace","text":"<p>For example, you might be writing some code that has a function called <code>fun()</code> and there is another module available, which also has a function with the name <code>fun()</code>. Now the interpreter has no way of knowing which version of <code>fun()</code> function you are referring within your code.</p> <p>Namespace is designed to overcome this difficulty and is used to differentiate functions, classes, variables etc. with the same name, available in different modules.</p>"},{"location":"python/basics/imports/#module-vs-package","title":"Module vs. Package","text":"<p>A Python module is simply a Python source file, which can expose classes, functions and global variables. When imported from another Python source file, the file name is sometimes treated as a namespace.</p> <p>A Python package is simply a directory of Python module(s).</p>"},{"location":"python/basics/imports/#__init__py","title":"<code>__init__.py</code>","text":"<p>The <code>__init__.py</code> file is the first thing that gets executed when a package is loaded.</p> <p>More on the <code>__init__.py</code> file in the Packages (with the <code>__init__.py</code> file) and Relative Imports section.</p>"},{"location":"python/basics/imports/#relative-vs-absolute-imports","title":"Relative vs. Absolute Imports","text":"<p>Relative imports - specific location of the modules to be imported are relative to the current package.</p> <p>Absolute imports - an import where you fully specify the location of the entities being imported.</p>"},{"location":"python/basics/imports/#regular-imports","title":"Regular Imports","text":"<p>Assume the following file structure.</p> <pre><code>someDir/\n    main.py\n    siblingModule.py\n</code></pre> <p>The following shows different ways to import the module <code>siblingModule.py</code> into <code>main.py</code>.</p> <pre><code># siblingModule.py\n\ndef siblingModuleFun():\n    print('Hello from siblingModuleFun')\n\ndef siblingModuleFunTwo():\n    print('Hello from siblingModuleFunTwo')\n</code></pre> <pre><code># main.py\n\n# Provides access to all exposed functions, global variables, classes, etc.\n# We need to specify the namespace explicitly, hence we always have to prepend the module name.\n# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules.\nimport siblingModule\n\nsiblingModule.siblingModuleFun() # Hello from siblingModuleFun\nsiblingModule.siblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n# If siblingModule is already defined in current namespace, we can use the 'as' keyword to give the module a different namespace identifier.\nimport siblingModule as sibMod\n\nsibMod.siblingModuleFun() # Hello from siblingModuleFun\nsibMod.siblingModuleFunTwo() # Hello from siblingModuleFunTwo\n\n# Only imports specific entities from a module.\n# Allows to access the entity without prepending module name.\n# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module name to help as reach the function.\nfrom siblingModule import siblingModuleFun\n\nsiblingModuleFun() # Hello from siblingModuleFun\n\nsiblingModuleFunTwo() # Error\nsiblingModule.siblingModuleFunTwo() # Error\n\n# Both 'from siblingModule import *' and 'import siblingModule' import all entities from the module.\n# With 'import siblingModule' you are allowed to have multiple function with the same name, from different modules.\n# With 'from siblingModule import *' the functions with the same name will overwrite any function from the imported module(s).\nfrom siblingModule import *\n\nsiblingModuleFun() # Hello from siblingModuleFun\nsiblingModuleFunTwo() # Hello from siblingModuleFunTwo\n</code></pre>"},{"location":"python/basics/imports/#local-imports","title":"Local Imports","text":"<p>Importing modules at the top of the script, is importing the module into the global scope, which means that any functions will be able to use it. </p> <p>A local import is when you import a module into local scope, which means that it exists only within the block that it was loaded in.</p> <pre><code>import globalModule  # Global scope\n\ndef funOne(a):\n\n    # Local scope\n    import localModule\n\n    globalModule.someFunction()\n    return localModule.someFunction()\n\ndef funTwo():\n\n    globalModule.someFunction()\n    return localModule.someFunction() # Error\n\nglobalModule.someFunction()\n</code></pre>"},{"location":"python/basics/imports/#optional-imports","title":"Optional Imports","text":"<p>Optional imports are used when you have a preferred module or package that you want to use, but you also want a fallback in case it something goes wrong.</p> <p>You might use optional imports to support multiple operating system, resolve issues between different versions,  etc.</p> <pre><code>try:\n    # Import 'someModuleA' that is only available in Windows\n    import someModuleA\nexcept ImportError:\n    try:\n        # Import 'someModuleB' that is only available in Linux\n        import someModuleB\n    except ImportError:\n</code></pre>"},{"location":"python/basics/imports/#circular-imports","title":"Circular Imports","text":"<p>Circular imports happen when you create two modules that import each other.</p> <p><pre><code># A.py\n\nimport B\n\ndef Afun():\n    print('Hello from Afun')\n\nB.Bfun()\nAfun()\n</code></pre> <pre><code># B.py\n\nimport A\n\ndef Bfun():\n    print('Hello from Bfun')\n\nA.Afun()\nBfun()\n</code></pre></p> <p>If you run either of these modules, you should receive an <code>AttributeError</code>. This happens because both modules are attempting to import each other. Basically what\u2019s happening here is that <code>A.py</code> is trying to import <code>B.py</code>, but it can\u2019t do that because <code>B.py</code> is attempting to import <code>A.py</code>, which is already being executed. To prevent this kind of thing from happening, refactor your code.</p>"},{"location":"python/basics/imports/#shadowed-imports","title":"Shadowed imports","text":"<p>Shadow imports happen when the programmer creates a module with the same name as a standard Python module.</p> <p>In this case, create a file named <code>math.py</code> and put the following code inside it:</p> <pre><code>import math\n\ndef square_root(number):\n    return math.sqrt(number)\n\nsquare_root(72)\n</code></pre> <p>When you run a Python script, the first place Python looks for a module called <code>math</code> is in the currently running script\u2019s directory. In this case, it finds the module we\u2019re running and tries to use that. But our module doesn\u2019t have a function or attribute called <code>sqrt</code>, so an <code>AttributeError</code> is raised.</p>"},{"location":"python/basics/imports/#packages-without-the-__init__py-file","title":"Packages (without the <code>__init__.py</code> file)","text":"<p>Assume the following file structure. <pre><code>someDir/\n    main.py\n    subModules/\n        subA.py\n        subSubModules/\n            subSubA.py\n</code></pre></p> <pre><code># subA.py\n\ndef subAFun():\n    print('Hello from subAFun')\n\ndef subAFunTwo():\n    print('Hello from subAFunTwo')\n</code></pre> <pre><code># subSubA.py\n\ndef subSubAFun():\n    print('Hello from subSubAFun')\n\ndef subSubAFunTwo():\n    print('Hello from subSubAFunTwo')\n</code></pre> <p><pre><code># main.py\n\n# Provides access to all exposed functions, global variables, public classes, etc. in a module 'subA'.\n# We need to specify the namespace explicitly, hence we have to prepend the package name and/or module name.\n# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules/packages.\nimport subModules.subA\n\nsubModules.subA.subAFun() # Hello from subAFun\nsubModules.subA.subAFunTwo() # Hello from subAFunTwo\n\n# Only imports specific entities from a module.\n# Allows to access the entity without prepending module name.\n# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module/package name to help as reach the function.\nfrom subModules.subA import subAFun\n\nsubAFun() # Hello from subAFun\nsubAFunTwo() # Error\n\n# To me, this is the most clear way of import modules from subdirectories, and it allows to differentiate between namespaces.\nfrom subModules import subA\n\nsubA.subAFun() # Hello from subAFun\nsubA.subAFunTwo() # Hello from subAFunTwo\n</code></pre> <pre><code># Importing all entities from a sub-submodule.\nimport subModules.subSubModules.subSubA\n\nsubModules.subSubModules.subSubA.subSubAFun() # Hello from subSubAFun\nsubModules.subSubModules.subSubA.subSubAFunTwo() # Hello from subSubAFunTwo\n\n# Importing a specific entity from a sub-submodule.\nfrom subModules.subSubModules.subSubA import subSubAFun\n\nsubSubAFun() # Hello from subSubAFun\nsubSubAFunTwo() # Error\n\n# Imports all entities.\n# Allows to differentiate between namespaces.\nfrom subModules.subSubModules import subSubA\n\nsubSubA.subSubAFun() # Hello from subSubAFun\nsubSubA.subSubAFunTwo() # Hello from subSubAFunTwo\n</code></pre></p>"},{"location":"python/basics/imports/#packages-with-the-__init__py-file-and-relative-imports","title":"Packages (with the <code>__init__.py</code> file) and Relative Imports","text":""},{"location":"python/basics/imports/#__init__py_1","title":"<code>__init__.py</code>","text":"<p>There are two main reasons for using the <code>__init__.py</code> file.</p>"},{"location":"python/basics/imports/#1-for-convenience-other-users-will-not-need-to-know-your-modules-exact-location-in-the-package-hierarchy","title":"1. For convenience,  other users will not need to know your module's exact location in the package hierarchy.","text":"<p><pre><code>someDir/\n    __init__.py\n    A.py\n    B.py\n    ...\n    Z.py\n</code></pre> <pre><code># A.py\n\ndef add(x, y):\n    return x + y\n</code></pre></p> <pre><code># __init__.py\n\nfrom A import *\nfrom B import *\n...\nfrom Z import *\n</code></pre> <p>Then others can call <code>add(x, y)</code> , without knowing <code>A.py</code> exists</p> <pre><code>from someDir import add\n</code></pre> <p>Without <code>__init__.py</code></p> <pre><code>from someDir.A import add\n</code></pre>"},{"location":"python/basics/imports/#2-if-you-want-something-to-be-initialized-as-soon-as-the-package-gets-executed","title":"2. If you want something to be initialized as soon as the package gets executed.","text":""},{"location":"python/basics/imports/#relative-imports","title":"Relative Imports","text":"<p>Note that relative imports are not specific to <code>__init__.py</code> files.</p> <p><code>'__main__'</code> is the name of the scope in which top-level code executes. A module\u2019s<code>__name__</code> variable is set to <code>'__main__'</code> when read from standard input, a script, or from an interactive prompt.</p> <p>Relative imports use the module's <code>__name__</code> variable to determine where it is in a package.  When you use a relative import, such as <code>from ..someDir import someModule</code>, the two dots indicate to step up a level in the package hierarchy.  For instance, if your current module is <code>moduleA</code>, then it's <code>__name__</code> variable is <code>someDir.subDir.moduleA</code>. Then, writing <code>from ..moduleB import *</code> in <code>moduleA</code> means, go up a directory, and import everything from <code>moduleB</code>. <code>moduleB</code> would be found on the same level as the <code>subDir</code> directory.</p> <p>However, if your module's name is <code>__main__</code>,  you cannot use <code>from ..somePath import moduleName</code> statements.</p>"},{"location":"python/basics/imports/#loading-modules-with-the-help-of-the-initpy-file","title":"Loading Modules with the Help of the <code>init.py</code> File","text":"<p>Assume the following file structure. <pre><code>someDir/\n    main.py\n    subModules/\n        __init__.py\n        subA.py\n        subSubModules/\n            __init__.py\n            subSubA.py\n</code></pre></p> <pre><code># subA.py\n\ndef subAFun():\n    print('Hello from subAFun')\n\ndef subAFunTwo():\n    print('Hello from subAFunTwo')\n</code></pre> <pre><code># subSubA.py\n\ndef subSubAFun():\n    print('Hello from subSubAFun')\n\ndef subSubAFunTwo():\n    print('Hello from subSubAFunTwo')\n</code></pre> <pre><code># __init__.py from subDir\n\n# Adds 'subAFun()' and 'subAFunTwo()' to the 'subDir' namespace \nfrom .subA import *\n\n# The following two import statement do the same thing, they add 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace. The first one assumes '__init__.py' is empty in 'subSubDir', and the second one, assumes '__init__.py' in 'subSubDir' contains 'from .subSubA import *'.\n\n# Assumes '__init__.py' is empty in 'subSubDir'\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace\nfrom .subSubDir.subSubA import *\n\n# Assumes '__init__.py' in 'subSubDir' has 'from .subSubA import *'\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subDir' namespace\nfrom .subSubDir import *\n</code></pre> <pre><code># __init__.py from subSubDir\n\n# Adds 'subSubAFun()' and 'subSubAFunTwo()' to the 'subSubDir' namespace\nfrom .subSubA import *\n</code></pre> <pre><code># main.py\n\nimport subDir\n\nsubDir.subAFun() # Hello from subAFun\nsubDir.subAFunTwo() # Hello from subAFunTwo\nsubDir.subSubAFun() # Hello from subSubAFun\nsubDir.subSubAFunTwo() # Hello from subSubAFunTwo\n</code></pre> <p>From the above, we can observe that it's almost as though <code>__init__.py</code> converts a package into a module, or more correctly makes a package behave like a module.</p> <p>To access functions of <code>subA.py</code> in <code>subSubA.py</code>. Only works if the <code>__name__</code> variable of <code>subSubA.py</code> is not <code>'__main__'</code> <pre><code># subSubA.py\n\nfrom ..subA import *\n\nsubAFun() # Hello from subAFun\nsubAFunTwo() # Hello from subAFunTwo\n</code></pre></p>"},{"location":"python/basics/lambda-functions/","title":"Annonymous functions (Lambda functions)","text":"<p>Sometimes, naming a function is not worth the trouble. For example when you\u2019re sure the function will only be used once. For such cases, Python offers us anonymous functions, also called lambda functions.</p> <p>A lambda function can be assigned to a variable, creating a concise way of defining a function:</p> <pre><code>add_one = lambda x: x + 1\nadd_one(3)\n# 4\n</code></pre> <p>It gets more interesting when you need to use a function as an argument. In such cases, the function is often used only once. As you may know, <code>map</code> applies a function to all elements of an iterable object. We can use a lambda when calling map:</p> <pre><code>numbers = [1, 2, 3, 4]\ntimes_two = map(lambda x: x * 2, numbers)\nlist(times_two)\n# [2, 4, 6, 8]\n</code></pre> <p>In fact, this is a pattern that you\u2019ll see often. When you need to apply a relatively simple operation on each element of an iterable object, using <code>map()</code> in combination with a lambda function is concise and efficient.</p>"},{"location":"python/basics/magic-methods/","title":"Magic Methods","text":""},{"location":"python/basics/magic-methods/#introduction","title":"Introduction","text":"<p>This guide is the culmination of a few months' worth of blog posts. The subject is magic methods.</p> <p>What are magic methods? They're everything in object-oriented Python. They're special methods that you can define to add \"magic\" to your classes. They're always surrounded by double underscores (e.g. <code>__init__</code> or <code>__lt__</code>). They're also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they're scattered about and only loosely organized. There's hardly an example to be found in that section (and that may very well be by design, since they're all detailed in the language reference, along with boring syntax descriptions, etc.).</p> <p>So, to fix what I perceived as a flaw in Python's documentation, I set out to provide some more plain-English, example-driven documentation for Python's magic methods. I started out with weekly blog posts, and now that I've finished with those, I've put together this guide.</p> <p>I hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it's just intended to be a user-friendly guide to Python's magic methods.</p>"},{"location":"python/basics/magic-methods/#construction-and-initialization","title":"Construction and Initialization","text":"<p>Everyone knows the most basic magic method, <code>__init__</code>. It's the way that we can define the initialization behavior of an object. However, when I call <code>x = SomeClass()</code>, <code>__init__</code> is not the first thing to get called. Actually, it's a method called <code>__new__</code>, which actually creates the instance, then passes any arguments at creation on to the initializer. At the other end of the object's lifespan, there's <code>__del__</code>. Let's take a closer look at these 3 magic methods:</p> <p><code>__new__(cls, [...)</code> :    <code>__new__</code> is the first method to get called in an object's instantiation. It takes the class, then any other arguments that it will pass along to <code>__init__</code>. <code>__new__</code> is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don't want to go in to too much detail on <code>__new__</code> because it's not too useful, but it is covered in great detail in the Python docs.</p> <p><code>__init__(self, [...)</code> :    The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called <code>x = SomeClass(10, 'foo')</code>, <code>__init__</code> would get passed <code>10</code> and <code>'foo'</code> as arguments. <code>__init__</code> is almost universally used in Python class definitions.</p> <p><code>__del__(self)</code> :    If <code>__new__</code> and <code>__init__</code> formed the constructor of the object, <code>__del__</code> is the destructor. It doesn't implement behavior for the statement <code>del x</code> (so that code would not translate to <code>x.__del__()</code>). Rather, it defines behavior for when an object is garbage collected. It can be quite useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that <code>__del__</code> will be executed if the object is still alive when the interpreter exits, so <code>__del__</code> can't serve as a replacement for good coding practices (like always closing a connection when you're done with it. In fact, <code>__del__</code> should almost never be used because of the precarious circumstances under which it is called; use it with caution!</p> <p>Putting it all together, here's an example of <code>__init__</code> and <code>__del__</code> in action:</p> <pre><code>:::python\nfrom os.path import join\n\nclass FileObject:\n    '''Wrapper for file objects to make sure the file gets closed on deletion.'''\n\n    def __init__(self, filepath='~', filename='sample.txt'):\n        # open a file filename in filepath in read and write mode\n        self.file = open(join(filepath, filename), 'r+')\n\n    def __del__(self):\n        self.file.close()\n        del self.file\n</code></pre>"},{"location":"python/basics/magic-methods/#making-operators-work-on-custom-classes","title":"Making Operators Work on Custom Classes","text":"<p>One of the biggest advantages of using Python's magic methods is that they provide a simple way to make objects behave like built-in types. That means you can avoid ugly, counter-intuitive, and nonstandard ways of performing basic operators. In some languages, it's common to do something like this:</p> <pre><code>:::python\nif instance.equals(other_instance):\n    # do something\n</code></pre> <p>You could certainly do this in Python, too, but this adds confusion and is unnecessarily verbose. Different libraries might use different names for the same operations, making the client do way more work than necessary. With the power of magic methods, however, we can define one method (<code>__eq__</code>, in this case), and say what we mean instead:</p> <pre><code>:::python\nif instance == other_instance:\n    #do something\n</code></pre> <p>That's part of the power of magic methods. The vast majority of them allow us to define meaning for operators so that we can use them on our own classes just like they were built in types.</p>"},{"location":"python/basics/magic-methods/#comparison-magic-methods","title":"Comparison magic methods","text":"<p>Python has a whole slew of magic methods designed to implement intuitive comparisons between objects using operators, not awkward method calls. They also provide a way to override the default Python behavior for comparisons of objects (by reference). Here's the list of those methods and what they do:</p> <p><code>__cmp__(self, other)</code> :    <code>__cmp__</code> is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (&lt;, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else). <code>__cmp__</code> should return a negative integer if <code>self &lt; other</code>, zero if <code>self == other</code>, and positive if <code>self &gt; other</code>. It's usually best to define each comparison you need rather than define them all at once, but <code>__cmp__</code> can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar criteria.</p> <p><code>__eq__(self, other)</code> :    Defines behavior for the equality operator, <code>==</code>.</p> <p><code>__ne__(self, other)</code> :    Defines behavior for the inequality operator, <code>!=</code>.</p> <p><code>__lt__(self, other)</code> :    Defines behavior for the less-than operator, <code>&lt;</code>.</p> <p><code>__gt__(self, other)</code> :    Defines behavior for the greater-than operator, <code>&gt;</code>.</p> <p><code>__le__(self, other)</code> :    Defines behavior for the less-than-or-equal-to operator, <code>&lt;=</code>.</p> <p><code>__ge__(self, other)</code> :    Defines behavior for the greater-than-or-equal-to operator, <code>&gt;=</code>.</p> <p>For an example, consider a class to model a word. We might want to compare words lexicographically (by the alphabet), which is the default comparison behavior for strings, but we also might want to do it based on some other criterion, like length or number of syllables. In this example, we'll compare by length. Here's an implementation:</p> <pre><code>:::python\nclass Word(str):\n    '''Class for words, defining comparison based on word length.'''\n\n    def __new__(cls, word):\n        # Note that we have to use __new__. This is because str is an immutable\n        # type, so we have to initialize it early (at creation)\n        if ' ' in word:\n            print \"Value contains spaces. Truncating to first space.\"\n            word = word[:word.index(' ')] # Word is now all chars before first space\n        return str.__new__(cls, word)\n\n    def __gt__(self, other):\n        return len(self) &gt; len(other)\n    def __lt__(self, other):\n        return len(self) &lt; len(other)\n    def __ge__(self, other):\n        return len(self) &gt;= len(other)\n    def __le__(self, other):\n        return len(self) &lt;= len(other)\n</code></pre> <p>Now, we can create two <code>Word</code>s (by using <code>Word('foo')</code> and <code>Word('bar')</code>) and compare them based on length. Note, however, that we didn't define <code>__eq__</code> and <code>__ne__</code>. This is because this would lead to some weird behavior (notably that <code>Word('foo') == Word('bar')</code> would evaluate to true). It wouldn't make sense to test for equality based on length, so we fall back on <code>str</code>'s implementation of equality.</p> <p>Now would be a good time to note that you don't have to define every comparison magic method to get rich comparisons. The standard library has kindly provided us with a class decorator in the module <code>functools</code> that will define all rich comparison methods if you only define <code>__eq__</code> and one other (e.g. <code>__gt__</code>, <code>__lt__</code>, etc.) This feature is only available in Python 2.7, but when you get a chance it saves a great deal of time and effort. You can use it by placing <code>@total_ordering</code> above your class definition.</p>"},{"location":"python/basics/magic-methods/#numeric-magic-methods","title":"Numeric magic methods","text":"<p>Just like you can create ways for instances of your class to be compared with comparison operators, you can define behavior for numeric operators. Buckle your seat belts, folks...there's a lot of these. For organization's sake, I've split the numeric magic methods into 5 categories: unary operators, normal arithmetic operators, reflected arithmetic operators (more on this later), augmented assignment, and type conversions.</p>"},{"location":"python/basics/magic-methods/#unary-operators-and-functions","title":"Unary operators and functions","text":"<p>Unary operators and functions only have one operand, e.g. negation, absolute value, etc.</p> <p><code>__pos__(self)</code> :    Implements behavior for unary positive (e.g. <code>+some_object</code>)</p> <p><code>__neg__(self)</code> :    Implements behavior for negation (e.g. <code>-some_object</code>)</p> <p><code>__abs__(self)</code> :    Implements behavior for the built in <code>abs()</code> function.</p> <p><code>__invert__(self)</code> :    Implements behavior for inversion using the <code>~</code> operator. For an explanation on what this does, see the Wikipedia article on bitwise operations.</p> <p><code>__round__(self, n)</code> :    Implements behavior for the built in <code>round()</code> function. <code>n</code> is the number of decimal places to round to.</p> <p><code>__floor__(self)</code> :    Implements behavior for <code>math.floor()</code>, i.e., rounding down to the nearest integer.</p> <p><code>__ceil__(self)</code> :    Implements behavior for <code>math.ceil()</code>, i.e., rounding up to the nearest integer.</p> <p><code>__trunc__(self)</code> :    Implements behavior for <code>math.trunc()</code>, i.e., truncating to an integral.</p>"},{"location":"python/basics/magic-methods/#normal-arithmetic-operators","title":"Normal arithmetic operators","text":"<p>Now, we cover the typical binary operators (and a function or two): +, -, * and the like. These are, for the most part, pretty self-explanatory.</p> <p><code>__add__(self, other)</code> :    Implements addition.</p> <p><code>__sub__(self, other)</code> :    Implements subtraction.</p> <p><code>__mul__(self, other)</code> :    Implements multiplication.</p> <p><code>__floordiv__(self, other)</code> :    Implements integer division using the <code>//</code> operator.</p> <p><code>__div__(self, other)</code> :    Implements division using the <code>/</code> operator.</p> <p><code>__truediv__(self, other)</code> :    Implements true division. Note that this only works when <code>from __future__ import division</code> is in effect.</p> <p><code>__mod__(self, other)</code> :    Implements modulo using the <code>%</code> operator.</p> <p><code>__divmod__(self, other)</code> :    Implements behavior for long division using the <code>divmod()</code> built in function.</p> <p><code>__pow__</code> :    Implements behavior for exponents using the <code>**</code> operator.</p> <p><code>__lshift__(self, other)</code> :    Implements left bitwise shift using the <code>&lt;&lt;</code> operator.</p> <p><code>__rshift__(self, other)</code> :    Implements right bitwise shift using the <code>&gt;&gt;</code> operator.</p> <p><code>__and__(self, other)</code> :    Implements bitwise and using the <code>&amp;</code> operator.</p> <p><code>__or__(self, other)</code> :    Implements bitwise or using the <code>|</code> operator.</p> <p><code>__xor__(self, other)</code> :    Implements bitwise xor using the <code>^</code> operator.</p>"},{"location":"python/basics/magic-methods/#reflected-arithmetic-operators","title":"Reflected arithmetic operators","text":"<p>You know how I said I would get to reflected arithmetic in a bit? Some of you might think it's some big, scary, foreign concept. It's actually quite simple. Here's an example:</p> <pre><code>:::python\nsome_object + other\n</code></pre> <p>That was \"normal\" addition. The reflected equivalent is the same thing, except with the operands switched around:</p> <pre><code>:::python\nother + some_object\n</code></pre> <p>So, all of these magic methods do the same thing as their normal equivalents, except the perform the operation with other as the first operand and self as the second, rather than the other way around. In most cases, the result of a reflected operation is the same as its normal equivalent, so you may just end up defining <code>__radd__</code> as calling <code>__add__</code> and so on. Note that the object on the left hand side of the operator (<code>other</code> in the example) must not define (or return <code>NotImplemented</code>) for its definition of the non-reflected version of an operation. For instance, in the example, <code>some_object.__radd__</code> will only be called if <code>other</code> does not define <code>__add__</code>.</p> <p><code>__radd__(self, other)</code> :    Implements reflected addition.</p> <p><code>__rsub__(self, other)</code> :    Implements reflected subtraction.</p> <p><code>__rmul__(self, other)</code> :    Implements reflected multiplication.</p> <p><code>__rfloordiv__(self, other)</code> :    Implements reflected integer division using the <code>//</code> operator.</p> <p><code>__rdiv__(self, other)</code> :    Implements reflected division using the <code>/</code> operator.</p> <p><code>__rtruediv__(self, other)</code> :    Implements reflected true division. Note that this only works when <code>from __future__ import division</code> is in effect.</p> <p><code>__rmod__(self, other)</code> :    Implements reflected modulo using the <code>%</code> operator.</p> <p><code>__rdivmod__(self, other)</code> :    Implements behavior for long division using the <code>divmod()</code> built in function, when <code>divmod(other, self)</code> is called.</p> <p><code>__rpow__</code> :    Implements behavior for reflected exponents using the <code>**</code> operator.</p> <p><code>__rlshift__(self, other)</code> :    Implements reflected left bitwise shift using the <code>&lt;&lt;</code> operator.</p> <p><code>__rrshift__(self, other)</code> :    Implements reflected right bitwise shift using the <code>&gt;&gt;</code> operator.</p> <p><code>__rand__(self, other)</code> :    Implements reflected bitwise and using the <code>&amp;</code> operator.</p> <p><code>__ror__(self, other)</code> :    Implements reflected bitwise or using the <code>|</code> operator.</p> <p><code>__rxor__(self, other)</code> :    Implements reflected bitwise xor using the <code>^</code> operator.</p>"},{"location":"python/basics/magic-methods/#augmented-assignment","title":"Augmented assignment","text":"<p>Python also has a wide variety of magic methods to allow custom behavior to be defined for augmented assignment. You're probably already familiar with augmented assignment, it combines \"normal\" operators with assignment. If you still don't know what I'm talking about, here's an example:</p> <pre><code>:::python\nx = 5\nx += 1 # in other words x = x + 1\n</code></pre> <p>Each of these methods should return the value that the variable on the left hand side should be assigned to (for instance, for <code>a += b</code>, <code>__iadd__</code> might return <code>a + b</code>, which would be assigned to <code>a</code>). Here's the list:</p> <p><code>__iadd__(self, other)</code> :    Implements addition with assignment.</p> <p><code>__isub__(self, other)</code> :    Implements subtraction with assignment.</p> <p><code>__imul__(self, other)</code> :    Implements multiplication with assignment.</p> <p><code>__ifloordiv__(self, other)</code> :    Implements integer division with assignment using the <code>//=</code> operator.</p> <p><code>__idiv__(self, other)</code> :    Implements division with assignment using the <code>/=</code> operator.</p> <p><code>__itruediv__(self, other)</code> :    Implements true division with assignment. Note that this only works when <code>from __future__ import division</code> is in effect.</p> <p><code>__imod__(self, other)</code> :    Implements modulo with assignment using the <code>%=</code> operator.</p> <p><code>__ipow__</code> :    Implements behavior for exponents with assignment using the <code>**=</code> operator.</p> <p><code>__ilshift__(self, other)</code> :    Implements left bitwise shift with assignment using the <code>&lt;&lt;=</code> operator.</p> <p><code>__irshift__(self, other)</code> :    Implements right bitwise shift with assignment using the <code>&gt;&gt;=</code> operator.</p> <p><code>__iand__(self, other)</code> :    Implements bitwise and with assignment using the <code>&amp;=</code> operator.</p> <p><code>__ior__(self, other)</code> :    Implements bitwise or with assignment using the <code>|=</code> operator.</p> <p><code>__ixor__(self, other)</code> :    Implements bitwise xor with assignment using the <code>^=</code> operator.</p>"},{"location":"python/basics/magic-methods/#type-conversion-magic-methods","title":"Type conversion magic methods","text":"<p>Python also has an array of magic methods designed to implement behavior for built in type conversion functions like <code>float()</code>. Here they are:</p> <p><code>__int__(self)</code> :    Implements type conversion to int.</p> <p><code>__long__(self)</code> :    Implements type conversion to long.</p> <p><code>__float__(self)</code> :    Implements type conversion to float.</p> <p><code>__complex__(self)</code> :    Implements type conversion to complex.</p> <p><code>__oct__(self)</code> :    Implements type conversion to octal.</p> <p><code>__hex__(self)</code> :    Implements type conversion to hexadecimal.</p> <p><code>__index__(self)</code> :    Implements type conversion to an int when the object is used in a slice expression. If you define a custom numeric type that might be used in slicing, you should define <code>__index__</code>.</p> <p><code>__trunc__(self)</code> :    Called when <code>math.trunc(self)</code> is called. <code>__trunc__</code> should return the value of `self truncated to an integral type (usually a long).</p> <p><code>__coerce__(self, other)</code> :    Method to implement mixed mode arithmetic. <code>__coerce__</code> should return <code>None</code> if type conversion is impossible. Otherwise, it should return a pair (2-tuple) of <code>self</code> and <code>other</code>, manipulated to have the same type.</p>"},{"location":"python/basics/magic-methods/#representing-your-classes","title":"Representing your Classes","text":"<p>It's often useful to have a string representation of a class. In Python, there are a few methods that you can implement in your class definition to customize how built in functions that return representations of your class behave.</p> <p><code>__str__(self)</code> :    Defines behavior for when <code>str()</code> is called on an instance of your class.</p> <p><code>__repr__(self)</code> :    Defines behavior for when <code>repr()</code> is called on an instance of your class. The major difference between <code>str()</code> and <code>repr()</code> is intended audience. <code>repr()</code> is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas <code>str()</code> is intended to be human-readable.</p> <p><code>__unicode__(self)</code> :    Defines behavior for when <code>unicode()</code> is called on an instance of your class. <code>unicode()</code> is like <code>str()</code>, but it returns a unicode string. Be wary: if a client calls <code>str()</code> on an instance of your class and you've only defined <code>__unicode__()</code>, it won't work. You should always try to define <code>__str__()</code> as well in case someone doesn't have the luxury of using unicode.</p> <p><code>__format__(self, formatstr)</code> :    Defines behavior for when an instance of your class is used in new-style string formatting. For instance, <code>\"Hello, {0:abc}!\".format(a)</code> would lead to the call <code>a.__format__(\"abc\")</code>. This can be useful for defining your own numerical or string types that you might like to give special formatting options.</p> <p><code>__hash__(self)</code> :    Defines behavior for when <code>hash()</code> is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing <code>__eq__</code> as well. Live by the following rule: <code>a == b</code> implies <code>hash(a) == hash(b)</code>.</p> <p><code>__nonzero__(self)</code> :    Defines behavior for when <code>bool()</code> is called on an instance of your class. Should return <code>True</code> or <code>False</code>, depending on whether you would want to consider the instance to be <code>True</code> or <code>False</code>.</p> <p><code>__dir__(self)</code> :    Defines behavior for when <code>dir()</code> is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing <code>__dir__</code> is unnecessary, but it can be vitally important for interactive use of your classes if you redefine <code>__getattr__</code> or <code>__getattribute__</code> (which you will see in the next section) or are otherwise dynamically generating attributes.</p> <p><code>__sizeof__(self)</code> :    Defines behavior for when <code>sys.getsizeof()</code> is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of it.</p> <p>We're pretty much done with the boring (and example-free) part of the magic methods guide. Now that we've covered some of the more basic magic methods, it's time to move to more advanced material.</p>"},{"location":"python/basics/magic-methods/#controlling-attribute-access","title":"Controlling Attribute Access","text":"<p>Many people coming to Python from other languages complain that it lacks true encapsulation for classes; that is, there's no way to define private attributes with public getter and setters. This couldn't be farther than the truth: it just happens that Python accomplishes a great deal of encapsulation through \"magic\", instead of explicit modifiers for methods or fields. Take a look:</p> <p><code>__getattr__(self, name)</code> :    You can define behavior for when a user attempts to access an attribute that doesn't exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes (you can still choose to compute and return that attribute, if you wish), or deftly handing an <code>AttributeError</code>. It only gets called when a nonexistent attribute is accessed, however, so it isn't a true encapsulation solution.</p> <p><code>__setattr__(self, name, value)</code> :    Unlike <code>__getattr__</code>, <code>__setattr__</code> is an encapsulation solution. It allows you to define behavior for assignment to an attribute regardless of whether or not that attribute exists, meaning you can define custom rules for any changes in the values of attributes. However, you have to be careful with how you use <code>__setattr__</code>, as the example at the end of the list will show.</p> <p><code>__delattr__(self, name)</code> :    This is the exact same as <code>__setattr__</code>, but for deleting attributes instead of setting them. The same precautions need to be taken as with <code>__setattr__</code> as well in order to prevent infinite recursion (calling <code>del self.name</code> in the implementation of <code>__delattr__</code> would cause infinite recursion).</p> <p><code>__getattribute__(self, name)</code> :    After all this, <code>__getattribute__</code> fits in pretty well with its companions <code>__setattr__</code> and <code>__delattr__</code>. However, I don't recommend you use it. <code>__getattribute__</code> can only be used with new-style classes (all classes are new-style in the newest versions of Python, and in older versions you can make a class new-style by subclassing <code>object</code>. It allows you to define rules for whenever an attribute's value is accessed. It suffers from some similar infinite recursion problems as its partners-in-crime (this time you call the base class's <code>__getattribute__</code> method to prevent this). It also mainly obviates the need for <code>__getattr__</code>, which, when <code>__getattribute__</code> is implemented, only gets called if it is called explicitly or an <code>AttributeError</code> is raised. This method can be used (after all, it's your choice), but I don't recommend it because it has a small use case (it's far more rare that we need special behavior to retrieve a value than to assign to it) and because it can be really difficult to implement bug-free.</p> <p>You can easily cause a problem in your definitions of any of the methods controlling attribute access. Consider this example:</p> <pre><code>:::python\ndef __setattr__(self, name, value):\n    self.name = value\n    # since every time an attribute is assigned, __setattr__() is called, this\n    # is recursion.\n    # so this really means self.__setattr__('name', value). Since the method\n    # keeps calling itself, the recursion goes on forever causing a crash\n\ndef __setattr__(self, name, value):\n    self.__dict__[name] = value # assigning to the dict of names in the class\n    # define custom behavior here\n</code></pre> <p>Again, Python's magic methods are incredibly powerful, and with great power comes great responsibility. It's important to know the proper way to use magic methods so you don't break any code.</p> <p>So, what have we learned about custom attribute access in Python? It's not to be used lightly. In fact, it tends to be excessively powerful and counter-intuitive. But the reason why it exists is to scratch a certain itch: Python doesn't seek to make bad things impossible, but just to make them difficult. Freedom is paramount, so you can really do whatever you want. Here's an example of some of the special attribute access methods in action (note that we use <code>super</code> because not all classes have an attribute <code>__dict__</code>):</p> <pre><code>:::python\nclass AccessCounter(object):\n    '''A class that contains a value and implements an access counter.\n    The counter increments each time the value is changed.'''\n\n    def __init__(self, val):\n        super(AccessCounter, self).__setattr__('counter', 0)\n        super(AccessCounter, self).__setattr__('value', val)\n\n    def __setattr__(self, name, value):\n        if name == 'value':\n            super(AccessCounter, self).__setattr__('counter', self.counter + 1)\n        # Make this unconditional.\n        # If you want to prevent other attributes to be set, raise AttributeError(name)\n        super(AccessCounter, self).__setattr__(name, value)\n\n    def __delattr__(self, name):\n        if name == 'value':\n            super(AccessCounter, self).__setattr__('counter', self.counter + 1)\n        super(AccessCounter, self).__delattr__(name)\n</code></pre>"},{"location":"python/basics/magic-methods/#making-custom-sequences","title":"Making Custom Sequences","text":"<p>There's a number of ways to get your Python classes to act like built in sequences (<code>dict</code>, <code>tuple</code>, <code>list</code>, <code>str</code>, etc.). These are by far my favorite magic methods in Python because of the absurd degree of control they give you and the way that they magically make a whole array of global functions work beautifully on instances of your class. But before we get down to the good stuff, a quick word on requirements.</p>"},{"location":"python/basics/magic-methods/#requirements","title":"Requirements","text":"<p>Now that we're talking about creating your own sequences in Python, it's time to talk about protocols. Protocols are somewhat similar to interfaces in other languages in that they give you a set of methods you must define. However, in Python protocols are totally informal and require no explicit declarations to implement. Rather, they're more like guidelines.</p> <p>Why are we talking about protocols now? Because implementing custom container types in Python involves using some of these protocols. First, there's the protocol for defining immutable containers: to make an immutable container, you need only define <code>__len__</code> and <code>__getitem__</code> (more on these later). The mutable container protocol requires everything that immutable containers require plus <code>__setitem__</code> and <code>__delitem__</code>. Lastly, if you want your object to be iterable, you'll have to define <code>__iter__</code>, which returns an iterator. That iterator must conform to an iterator protocol, which requires iterators to have methods called <code>__iter__</code>(returning itself) and <code>next</code>.</p>"},{"location":"python/basics/magic-methods/#the-magic-behind-containers","title":"The magic behind containers","text":"<p>Without any more wait, here are the magic methods that containers use:</p> <p><code>__len__(self)</code> :    Returns the length of the container. Part of the protocol for both immutable and mutable containers.</p> <p><code>__getitem__(self, key)</code> :    Defines behavior for when an item is accessed, using the notation <code>self[key]</code>. This is also part of both the mutable and immutable container protocols. It should also raise appropriate exceptions: <code>TypeError</code> if the type of the key is wrong and <code>KeyError</code> if there is no corresponding value for the key.</p> <p><code>__setitem__(self, key, value)</code> :    Defines behavior for when an item is assigned to, using the notation <code>self[nkey] = value</code>. This is part of the mutable container protocol. Again, you should raise <code>KeyError</code> and <code>TypeError</code> where appropriate.</p> <p><code>__delitem__(self, key)</code> :    Defines behavior for when an item is deleted (e.g. <code>del self[key]</code>). This is only part of the mutable container protocol. You must raise the appropriate exceptions when an invalid key is used.</p> <p><code>__iter__(self)</code> :    Should return an iterator for the container. Iterators are returned in a number of contexts, most notably by the <code>iter()</code> built in function and when a container is looped over using the form <code>for x in container:</code>. Iterators are their own objects, and they also must define an <code>__iter__</code> method that returns <code>self</code>.</p> <p><code>__reversed__(self)</code> :    Called to implement behavior for the <code>reversed()</code> built in function. Should return a reversed version of the sequence. Implement this only if the sequence class is ordered, like list or tuple.</p> <p><code>__contains__(self, item)</code> :    <code>__contains__</code> defines behavior for membership tests using <code>in</code> and <code>not in</code>. Why isn't this part of a sequence protocol, you ask? Because when <code>__contains__</code> isn't defined, Python just iterates over the sequence and returns <code>True</code> if it comes across the item it's looking for.</p> <p><code>__missing__(self, key)</code> :    <code>__missing__</code> is used in subclasses of <code>dict</code>. It defines behavior for whenever a key is accessed that does not exist in a dictionary (so, for instance, if I had a dictionary <code>d</code> and said <code>d[\"george\"]</code> when <code>\"george\"</code> is not a key in the dict, <code>d.__missing__(\"george\")</code> would be called).</p>"},{"location":"python/basics/magic-methods/#an-example","title":"An example","text":"<p>For our example, let's look at a list that implements some functional constructs that you might be used to from other languages (Haskell, for example).</p> <pre><code>:::python\nclass FunctionalList:\n    '''A class wrapping a list with some extra functional magic, like head,\n    tail, init, last, drop, and take.'''\n\n    def __init__(self, values=None):\n        if values is None:\n            self.values = []\n        else:\n            self.values = values\n\n    def __len__(self):\n        return len(self.values)\n\n    def __getitem__(self, key):\n        # if key is of invalid type or value, the list values will raise the error\n        return self.values[key]\n\n    def __setitem__(self, key, value):\n        self.values[key] = value\n\n    def __delitem__(self, key):\n        del self.values[key]\n\n    def __iter__(self):\n        return iter(self.values)\n\n    def __reversed__(self):\n        return reversed(self.values)\n\n    def append(self, value):\n        self.values.append(value)\n    def head(self):\n        # get the first element\n        return self.values[0]\n    def tail(self):\n        # get all elements after the first\n        return self.values[1:]\n    def init(self):\n        # get elements up to the last\n        return self.values[:-1]\n    def last(self):\n        # get last element\n        return self.values[-1]\n    def drop(self, n):\n        # get all elements except first n\n        return self.values[n:]\n    def take(self, n):\n        # get first n elements\n        return self.values[:n]\n</code></pre> <p>There you have it, a (marginally) useful example of how to implement your own sequence. Of course, there are more useful applications of custom sequences, but quite a few of them are already implemented in the standard library (batteries included, right?), like <code>Counter</code>, <code>OrderedDict</code>, and <code>NamedTuple</code>.</p>"},{"location":"python/basics/magic-methods/#reflection","title":"Reflection","text":"<p>You can also control how reflection using the built in functions <code>isinstance()</code> and <code>issubclass()</code>behaves by defining magic methods. The magic methods are:</p> <p><code>__instancecheck__(self, instance)</code> :    Checks if an instance is an instance of the class you defined (e.g. <code>isinstance(instance, class)</code>.</p> <p><code>__subclasscheck__(self, subclass)</code> :    Checks if a class subclasses the class you defined (e.g. <code>issubclass(subclass, class)</code>).</p> <p>The use case for these magic methods might seem small, and that may very well be true. I won't spend too much more time on reflection magic methods because they aren't very important, but they reflect something important about object-oriented programming in Python and Python in general: there is almost always an easy way to do something, even if it's rarely necessary. These magic methods might not seem useful, but if you ever need them you'll be glad that they're there (and that you read this guide!).</p>"},{"location":"python/basics/magic-methods/#callable-objects","title":"Callable Objects","text":"<p>As you may already know, in Python, functions are first-class objects. This means that they can be passed to functions and methods just as if they were objects of any other kind. This is an incredibly powerful feature.</p> <p>A special magic method in Python allows instances of your classes to behave as if they were functions, so that you can \"call\" them, pass them to functions that take functions as arguments, and so on. This is another powerful convenience feature that makes programming in Python that much sweeter.</p> <p><code>__call__(self, [args...])</code> :    Allows an instance of a class to be called as a function. Essentially, this means that <code>x()</code> is the same as <code>x.__call__()</code>. Note that <code>__call__</code> takes a variable number of arguments; this means that you define <code>__call__</code> as you would any other function, taking however many arguments you'd like it to.</p> <p><code>__call__</code> can be particularly useful in classes with instances that need to often change state. \"Calling\" the instance can be an intuitive and elegant way to change the object's state. An example might be a class representing an entity's position on a plane:</p> <pre><code>:::python\nclass Entity:\n    '''Class to represent an entity. Callable to update the entity's position.'''\n\n    def __init__(self, size, x, y):\n        self.x, self.y = x, y\n        self.size = size\n\n    def __call__(self, x, y):\n        '''Change the position of the entity.'''\n        self.x, self.y = x, y\n\n    # snip...\n</code></pre>"},{"location":"python/basics/magic-methods/#context-managers","title":"Context Managers","text":"<p>In Python 2.5, a new keyword was introduced in Python along with a new method for code reuse: the <code>with</code> statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library), but not until PEP 343 was accepted did it achieve status as a first-class language construct. You may have seen <code>with</code> statements before:</p> <pre><code>:::python\nwith open('foo.txt') as bar:\n    # perform some action with bar\n</code></pre> <p>Context managers allow setup and cleanup actions to be taken for objects when their creation is wrapped with a <code>with</code> statement. The behavior of the context manager is determined by two magic methods:</p> <p><code>__enter__(self)</code> :    Defines what the context manager should do at the beginning of the block created by the <code>with</code> statement. Note that the return value of <code>__enter__</code> is bound to the target of the <code>with</code> statement, or the name after the <code>as</code>.</p> <p><code>__exit__(self, exception_type, exception_value, traceback)</code> :    Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, <code>exception_type</code>, <code>exception_value</code>, and <code>traceback</code> will be <code>None</code>. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure <code>__exit__</code> returns <code>True</code> after all is said and done. If you don't want the exception to be handled by the context manager, just let it happen.</p> <p><code>__enter__</code> and <code>__exit__</code> can be useful for specific classes that have well-defined and common behavior for setup and cleanup. You can also use these methods to create generic context managers that wrap other objects. Here's an example:</p> <pre><code>:::python\nclass Closer:\n    '''A context manager to automatically close an object with a close method\n    in a with statement.'''\n\n    def __init__(self, obj):\n        self.obj = obj\n\n    def __enter__(self):\n        return self.obj # bound to target\n\n    def __exit__(self, exception_type, exception_val, trace):\n        try:\n           self.obj.close()\n        except AttributeError: # obj isn't closable\n           print 'Not closable.'\n           return True # exception handled successfully\n</code></pre> <p>Here's an example of <code>Closer</code> in action, using an FTP connection to demonstrate it (a closable socket):</p> <pre><code>:::pythonconsole\n&gt;&gt;&gt; from magicmethods import Closer\n&gt;&gt;&gt; from ftplib import FTP\n&gt;&gt;&gt; with Closer(FTP('ftp.somesite.com')) as conn:\n...     conn.dir()\n...\n# output omitted for brevity\n&gt;&gt;&gt; conn.dir()\n# long AttributeError message, can't use a connection that's closed\n&gt;&gt;&gt; with Closer(int(5)) as i:\n...     i += 1\n...\nNot closable.\n&gt;&gt;&gt; i\n6\n</code></pre> <p>See how our wrapper gracefully handled both proper and improper uses? That's the power of context managers and magic methods. Note that the Python standard library includes a module contextlib that contains a context manager, <code>contextlib.closing()</code>, that does approximately the same thing (without any handling of the case where an object does not have a <code>close()</code> method).</p>"},{"location":"python/basics/magic-methods/#abstract-base-classes","title":"Abstract Base Classes","text":"<p>See http://docs.python.org/2/library/abc.html.</p>"},{"location":"python/basics/magic-methods/#building-descriptor-objects","title":"Building Descriptor Objects","text":"<p>Descriptors are classes which, when accessed through either getting, setting, or deleting, can also alter other objects. Descriptors aren't meant to stand alone; rather, they're meant to be held by an owner class. Descriptors can be useful when building object-oriented databases or classes that have attributes whose values are dependent on each other. Descriptors are particularly useful when representing attributes in several different units of measurement or representing computed attributes (like distance from the origin in a class to represent a point on a grid).</p> <p>To be a descriptor, a class must have at least one of <code>__get__</code>, <code>__set__</code>, and <code>__delete__</code> implemented. Let's take a look at those magic methods:</p> <p><code>__get__(self, instance, owner)</code> :    Define behavior for when the descriptor's value is retrieved. <code>instance</code> is the instance of the owner object. <code>owner</code> is the owner class itself.</p> <p><code>__set__(self, instance, value)</code> :    Define behavior for when the descriptor's value is changed. <code>instance</code> is the instance of the owner class and <code>value</code> is the value to set the descriptor to.</p> <p><code>__delete__(self, instance)</code> :    Define behavior for when the descriptor's value is deleted. <code>instance</code> is the instance of the owner object.</p> <p>Now, an example of a useful application of descriptors: unit conversions.</p> <pre><code>:::python\nclass Meter(object):\n    '''Descriptor for a meter.'''\n\n    def __init__(self, value=0.0):\n        self.value = float(value)\n    def __get__(self, instance, owner):\n        return self.value\n    def __set__(self, instance, value):\n        self.value = float(value)\n\nclass Foot(object):\n    '''Descriptor for a foot.'''\n\n    def __get__(self, instance, owner):\n        return instance.meter * 3.2808\n    def __set__(self, instance, value):\n        instance.meter = float(value) / 3.2808\n\nclass Distance(object):\n    '''Class to represent distance holding two descriptors for feet and\n    meters.'''\n    meter = Meter()\n    foot = Foot()\n</code></pre>"},{"location":"python/basics/magic-methods/#copying","title":"Copying","text":"<p>Sometimes, particularly when dealing with mutable objects, you want to be able to copy an object and make changes without affecting what you copied from. This is where Python's <code>copy</code> comes into play. However (fortunately), Python modules are not sentient, so we don't have to worry about a Linux-based robot uprising, but we do have to tell Python how to efficiently copy things.</p> <p><code>__copy__(self)</code> :   Defines behavior for <code>copy.copy()</code> for instances of your class. <code>copy.copy()</code> returns a shallow copy of your object -- this means that, while the instance itself is a new instance, all of its data is referenced -- i.e., the object itself is copied, but its data is still referenced (and hence changes to data in a shallow copy may cause changes in the original).</p> <p><code>__deepcopy__(self, memodict={})</code> :    Defines behavior for <code>copy.deepcopy()</code> for instances of your class. <code>copy.deepcopy()</code> returns a deep copy of your object -- the object and its data are both copied. <code>memodict</code> is a cache of previously copied objects -- this optimizes copying and prevents infinite recursion when copying recursive data structures. When you want to deep copy an individual attribute, call <code>copy.deepcopy()</code> on that attribute with <code>memodict</code> as the first argument.</p> <p>What are some use cases for these magic methods? As always, in any case where you need more fine-grained control than what the default behavior gives you. For instance, if you are attempting to copy an object that stores a cache as a dictionary (which might be large), it might not make sense to copy the cache as well -- if the cache can be shared in memory between instances, then it should be.</p>"},{"location":"python/basics/magic-methods/#pickling-your-objects","title":"Pickling Your Objects","text":"<p>If you spend time with other Pythonistas, chances are you've at least heard of pickling. Pickling is a serialization process for Python data structures, and can be incredibly useful when you need to store an object and retrieve it later (usually for caching). It's also a major source of worries and confusion.</p> <p>Pickling is so important that it doesn't just have its own module (<code>pickle</code>), but its own protocol and the magic methods to go with it. But first, a brief word on how to pickle existing types(feel free to skip it if you already know).</p>"},{"location":"python/basics/magic-methods/#pickling-a-quick-soak-in-the-brine","title":"Pickling: A Quick Soak in the Brine","text":"<p>Let's dive into pickling. Say you have a dictionary that you want to store and retrieve later. You couldwrite it's contents to a file, carefully making sure that you write correct syntax, then retrieve it using either <code>exec()</code> or processing the file input. But this is precarious at best: if you store important data in plain text, it could be corrupted or changed in any number of ways to make your program crash or worse run malicious code on your computer. Instead, we're going to pickle it:</p> <pre><code>:::python\nimport pickle\n\ndata = {'foo': [1, 2, 3],\n        'bar': ('Hello', 'world!'),\n        'baz': True}\njar = open('data.pkl', 'wb')\npickle.dump(data, jar) # write the pickled data to the file jar\njar.close()\n</code></pre> <p>Now, a few hours later, we want it back. All we have to do is unpickle it:</p> <pre><code>:::python\nimport pickle\n\npkl_file = open('data.pkl', 'rb') # connect to the pickled data\ndata = pickle.load(pkl_file) # load it into a variable\nprint data\npkl_file.close()\n</code></pre> <p>What happens? Exactly what you expect. It's just like we had <code>data</code> all along.</p> <p>Now, for a word of caution: pickling is not perfect. Pickle files are easily corrupted on accident and on purpose. Pickling may be more secure than using flat text files, but it still can be used to run malicious code. It's also incompatible across different versions of Python, so don't expect to distribute pickled objects and expect people to be able to open them. However, it can also be a powerful tool for caching and other common serialization tasks.</p>"},{"location":"python/basics/magic-methods/#pickling-your-own-objects","title":"Pickling your own Objects","text":"<p>Pickling isn't just for built-in types. It's for any class that follows the pickle protocol. The pickle protocol has four optional methods for Python objects to customize how they act (it's a bit different for C extensions, but that's not in our scope):</p> <p><code>__getinitargs__(self)</code> :    If you'd like for <code>__init__</code> to be called when your class is unpickled, you can define <code>__getinitargs__</code>, which should return a tuple of the arguments that you'd like to be passed to  <code>__init__</code>. Note that this method will only work for old-style classes.</p> <p><code>__getnewargs__(self)</code> :    For new-style classes, you can influence what arguments get passed to <code>__new__</code> upon unpickling. This method should also return a tuple of arguments that will then be passed to <code>__new__</code>.</p> <p><code>__getstate__(self)</code> :    Instead of the object's <code>__dict__</code> attribute being stored, you can return a custom state to be stored when the object is pickled. That state will be used by <code>__setstate__</code> when the object is unpickled.</p> <p><code>__setstate__(self, state)</code> :    When the object is unpickled, if <code>__setstate__</code> is defined the object's state will be passed to it instead of directly applied to the object's <code>__dict__</code>. This goes hand in hand with <code>__getstate__</code>: when both are defined, you can represent the object's pickled state however you want with whatever you want.</p> <p><code>__reduce__(self)</code> :    When defining extension types (i.e., types implemented using Python's C API), you have to tell Python how to pickle them if you want them to pickle them. <code>__reduce__()</code> is called when an object defining it is pickled. It can either return a string representing a global name that Python will look up and pickle, or a tuple. The tuple contains between 2 and 5 elements: a callable object that is called to recreate the object, a tuple of arguments for that callable object, state to be passed to <code>__setstate__</code> (optional), an iterator yielding list items to be pickled (optional),  and an iterator yielding dictionary items to be pickled (optional).</p> <p><code>__reduce_ex__(self)</code> :    <code>__reduce_ex__</code> exists for compatibility. If it is defined, <code>__reduce_ex__</code> will be called over <code>__reduce__</code> on pickling. <code>__reduce__</code> can be defined as well for older versions of the pickling API that did not support <code>__reduce_ex__</code>.</p>"},{"location":"python/basics/magic-methods/#an-example_1","title":"An Example","text":"<p>Our example is a <code>Slate</code>, which remembers what its values have been and when those values were written to it. However, this particular slate goes blank each time it is pickled: the current value will not be saved.</p> <pre><code>:::python\nimport time\n\nclass Slate:\n    '''Class to store a string and a changelog, and forget its value when\n    pickled.'''\n\n    def __init__(self, value):\n        self.value = value\n        self.last_change = time.asctime()\n        self.history = {}\n\n    def change(self, new_value):\n        # Change the value. Commit last value to history\n        self.history[self.last_change] = self.value\n        self.value = new_value\n        self.last_change = time.asctime()\n\n    def print_changes(self):\n        print 'Changelog for Slate object:'\n        for k, v in self.history.items():\n            print '%s\\t %s' % (k, v)\n\n    def __getstate__(self):\n        # Deliberately do not return self.value or self.last_change.\n        # We want to have a \"blank slate\" when we unpickle.\n        return self.history\n\n    def __setstate__(self, state):\n        # Make self.history = state and last_change and value undefined\n        self.history = state\n        self.value, self.last_change = None, None\n</code></pre>"},{"location":"python/basics/magic-methods/#conclusion","title":"Conclusion","text":"<p>The goal of this guide is to bring something to anyone that reads it, regardless of their experience with Python or object-oriented programming. If you're just getting started with Python, you've gained valuable knowledge of the basics of writing feature-rich, elegant, and easy-to-use classes. If you're an intermediate Python programmer, you've probably picked up some slick new concepts and strategies and some good ways to reduce the amount of code written by you and clients. If you're an expert Pythonista, you've been refreshed on some of the stuff you might have forgotten about and maybe picked up a few new tricks along the way. Whatever your experience level, I hope that this trip through Python's special methods has been truly magical. (I couldn't resist the final pun!)</p>"},{"location":"python/basics/magic-methods/#references","title":"References","text":"<p>https://github.com/RafeKettler/magicmethods/blob/master/magicmethods.markdown</p>"},{"location":"python/basics/packages/","title":"Python packages and modules","text":""},{"location":"python/basics/packages/#modules","title":"Modules","text":"<p>A python \u201cmodule\u201d is a single namespace, with a collection of values:</p> <ul> <li>functions</li> <li>constants</li> <li>class definitions</li> <li>etc.</li> </ul> <p>A module usually corresponds to a single file: <code>something.py</code></p>"},{"location":"python/basics/packages/#packages","title":"Packages","text":"<p>A package is essentially a module, except it can have other modules (and indeed other packages) inside it.</p> <p>A package usually corresponds to a directory with a file in it called <code>__init__.py</code> and any number of python files or other package directories:</p> <pre><code>a_package\n   __init__.py\n   module_a.py\n   a_sub_package\n     __init__.py\n     module_b.py\n</code></pre> <p>The <code>__init__.py</code> can be totally empty or it can have python code in it. The code will be run when the package is imported. Modules inside packages are not automatically imported. So, with the above structure:</p> <pre><code>import a_package\n</code></pre> <p>will run the code in <code>a_package/__init__.py</code>.</p> <p>Any names defined in the <code>__init__.py</code> will be available in:</p> <pre><code>a_package.a_name\n</code></pre> <p>but:</p> <pre><code>a_package.module_a\n</code></pre> <p>will not exist. To get submodules, you need to explicitly import them:</p> <pre><code>import a_package.module_a\n</code></pre>"},{"location":"python/basics/packages/#python-packaging-tools-setuptools","title":"Python packaging tools - <code>setuptools</code>","text":""},{"location":"python/basics/packages/#the-setuppy-file","title":"The <code>setup.py</code> file","text":"<p>An example setup.py:</p> <pre><code>from setuptools import setup\n\n setup(\n   name='PackageName',\n   version='0.1.0',\n   author='An Awesome Coder',\n   author_email='aac@example.com',\n   packages=['package_name', 'package_name.test'],\n   scripts=['bin/script1','bin/script2'],\n   url='http://pypi.python.org/pypi/PackageName/',\n   license='LICENSE.txt',\n   description='An awesome package that does something',\n   long_description=open('README.txt').read(),\n   install_requires=[\n       \"Django &gt;= 1.1.1\",\n       \"pytest\",\n   ],\n)\n</code></pre>"},{"location":"python/basics/packages/#running-setuppy","title":"Running <code>setup.py</code>","text":"<p>With a <code>setup.py</code> script defined, setuptools can do a lot:</p> <p>Build a source distribution (a tar archive of all the files needed to build and install the package):</p> <pre><code>python setup.py sdist\n</code></pre> <p>Build from source:</p> <pre><code>python setup.py build\n</code></pre> <p>And install:</p> <pre><code>python setup.py install\n</code></pre> <p>Install in \"develop\" or \"editable\" mode: <pre><code>python setup.py develop\n</code></pre> or <pre><code>pip install -e .\n</code></pre></p>"},{"location":"python/basics/packages/#references","title":"References","text":"<ul> <li>Making a Python Package</li> <li>https://packaging.python.org/</li> <li>How To Package Your Python Code</li> <li>Sample Python Project</li> </ul>"},{"location":"python/basics/slice-notation/","title":"Slice notation","text":"<p>The ASCII art diagram is helpful too for remembering how slices work:</p> <pre><code> +---+---+---+---+---+---+\n | P | y | t | h | o | n |\n +---+---+---+---+---+---+\n 0   1   2   3   4   5   6\n-6  -5  -4  -3  -2  -1\n</code></pre> <p>One way to remember how slices work is to think of the indices as pointing between characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of n characters has index n.</p> <pre><code>a[start:end] # items start through end-1\na[start:]    # items start through the rest of the array\na[:end]      # items from the beginning through end-1\na[:]         # a copy of the whole array\n</code></pre> <p>There is also the <code>step</code> value, which can be used with any of the above:</p> <pre><code>a[start:end:step] # start through not past end, by step\n</code></pre> <p>The key point to remember is that the <code>:end</code> value represents the first value that is not in the selected slice. So, the difference beween <code>end</code> and <code>start</code> is the number of elements selected (if <code>step</code> is 1, the default).</p> <p>The other feature is that <code>start</code> or <code>end</code> may be a negative number, which means it counts from the end of the array instead of the beginning. So:</p> <pre><code>a[-1]    # last item in the array\na[-2:]   # last two items in the array\na[:-2]   # everything except the last two items\n</code></pre> <p>Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for <code>a[:-2]</code> and <code>a</code> only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may happen.</p>"},{"location":"python/basics/snippets/","title":"Useful Python code snippets","text":"<p>A collection of several code snippets of common or useful operation in Python.</p>"},{"location":"python/basics/snippets/#index","title":"Index","text":"<ul> <li>Get list of attributes (methods) of an object</li> <li>Remove dictionary from list</li> <li>List Comprehension</li> <li>Lambda Functions</li> <li>Map and Filter</li> <li>Arange and Linspace</li> <li>Download image from url</li> <li>Create centered thumbnail from image</li> <li>Handle keyboard interrupt (Ctrl + C)</li> <li>Merge dictionaries</li> </ul>"},{"location":"python/basics/snippets/#get-list-of-attributes-methods-of-an-object","title":"Get list of attributes (methods) of an object","text":"<p>Get a list of attributes (methods) of an object with <code>dir(object)</code></p> <p>To see everything except hidden/dunder methods you can do:</p> <pre><code>print((d for d in dir(obj) if not d.startswith('_')))\n</code></pre>"},{"location":"python/basics/snippets/#remove-dictionary-from-list","title":"Remove dictionary from list","text":"<p>Here's how to remove a specific dictionary, or several dictionaries, from a list of dictionaries by a specific key. In the example below we are removing from the list all dictionaries which have and <code>id</code> key of <code>2</code>.</p> <pre><code>thelist = [{'id': 1, 'name': 'paul'},\n           {'id': 2, 'name': 'john'}]\n\nthelist[:] = [d for d in thelist if d.get('id') != 2]\n</code></pre>"},{"location":"python/basics/snippets/#list-comprehension","title":"List Comprehension","text":"<p>Without list comprehension:</p> <pre><code>x = [1,2,3,4]\nout = []\nfor item in x:\n    out.append(item**2)\nprint(out)\n# [1, 4, 9, 16]\n</code></pre> <p>With list comprehension:</p> <pre><code>x = [1,2,3,4]\nout = [item**2 for item in x]\nprint(out)\n# [1, 4, 9, 16]\n</code></pre>"},{"location":"python/basics/snippets/#lambda-functions","title":"Lambda Functions","text":"<p>Lambda functions are used for creating small, one-time and anonymous function objects in Python. Basically, they let you create a function, without creating a function. Note that lambda functions can do everything that regular functions can do, as long as there\u2019s just one expression. The basic syntax of lambda functions is: <code>lambda arguments: expression</code>. And here is an example:</p> <pre><code>double = lambda x: x * 2\nprint(double(5))\n# 10\n</code></pre>"},{"location":"python/basics/snippets/#map-and-filter","title":"Map and Filter","text":"<p>Once you have a grasp on lambda functions, learning to pair them with the map and filter functions can be a powerful tool. Specifically, map takes in a list and transforms it into a new list by performing some sort of operation on each element. In this example, it goes through each element and maps the result of itself times 2 to a new list. Note that the list function simply converts the output to list type.</p> <pre><code>seq = [1, 2, 3, 4, 5]\nlist(map(lambda var: var*2, seq))\n #[2, 4, 6, 8, 10]\n</code></pre> <p>The filter function takes in a list and a rule, much like map, however it returns a subset of the original list by comparing each element against the boolean filtering rule.</p> <pre><code>seq = [1, 2, 3, 4, 5]\nlist(filter(lambda x: x &gt; 2, seq))\n# [3, 4, 5]\n</code></pre> <p></p>"},{"location":"python/basics/snippets/#arange-and-linspace","title":"Arange and Linspace","text":"<p>For creating quick and easy Numpy arrays, look no further than the arange and linspace functions. Each one has their specific purpose, but the appeal here (instead of using range), is that they output NumPy arrays, which are typically easier to work with for data science.</p> <p>Arange returns evenly spaced values within a given interval. Along with a starting and stopping point, you can also define a step size or data type if necessary. Note that the stopping point is a \u2018cut-off\u2019 value, so it will not be included in the array output.</p> <pre><code># np.arange(start, stop, step)\nnp.arange(3, 7, 2)\n# array([3, 5])\n</code></pre> <p>Linspace is very similar, but with a slight twist. Linspace returns evenly spaced numbers over a specified interval. So given a starting and stopping point, as well as a number of values, linspace will evenly space them out for you in a NumPy array. This is especially helpful for data visualizations and declaring axes when plotting.</p> <pre><code># np.linspace(start, stop, num)\nnp.linspace(2.0, 3.0, num=5)\n# array([ 2.0,  2.25,  2.5,  2.75, 3.0])\n</code></pre>"},{"location":"python/basics/snippets/#download-image-from-url","title":"Download image from url","text":"<pre><code>import requests\nimport os\n\ndef download_image(url, dir):\n    if url.endswith(('.jpg', '.jpeg', '.png', '.gif')):\n        img = requests.get(url).content\n        file_name = os.path.basename(url)\n        with open(f'{dir}{file_name}', 'wb') as f:\n            f.write(img)\n\ndownload_image('https://impshum.co.uk/red.png', './')\n</code></pre>"},{"location":"python/basics/snippets/#create-centered-thumbnail-from-image","title":"Create centered thumbnail from image","text":"<pre><code>from PIL import Image\n\ndef create_thumbnail(infile, outfile, width, height):\n    thumb = width, height\n    img = Image.open(infile)\n    width, height = img.size\n\n    if width &gt; height:\n        delta = width - height\n        left = int(delta / 2)\n        upper = 0\n        right = height + left\n        lower = height\n    else:\n        delta = height - width\n        left = 0\n        upper = int(delta / 2)\n        right = width\n        lower = width + upper\n\n    img = img.crop((left, upper, right, lower))\n    img.thumbnail(thumb, Image.ANTIALIAS)\n    img.save(outfile)\n\ncreate_thumbnail('file.jpg', 'file_thumb.jpg', 300, 300)\n</code></pre>"},{"location":"python/basics/snippets/#handle-keyboard-interrupt-ctrl-c","title":"Handle keyboard interrupt (Ctrl + C)","text":"<pre><code>try:\n    # DO STUFF HERE\nexcept KeyboardInterrupt:\n    print('stopped')\nfinally:\n    # DO STUFF HERE\n    print('Exiting')\n</code></pre>"},{"location":"python/basics/snippets/#merge-dictionaries","title":"Merge dictionaries","text":"<pre><code>x = {'a': 1, 'b': 2}\ny = {'b': 3, 'c': 4}\n\nz = {**x, **y}\n</code></pre>"},{"location":"python/basics/string-formatting/","title":"String formatting in Python","text":""},{"location":"python/basics/string-formatting/#f-strings-python-36","title":"F-strings (Python &gt;=3.6)","text":"<p>F-strings are faster than the other string formatting methods and are easier to read and use. Here are some tricks you may not have known.</p> <pre><code>name = \"Test\"\nf'My app name is {name}.'  # 'My app name is Test.\n</code></pre>"},{"location":"python/basics/string-formatting/#1-number-formatting","title":"1. Number formatting:","text":"<p>You can do various formatting with numbers.</p> <pre><code>number = 150\n\n# decimal places to n -&gt; .nf\nprint(f\"number: {number:.2f}\")\n# number: 150.00\n\n# hex conversion\nprint(f\"hex: {number:#0x}\")\n# hex: 0x96\n\n# binary conversion\nprint(f\"binary: {number:b}\")\n# binary: 10010110\n\n# octal conversion\nprint(f\"octal: {number:o}\")\n# octal: 226\n\n# scientific notation\nprint(f\"scientific: {number:e}\")\n# scientific: 1.500000e+02\n\n# total number of characters\nprint(f\"Number: {number:09}\")\n# Number: 000000150\n\nratio = 1 / 2\n# percentage with 2 decimal places\nprint(f\"percentage = {ratio:.2%}\")\n# percentage = 50.00%\n</code></pre>"},{"location":"python/basics/string-formatting/#2-stop-writing-printfvar-var","title":"2. Stop writing print(f\u201dvar = {var}\u201d)","text":"<p>This is the debug feature with f-strings.</p> <pre><code>a, b = 5, 15\nprint(f\"a = {a}\") # Doing this ?\n# a = 5\n\n# Do this instead.\nprint(f\"{a = }\")\n# a = 5\n\n# Arithmatic operations\nprint(f\"{a + b = }\")\n# a + b = 20\n\n# with formatting\nprint(f\"{a + b = :.2f}\")\n# a + b = 20.00\n</code></pre>"},{"location":"python/basics/string-formatting/#3-date-formatting","title":"3. Date formatting","text":"<p>You can do <code>strftime()</code> formattings from f-string.</p> <pre><code>import datetime\n\ntoday = datetime.datetime.now()\nprint(f\"datetime : {today}\")\n# datetime : 2023-10-27 11:05:40.282314\n\nprint(f\"date time: {today:%m/%d/%Y %H:%M:%S}\")\n# date time: 10/27/2023 11:05:40\n\nprint(f\"date: {today:%m/%d/%Y}\")\n# date: 10/27/2023\n\nprint(f\"time: {today:%H:%M:%S %p}\")\n# time: 11:05:40 AM\n</code></pre>"},{"location":"python/basics/string-formatting/#old-method-python-26","title":"Old method (Python &gt;=2.6)","text":"<pre><code>'{} {}'.format('one', 'two')  # Output: 'one two'\n'{} {}'.format(1, 2)  # Output: '1 2'\n</code></pre>"},{"location":"python/basics/string-formatting/#very-old-method","title":"Very old method","text":"<pre><code>'%s %s' % ('one', 'two')  # Output: 'one two'\n'%d %d' % (1, 2)  # Output: '1 2'\n</code></pre>"},{"location":"python/basics/string-formatting/#number-formatting","title":"Number formatting","text":"<p>The following table shows various ways to format numbers using str.format(), including examples for both float formatting and integers.</p> <p>To run examples use <code>print(\"FORMAT\".format(NUMBER))</code>. So to get the output of the first example, you would run: <code>print(\"{:.2f}\".format(3.1415926))</code>.</p> Number Format Output Description 3.1415926 {:.2f} 3.14 2 decimal places 3.1415926 {:+.2f} +3.14 2 decimal places with sign -1 {:+.2f} -1.00 2 decimal places with sign 2.71828 {:.0f} 3 No decimal places 5 {:0&gt;2d} 05 Pad number with zeros (left padding, width 2) 5 {:x&lt;4d} 5xxx Pad number with x\u2019s (right padding, width 4) 10 {:x&lt;4d} 10xx Pad number with x\u2019s (right padding, width 4) 1000000 {:,} 1,000,000 Number format with comma separator 0.25 {:.2%} 25.00% Format percentage 1000000000 {:.2e} 1.00e+09 Exponent notation 13 {:10d} 13 Right aligned (default, width 10) 13 {:&lt;10d} 13 Left aligned (width 10) 13 {:^10d} 13 Center aligned (width 10)"},{"location":"python/django/django-postgresql-docker/","title":"Django and PostgreSQL setup in Docker","text":"<p>Here is how to dockerize a Django app along side a PostgreSQL database container.</p> <p>This guide shows how to integrate the following tools:</p> <ul> <li>Docker containers</li> <li>uv package manager</li> <li>Django app</li> <li>PostgreSQL database</li> </ul>"},{"location":"python/django/django-postgresql-docker/#setup-project","title":"Setup project","text":"<p>Project folder structure:</p> <pre><code>test-django-docker\n\u251c\u2500\u2500 .venv\n\u251c\u2500\u2500 my_django_app\n\u2502   \u251c\u2500\u2500 my_django_app\n\u2502   \u251c\u2500\u2500 core\n\u2502   \u2514\u2500\u2500 manage.py\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 readme.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 uv.lock\n</code></pre> <p>To set this up we create a root folder:</p> <pre><code>mkdir test-django-docker\ncd test-django-docker\n</code></pre> <p>Since we are using <code>uv</code> to manage packages and environments we initiate it:</p> <pre><code>uv init .\n</code></pre> <p>Now lets create the Django project <code>my_django_app</code> and create the app <code>core</code>.</p> <pre><code>uv run django-admin startproject my_django_app\ncd my_django_app\nuv run python manage.py startapp core\n</code></pre> <p>On the root folder create a <code>requirements.txt</code> file:</p> <pre><code>cd ..\nuv pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"python/django/django-postgresql-docker/#adding-gunicorn","title":"Adding <code>gunicorn</code>","text":"<p>Django <code>manage.py runserver</code> is only meant for development purposes and should be changed for a WSGI server for production.</p> <pre><code>uv add gunicorn\nuv add \"psycopg[binary]\"\nuv pip freeze &gt; requirements.txt\n</code></pre>"},{"location":"python/django/django-postgresql-docker/#create-a-dockerfile","title":"Create a Dockerfile","text":"<p>A Dockerfile is a script that tells Docker how to build your Docker image. Put it in the root directory of your Django project. Here\u2019s a basic Dockerfile setup for Django:</p> <pre><code># Use the official Python runtime image\nFROM python:3.11.13-slim-bookworm\n\n# Create the app directory\nRUN mkdir /app\n\n# Set the working directory inside the container\nWORKDIR /app\n\n# Set several environment variables:\n# Prevents Python from writing pyc files to disk\nENV PYTHONDONTWRITEBYTECODE=1\n\n# Prevents Python from buffering stdout and stderr\nENV PYTHONUNBUFFERED=1 \n\n# Upgrade pip\nRUN pip install --upgrade pip \n\n# Copy the Django project and install dependencies\nCOPY requirements.txt  /app/\n\n# Install all dependencies \nRUN pip install --no-cache-dir -r requirements.txt\n\n# Copy the Django project to the container\nCOPY . /app/\n\n# Expose the Django port\nEXPOSE 8000\n\n# Run Django development server\n# CMD [\"python\", \"manage.py\", \"runserver\", \"0.0.0.0:8000\"]\n\n# Start the application using Gunicorn\nCMD [\"gunicorn\", \"--bind\", \"0.0.0.0:8000\", \"--workers\", \"3\", \"my_django_app.wsgi:application\"]\n</code></pre> <p>Build the Docker container:</p> <pre><code>docker build -t django-docker .\n</code></pre> <p>To see your image, you can run:</p> <pre><code>docker image list\n</code></pre>"},{"location":"python/django/django-postgresql-docker/#configure-the-docker-compose-file","title":"Configure the Docker Compose file","text":"<p>A <code>docker-compose.yml</code> file allows you to manage multi-container applications. Here, we'll define both a Django container and a PostgreSQL database container.</p> <pre><code>services:\n  web:\n    build: .\n    container_name: django_app\n    ports:\n      - \"8000:8000\"\n    volumes:\n      - ./my_django_app:/app\n    depends_on:\n      db:\n        condition: service_healthy\n        restart: true\n    env_file:\n      - .env\n  db:\n    image: postgres:17\n    container_name: postgres_db\n    environment:\n      POSTGRES_DB: ${POSTGRES_DB}\n      POSTGRES_USER: ${POSTGRES_USER}\n      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}\n    healthcheck:\n        test: [\"CMD-SHELL\", \"pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}\"]\n        interval: 10s\n        retries: 5\n        start_period: 30s\n        timeout: 10s\n    ports:\n      - \"5432:5432\"\n    volumes:\n      - postgres_db:/var/lib/postgresql/data\n    env_file:\n      - .env\nvolumes:\n  postgres_db:\n</code></pre> <p>The compose file makes use of an environment file called <code>.env</code>, which will make it easy to keep the settings separate from the application code.</p> <pre><code>POSTGRES_DB=postgres_db\nPOSTGRES_USER=dbuser\nPOSTGRES_PASSWORD=dbpassword\nPOSTGRES_HOST=db\nPOSTGRES_PORT=5432\n</code></pre>"},{"location":"python/django/django-postgresql-docker/#update-django-settings-and-configuration-files","title":"Update Django settings and configuration files","text":"<p>Let's update the <code>setting.py</code> file by:</p> <ul> <li> <p>Adding the <code>core</code> app. </p> </li> <li> <p>Change some variables to enable them to be set using environment variables when the container is started. This allows you to change these settings depending on the environment you are working in.</p> </li> <li> <p>Configure the database settings to use PostgreSQL.</p> </li> </ul> <pre><code>import os\n\n# ...\n\nSECRET_KEY = os.environ.get(\"DJANGO_SECRET_KEY\")\n\nDEBUG = bool(os.environ.get(\"DEBUG\", default=0))\n\nALLOWED_HOSTS = os.environ.get(\"DJANGO_ALLOWED_HOSTS\",\"127.0.0.1\").split(\",\")\n\n# ... \n\nINSTALLED_APPS = [\n    # ...\n    'core',\n]\n\n# ... \n\nDATABASES = {\n     'default': {\n         'ENGINE': 'django.db.backends.postgresql',\n         'NAME': os.environ['POSTGRES_DB'],\n         'USER': os.environ['POSTGRES_USER'],\n         'PASSWORD': os.environ['POSTGRES_PASSWORD'],\n         'HOST': os.environ['POSTGRES_HOST'],\n         'PORT': os.environ['POSTGRES_PORT'],\n     }\n }\n</code></pre>"},{"location":"python/django/django-postgresql-docker/#references","title":"References","text":"<ul> <li> <p>Docker - Django and PostgreSQL setup (with uv) from scratch!</p> </li> <li> <p>How to Dockerize a Django App: Step-by-Step Guide for Beginners</p> </li> <li> <p>Dockerizing Django with Postgres, Gunicorn, and Nginx</p> </li> </ul>"},{"location":"python/django/django-pyinstaller/","title":"Create a executable Django App","text":"<p>Since PyInstaller 2.1, you can build an executable from a project using Django 2.1.8. PyInstaller will take care of a lot of the magic needed to correctly build Django applications. For instance, it will parse all your files and find all the dotted-names strings that refer to module names (eg: within <code>settings.py</code>) and make sure that all those modules are packaged.</p> <p>You should be able to run PyInstaller over the <code>manage.py</code> script directly.</p> <p>The following example should clarify the required steps.</p>"},{"location":"python/django/django-pyinstaller/#example","title":"Example","text":"<p>Let's say that your Django project is called <code>mysite</code>. If you used the <code>django-admin.py</code> wizard, you probably have ended up with a Django project directory structure. PyInstaller expects a directory structure like this: <pre><code>mysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings.py\n        urls.py\n        wsgi.py\n        ...\n</code></pre> Use PyInstaller: <pre><code>$ pyinstaller --name=mysite mysite/manage.py\n</code></pre> Notice the use of the <code>--name</code> option to make sure the output is a packaged executable called <code>mysite</code> and not <code>manage</code> from the script name.</p> <p>Now you should have a frozen django app in the directory <code>./dist/mysite/</code>. You should be able to see an executable file <code>./dist/mysite/mysite.exe</code>. Use this file the same way as you would use <code>manage.py</code>.</p> <p>To run the built-in Django test server run: <pre><code>$ ./dist/mysite/mysite.exe runserver localhost:8000\n</code></pre></p>"},{"location":"python/django/django-pyinstaller/#multiple-settings-modules","title":"Multiple Settings Modules","text":"<p>If you're using multiple settings files in your Django project, you'll need to do a bit more work to get pyinstaller to use the correct one. Say you had the following configuration:</p> <pre><code>mysite/\n    manage.py\n    mysite/\n        __init__.py\n        settings/\n            __init__.py\n            base.py\n            development.py\n            production.py\n        urls.py\n        wsgi.py\n</code></pre> <p>In this case, if you want PyInstaller to use <code>mysite.settings.production</code>, you should modify <code>mysite/settings/__init__.py</code> to include the following:</p> <pre><code>from production import *\n</code></pre> <p>This is required because PyInstaller only looks for settings files at two locations: either <code>mysite/settings.py</code>, or <code>mysite/settings</code>.</p>"},{"location":"python/django/django-pyinstaller/#what-if-it-does-not-work","title":"What if it does not work?","text":"<p>Django uses a lot of magic under the hood, so some quirks are expected. If the application does not run, you should see the traceback in the console. If it is an <code>ImportError</code>, it is probably a missing module whose dependency PyInstaller was not able to automatically discover.</p> <p>The quickest workaround is to add an import statement for that module, for instance in the <code>manage.py</code> script. But please report the incident to the mailing list so that we can prepare a proper fix that everyone can benefit from.</p> <p>If this does not help, have a look at [[How to Report Bugs#before-submitting-a-report-make-sure-everything-is-packaged]] to track down the problem.</p>"},{"location":"python/django/django-pyinstaller/#references","title":"References","text":"<ul> <li>https://realpython.com/installable-django-app/</li> </ul>"},{"location":"python/django/django-rest-api/","title":"Create a REST API with Django Rest Framework","text":""},{"location":"python/django/django-rest-api/#references","title":"References:","text":"<ul> <li>Django REST framework</li> <li>Full Stack React &amp; Django</li> <li>Modern Django: Part 1: Setting up Django and React</li> <li>Django REST with React</li> <li>Django Rest Framework Tutorial - Todo API</li> <li>Let\u2019s build an API with Django REST Framework</li> <li>The Ultimate Tutorial for Django REST Framework</li> </ul>"},{"location":"python/django/django-snippets/","title":"Collection of useful Django snippets for several purposes","text":""},{"location":"python/django/django-snippets/#index","title":"Index","text":"<ul> <li>Project structure</li> <li>Manage dev and production settings</li> <li>Create a slug</li> <li>Send email</li> <li>Database dump to file</li> <li>Provide data to DB via Django Python Shell</li> <li>Create script with access to Django shell</li> <li>Migrate Django from SQLite to PostgreSQL</li> <li>Using Django Messages with Bootstrap</li> <li>Override form <code>__init__</code> method</li> <li>Switch to a new Database</li> </ul>"},{"location":"python/django/django-snippets/#project-structure","title":"Project structure","text":"<p>Below is an example of a structure for a large project that contains a Django app.\u00b9 \u00b2 <pre><code>project/\n\u2502\n\u251c\u2500\u2500 app/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 admin.py\n\u2502   \u251c\u2500\u2500 apps.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 migrations/\n\u2502   \u2502   \u2514\u2500\u2500 __init__.py\n\u2502   \u2502\n\u2502   \u251c\u2500\u2500 models.py\n\u2502   \u251c\u2500\u2500 tests.py\n\u2502   \u2514\u2500\u2500 views.py\n\u2502\n\u251c\u2500\u2500 docs/\n\u2502\n\u251c\u2500\u2500 project/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 settings.py\n\u2502   \u251c\u2500\u2500 urls.py\n\u2502   \u2514\u2500\u2500 wsgi.py\n\u2502\n\u251c\u2500\u2500 static/\n\u2502   \u2514\u2500\u2500 style.css\n\u2502\n\u251c\u2500\u2500 templates/\n\u2502   \u2514\u2500\u2500 base.html\n\u2502\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 LICENSE\n\u2514\u2500\u2500 README.md\n</code></pre></p>"},{"location":"python/django/django-snippets/#manage-dev-and-production-settings","title":"Manage dev and production settings","text":"<p>When working with Django it is often useful/needed to have different settings for development and production. One way to handle this is to have separate setting files for each case.\u00b9 \u00b2 For instance, <code>settings.py</code> for production and <code>settings_dev.py</code> for development. The <code>DJANGO_SETTINGS_MODULE</code> environment variable controls which settings file Django will load. So, in development, we can:</p> <pre><code>set DJANGO_SETTINGS_MODULE=mysite.settings_dev\npython manage.py runserver\n</code></pre> <p>Alternatively we can speciffy the settings file when calling the <code>manage.py</code>:</p> <pre><code>set DJANGO_SETTINGS_MODULE=mysite.settings_dev\npython manage.py runserver --settings=settings_dev\n</code></pre> <p>However, this will not work when doing migrations. So if you required different settings when migrating, the first methods is probably better.</p>"},{"location":"python/django/django-snippets/#create-a-slug","title":"Create a slug","text":"<p>Call the Django <code>slugify</code> function automatically by overriding the <code>save</code> method. It is preferable to generate the slug only once when you create a new object, otherwise your URLs may change when the <code>q</code> field is edited, which can cause broken links. More info here.</p> <pre><code># models.py\n\nfrom django.utils.text import slugify\n\nclass Test(models.Model):\n    q = models.CharField(max_length=30)\n    s = models.SlugField()\n\n    def save(self, *args, **kwargs):\n        if not self.id:\n            # Newly created object, so set slug\n            self.s = slugify(self.q)\n\n        super(Test, self).save(*args, **kwargs)\n</code></pre>"},{"location":"python/django/django-snippets/#send-email","title":"Send email","text":"<p>If <code>html_message</code> keyword argument is provided, the resulting email will be a multipart/alternative email with <code>message</code> as the text/plain content type and <code>html_message</code> as the text/html content type. </p> <pre><code># views.py\n\nfrom django.core.mail import send_mail\n\nsend_mail(\n    'Subject here',\n    'Here is the message.',\n    'from@example.com',\n    ['to@example.com'],\n    fail_silently=False,\n)\n</code></pre> <p>Mail is sent using the SMTP host and port specified in the <code>EMAIL_HOST</code> and <code>EMAIL_PORT</code> settings. The <code>EMAIL_HOST_USER</code> and <code>EMAIL_HOST_PASSWORD</code> settings, if set, are used to authenticate to the SMTP server, and the <code>EMAIL_USE_TLS</code> and <code>EMAIL_USE_SSL</code> settings control whether a secure connection is used. More info here.</p>"},{"location":"python/django/django-snippets/#database-dump-to-file","title":"Database dump to file","text":"<p>Save from DB <pre><code>$ python manage.py dumpdata &gt; db_dump.json\n</code></pre></p> <p>Load fixture to DB <pre><code>$ python manage.py loaddata &lt;fixture&gt;\n</code></pre></p>"},{"location":"python/django/django-snippets/#provide-data-to-db-via-django-python-shell","title":"Provide data to DB via Django Python Shell","text":"<p>Exemple for loading data in a json file named <code>filename.json</code> to the Model <code>Member</code> in the app <code>website</code></p> <pre><code>$ python manage.py shell\n</code></pre> <pre><code>&gt;&gt;&gt; import json\n&gt;&gt;&gt; from website.models import Member\n&gt;&gt;&gt; with open('filename.json', encoding=\"utf-8\") as f:\n...     members_json = json.load(f)\n...\n&gt;&gt;&gt; for member in members_json:\n...     member = Member(name=member['name'], position=member['position'], alumni=member['alumni'])\n...     member.save()\n...\n&gt;&gt;&gt; exit()\n</code></pre>"},{"location":"python/django/django-snippets/#create-script-with-access-to-django-shell","title":"Create script with access to Django shell","text":"<p>If you want to run an external script but have access to the Django environment like you do with <code>python manage.py shell</code> you can do the following. More info here</p> <pre><code># your_script.py\n\nimport os\n\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"your_project_name.settings\")\n\n# your imports, e.g. Django models\nfrom your_project_name.models import Location\n\n# From now onwards start your script..\n</code></pre> <p>Here is an example to access and modify your model: <pre><code># models.py\n\nclass Location(models.Model):\n    name = models.CharField(max_length=100)\n</code></pre></p> <pre><code># your_script.py\n\nif __name__ == '__main__':    \n    # e.g. add a new location\n    l = Location()\n    l.name = 'Berlin'\n    l.save()\n\n    # this is an example to access your model\n    locations = Location.objects.all()\n    print locations\n\n    # e.g. delete the location\n    berlin = Location.objects.filter(name='Berlin')\n    print berlin\n    berlin.delete()\n</code></pre> <p>Alternatively</p> <p>Create your script and run it from within the python shell:</p> <pre><code>$ python manage.py shell\n\n&gt;&gt;&gt; exec(open(\"filename.py\").read())\n</code></pre> <p>This will read and run the contents of the file. Works on Python 3.</p>"},{"location":"python/django/django-snippets/#migrate-django-from-sqlite-to-postgresql","title":"Migrate Django from SQLite to PostgreSQL","text":"<p>Here's how to migrate a Django database from SQLite to PostgreSQL. More info here.</p> <p>1) Dump existing data: <pre><code>python manage.py dumpdata &gt; datadump.json\n</code></pre></p> <p>2) Change settings.py to Postgres backend.</p> <p>3) Make sure you can connect on PostgreSQL. Then: <pre><code>python manage.py migrate --run-syncdb\n</code></pre></p> <p>4) Run this on Django shell to exclude contentype data <pre><code>python manage.py shell\n</code></pre> <pre><code>&gt;&gt;&gt; from django.contrib.contenttypes.models import ContentType\n&gt;&gt;&gt; ContentType.objects.all().delete()\n&gt;&gt;&gt; quit()\n</code></pre></p> <p>5) Finally: <pre><code>python manage.py loaddata datadump.json\n</code></pre></p>"},{"location":"python/django/django-snippets/#using-django-messages-with-bootstrap","title":"Using Django Messages with Bootstrap","text":"<p>Configure the Django Messages Framework to work with Bootstrap by changing the <code>MESSAGE_TAGS</code>. In the <code>settings.py</code> file: <pre><code>from django.contrib.messages import constants as messages\n\nMESSAGE_TAGS = {\n    messages.DEBUG: 'info',\n    messages.INFO: 'info',\n    messages.SUCCESS: 'success',\n    messages.WARNING: 'warning',\n    messages.ERROR: 'danger',\n}\n</code></pre></p> <p>In your HTML base template insert the section where messages will display: <pre><code>{% if messages %}\n  {% for message in messages %}\n    &lt;div class=\"alert alert-{{ message.tags }} alert-dismissible\" role=\"alert\"&gt;\n      &lt;button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-label=\"Close\"&gt;\n        &lt;span aria-hidden=\"true\"&gt;&amp;times;&lt;/span&gt;\n      &lt;/button&gt;\n      {{ message }}\n    &lt;/div&gt;\n  {% endfor %}\n{% endif %}\n</code></pre></p> <p>To use messages do the following in <code>views.py</code>: <pre><code>from django.contrib import messages\n\nmessages.debug(request, '%s SQL statements were executed.' % count)\nmessages.info(request, 'Three credits remain in your account.')\nmessages.success(request, 'Profile details updated.')\nmessages.warning(request, 'Your account expires in three days.')\nmessages.error(request, 'Document deleted.')\n</code></pre></p>"},{"location":"python/django/django-snippets/#override-form-__init__-method","title":"Override form <code>__init__</code> method","text":"<p>You can change how a form is created base on logic from a view by modifying the form <code>__init__</code> method.</p> <pre><code># forms.py\n\nclass TransactionForm(forms.ModelForm):\n\n    class Meta:\n        model = Transaction\n        fields = ('category', 'name', 'value', 'split')\n\n    # Override init method so that the split field only shows in forms of account with more than one user\n    def __init__(self, *args, **kwargs):\n        multiple_users = kwargs.pop('multiple_users', True)\n        super(TransactionForm, self).__init__(*args, **kwargs)\n        if not multiple_users:\n            del self.fields['split']\n</code></pre> <p>In the <code>views.py</code> file you pass the <code>multiple_users</code> variable to the form class</p> <pre><code># views.py\n\ndef transaction_new(request, account_id):\n    if request.method == \"POST\":\n        form = TransactionForm(request.POST, multiple_users=multiple_users)\n        if form.is_valid():\n            transaction.save()\n            return redirect('transaction_new', account_id=account_id)\n        else:\n            form = TransactionForm(multiple_users=multiple_users)\n    context = {...}\n    return render(request, 'expense_tracker/new_transaction.html', context)\n</code></pre>"},{"location":"python/django/django-snippets/#switch-to-a-new-database","title":"Switch to a new Database","text":""},{"location":"python/django/django-snippets/#1-add-the-new-database-to-settingspy","title":"1) Add the new Database to <code>settings.py</code>","text":"<p>Edit your <code>settings.py</code> and add the new database to the DATABASES list and give it the name \"new\". For example, I am using the MySQL database, so I will add the \"new\" dictionary:</p> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    },\n    'new': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'tFnXEEpcjQ',\n        'USER': 'tFnXEEpcjQ',\n        'PASSWORD': 'UW9BWCT8m2',\n        'HOST': 'remotemysql.com',\n        'PORT': '3306',\n    }\n}\n</code></pre> <p>I have used the MySQL database in this example. You will add the code for the database that you are using. Note: You need to install the client for whatever database you are using on your machine.</p>"},{"location":"python/django/django-snippets/#2-create-tables-in-the-new-database","title":"2) Create tables in the new Database","text":"<p>Make sure that you have not deleted the migrations folder. If you have deleted it by accident, make migrations again.</p> <p>To create tables in your new database, run the migrations on it using the following command:</p> <pre><code>python manage.py migrate --database=new\n</code></pre>"},{"location":"python/django/django-snippets/#3-transfer-data-to-the-new-database-optional","title":"3) Transfer data to the new Database (optional)","text":"<p>You can skip this step if you do not want to transfer the data from your old database to the new one. </p> <p>First, clear the new database by running the following command:</p> <pre><code>python manage.py flush --database=new\n</code></pre> <p>Export data from your current database to a JSON file using the following command:</p> <pre><code>python manage.py dumpdata&gt;data.json\n</code></pre> <p>Now load data into the new database using the following command:</p> <pre><code>python manage.py loaddata data.json --database=new\n</code></pre>"},{"location":"python/django/django-snippets/#4-remove-the-old-database","title":"4) Remove the old Database","text":"<p>Now remove the old database from <code>settings.py</code> and rename the \"new\" database to \"default\". My final <code>DATABASES</code> look like this:</p> <pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'tFnXEEpcjQ',\n        'USER': 'tFnXEEpcjQ',\n        'PASSWORD': 'UW9BWCT8m2',\n        'HOST': 'remotemysql.com',\n        'PORT': '3306',\n    }\n}\n</code></pre>"},{"location":"python/django/django-uv-workflow/","title":"Django and UV workflow","text":"<p>Create a project folder</p> <pre><code>mkdir django-uv-test\n</code></pre> <p>Update uv:</p> <pre><code>uv self update\n</code></pre> <p>Start uv project:</p> <pre><code>uv init django-project --python 3.11\n</code></pre> <p>Add packages:</p> <pre><code>cd django-project\nuv add Django django-extensions\n</code></pre> <p>Start Django project:</p> <pre><code>uv run django-admin startproject myproject .\n</code></pre> <p>Run Django management commands:</p> <pre><code>uv run manage.py runserver\nuv run manage.py startapp appname\nuv run manage.py makemigrations\nuv run manage.py migrate\nuv run manage.py shell_plus  # from django-extensions\n</code></pre> <p>Working with development dependencies:</p> <pre><code>uv add --dev black\nuv run black path\\to\\file.py\n</code></pre> <p>Deploying the project to production excluding dev dependencies:</p> <pre><code>uv sync --no-dev\n</code></pre> <p>References</p> <ul> <li>https://www.youtube.com/watch?v=hm-rDxSMzSw</li> </ul>"},{"location":"python/django/django/","title":"Building a Django site","text":""},{"location":"python/django/django/#installing-django","title":"Installing Django","text":"<p><code>pip install Django</code></p>"},{"location":"python/django/django/#start-project","title":"Start project","text":"<p>Navigate via the terminal or command prompt to an area where you want to work on your project, then do:</p> <p><code>django-admin startproject mysite</code></p> <p>This will create a directory called mysite. Within that directory, you have another one called mysite, along with a manage.py file. The manage.py file lets you easily interact with your project via the command line. The contents of the second mysite directory contain your settings and urls mainly. Broken down:</p> <pre><code>/mysite/  REM Simple container, Call whatever you want.\n    manage.py  REM Lets you interact with your project via the command line.\n    /mysite/  REM Actual project directory.\n        __init__.py  REM Tells python this is a Python package.\n        settings.py  REM Settings for the project.\n        urls.py  REM URL rules. Django docs aptly describes as your table of contents.\n        wsgi.py  REM WSGI magic begins here. Worry about this when it comes time to actually deploy to a server.\n</code></pre> <p>The paradigm of Django is that either a website is an app, or a collection of apps in most cases. We currently have our website, called \"mysite\" for now. For now, run the following via the command line or terminal to run the local development server, which you can reach at http://127.0.0.1:8000. </p> <pre><code>cd mysite\npython manage.py runserver\n</code></pre>"},{"location":"python/django/django/#create-an-app","title":"Create an app","text":"<p><code>python manage.py startapp webapp</code></p> <p>Now a new directory exists, called webapp. In here, we see a lot of similar files, and some new ones:</p> <pre><code>webapp/\n    migrations/ \n    __init__.py\n    admin.py\n    apps.py\n    models.py\n    tests.py\n    views.py\n</code></pre> <p>Next, we need to include our new app in our installed applications:</p> <p>Open the <code>mysite/settings.py</code> file and add the <code>'webapp.apps.WebappConfig'</code> line:</p> <pre><code># ...this is just a slice of code within settings.py \n# do not delete the other code\n# just add 'webapp' to the list.\nINSTALLED_APPS = [\n    'webapp.apps.WebappConfig',  # &lt;app_name&gt;.apps.&lt;AppName&gt;Config\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n]\n</code></pre>"},{"location":"python/django/django/#make-migrations-databases","title":"Make migrations (databases)","text":"<p>Whenever you define new models, you need to migrate: </p> <p><code>python manage.py makemigrations</code></p> <p>The <code>makemigrations</code> command tells Django that you've made some model changes, and you want to save them as a migration. Migrations are used any time you want Django to recognize changes to the models and database schema. Adding data to an existing database table, for example, is not something that needs a migration, changing that table's structure (by changing the model), would require a migration. You can also tell Django you want to make migrations for only a specific app, like: <code>python manage.py makemigrations webapp</code></p> <p>Once you've made migrations, nothing has actually happened yet. You can run a migrate, but there is one more check you can make. This will output the proposed SQL that will be run for you by Django when you migrate. The <code>0001</code> is the migration ID. You can see this on the <code>0001_initial.py</code> file in the migrations folder of your app.</p> <p><code>python manage.py sqlmigrate webapp 0001</code> (Optional)</p> <p>If all looks good, you can run the <code>migrate</code> command. This will actually perform the migrations. If this is your first time doing this, you should see quite a bit has been migrated.</p> <p><code>python manage.py migrate</code></p>"},{"location":"python/django/django/#admin-control-panel","title":"Admin control panel","text":"<p>To access the admin page, you visit /admin/, assuming the admin app is indeed installed. To login to the admin panel you need to create an user:</p> <p><code>python manage.py createsuperuser</code></p> <p>To register a model create a webapp/admin.py file, and in it put:</p> <pre><code>from django.contrib import admin\nfrom webapp.models import Post\n\nadmin.site.register(Post)\n</code></pre> <p>Here, we are importing the admin, the Post model, and then we're registering the Post model.</p>"},{"location":"python/django/django/#using-mysql-database","title":"Using MySQL database","text":"<p>By default Django works with SQLite database management system. First, create the MySQL database using the MySQL shell: </p> <p><code>CREATE DATABASE django_db;</code></p> <p>To use MySQL in Django, instead of SQLite, do the following:</p> <p><code>pip install mysqlclient</code></p> <p>Go to the main <code>settings.py</code> file and modify the DATABASES section to:</p> <p><pre><code>DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'django_db',\n        'USER': 'root',\n        'PASSWORD': '123456',\n        'HOST': 'localhost',\n        'PORT': ''\n    }\n}\n</code></pre> Now you can run the migrate command to create all tables Django needs: <code>python manage.py migrate</code></p>"},{"location":"python/django/django/#django-authentication-system","title":"Django authentication system","text":"<p>Base project struture for this section:</p> <pre><code>mysite/\n  manage.py\n\n  mysite/\n    __init__.py\n    settings.py\n    urls.py\n    wsgi.py\n\n  app1/\n    __init__.py\n    admin.py\n    apps.py\n    migrations/\n    models.py\n    tests.py\n    views.py\n</code></pre> <pre><code># mysite/urls.py\n</code></pre> <pre><code># mysite/urls.py\n\nurlpatterns = [\n  ...\n  path('accounts/', include(django.contrib.auth.urls))\n]\n</code></pre>"},{"location":"python/django/django/#performing-ajax-post-requests-in-django","title":"Performing AJAX POST Requests in Django","text":"<p>Ref: http://coreymaynard.com/blog/performing-ajax-post-requests-in-django/</p> <p>A common pitfall that shows up when developing a Django application is when you try and make your first POST request to your server from AJAX. As a response you receive a helpful 403 FORBIDDEN notice, and not much other information. There's a fairly simple way of handling this issue in a seamless fashion,.</p> <p>Firstly, let's discuss the actual problem that is causing this. Django comes with a security feature called Cross Site Request Forgery protection. A CSRF attack is when some external malicious site contains a link with some JavaScript that is intended to perform an action on your web site using the credentials of a logged-in-user who visited the malicious site in their browser. To protect against this, Django adds a CSRF token to every request that must be included with every unsafe HTTP request method (POST, PUT, and DELETE). This random string is verified upon every request, and if it is not valid (or not present) the server will respond with 403 FORBIDDEN.</p> <p>So, assuming you already have a Django project all setup and ready to go, we're going to create a view and a template to show the POST request in action. Just to keep things simple, we're going to do this in a separate app, so go ahead and create a new app and add it to your INSTALLED_APPS list. Inside of that app let's modify the views file and make it look like this:</p> <pre><code>from django.views.generic import TemplateView\nfrom django.http import HttpResponse\n\nimport json\n\nclass PostExample(TemplateView):\n    template_name = 'start.html'\n\n    def post(self, request):\n        return HttpResponse(json.dumps({'key': 'value'}), mimetype=\"application/json\")\n</code></pre> <p>What we're doing here is creating an incredibly basic view that on a GET request will respond with the <code>start.html</code> template and on a post request will respond with a hard coded JSON dictionary. Now we need to add the URL for this view to the project:</p> <pre><code>url(r'^$', PostExample.as_view(), name='test-start'),\n</code></pre> <p>The template we're going to develop here will be equally simple, let's start with the following:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"{{ STATIC_URL }}js/jquery-1.11.1.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n    $(\"#post\").click(function(e) {\n        e.preventDefault();\n        var data = {\n            'foo': 'bar'\n        }\n\n        $.ajax({\n            \"type\": \"POST\",\n            \"dataType\": \"json\",\n            \"url\": \"/test/\",\n            \"data\": data,\n            \"success\": function(result) {\n                console.log(result);\n            },\n        });\n    });\n});\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;PostExample&lt;/h1&gt;\n    &lt;p&gt;&lt;a href=\"\" id=\"post\"&gt;Post Request&lt;/a&gt;&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>If you were to go to that page and click the link, you instead of a lovely JSON response you would see the 403 FORBIDDEN notice. Let's take care of that. The way to solve this is by overriding the jQuery beforeSend method on an AJAX query and grabbing the CSRF token embedded in the request and including it in the POST headers. Create a new JavaScript file and add the following to it, and make sure to include it into your template:</p> <pre><code>function getCookie(name) {\n    var cookieValue = null;\n    if (document.cookie &amp;&amp; document.cookie != '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i &lt; cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                break;\n            }\n        }\n    }\n    return cookieValue;\n}\n\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        if (!(/^http:.*/.test(settings.url) || /^https:.*/.test(settings.url))) {\n            // Only send the token to relative URLs i.e. locally.\n            xhr.setRequestHeader(\"X-CSRFToken\", getCookie('csrftoken'));\n        }\n    }\n});\n</code></pre> <p>With that being done, all you have to do is add the CSRF token into the template like this:</p> <pre><code>{% csrf_token %}\n</code></pre> <p>That takes care of it! You can now make AJAX POST requests from within your application, without doing any specific work on a per instance basis.</p>"},{"location":"python/machine-learning/ml-pipeline/","title":"Pipelines","text":"<p>A pipeline chains together multiple steps, meaning the output of each step is used as input to the next step.</p>"},{"location":"python/machine-learning/ml-pipeline/#creating-a-pipeline","title":"Creating a pipeline","text":"<p>Load data: <pre><code>import pandas as pd\nimport numpy as np\n\ntrain = pd.DataFrame({'feat1':[10, 20, np.nan, 2], 'feat2':[25., 20, 5, 3], 'label':['A', 'A', 'B', 'B']})\ntest = pd.DataFrame({'feat1':[30., 5, 15], 'feat2':[12, 10, np.nan]})\n</code></pre></p> <p>Defining steps: <pre><code>from sklearn.impute import SimpleImputer\nfrom sklearn.linear_model import LogisticRegression\n\nimputer = SimpleImputer()\nclf = LogisticRegression()\n</code></pre></p> <p>Create a 2-step pipeline. Impute missing values, then pass the results to the classifier: <pre><code>from sklearn.pipeline import make_pipeline\n\npipe = make_pipeline(imputer, clf)\n</code></pre></p> <p>Using the pipeline: <pre><code>features = ['feat1', 'feat2']\nX, y = train[features], train['label']\nX_new = test[features]\n\n# pipeline applies the imputer to X before fitting the classifier\npipe.fit(X, y)\n\n# pipeline applies the imputer to X_new before making predictions\n# note: pipeline uses imputation values learned during the \"fit\" step\npipe.predict(X_new)\n</code></pre></p>"},{"location":"python/machine-learning/ml-pipeline/#make_pipeline-vs-pipeline","title":"<code>make_pipeline</code> vs <code>Pipeline</code>","text":"<p><code>Pipeline</code> requires naming of steps while <code>make_pipeline</code> does not.</p> <p>With <code>make_pipeline</code>: <pre><code>from sklearn.pipeline import make_pipeline\n\npipe = make_pipeline(imputer, clf)\n</code></pre></p> <p>With <code>Pipeline</code>: <pre><code>from sklearn.pipeline import Pipeline\n\npipe = Pipeline([('preprocessor', imputer), ('classifier', clf)])\n</code></pre></p>"},{"location":"python/machine-learning/ml-pipeline/#examine-the-intermediate-steps-in-a-pipeline","title":"Examine the intermediate steps in a Pipeline","text":"<p>Use the <code>named_steps</code> attribute as <code>pipe.named_steps.STEP_NAME.ATTRIBUTE</code>:</p> <pre><code>pipe.named_steps.imputer.statistics_ \n# or\npipe.named_steps.preprocessor.statistics_ \n</code></pre> <p>If using <code>make_pipeline</code> the name of the step is the name of the variable (here <code>imputer</code>). When using <code>Pipeline</code> the name is the assigned name when creating the pipeline (here <code>preprocessor</code>).</p>"},{"location":"python/machine-learning/ml-pipeline/#cross-validate-and-grid-search-an-entire-pipeline","title":"Cross-validate and grid search an entire pipeline","text":"<p>Cross-validate the entire pipeline (not just the model): <pre><code>from sklearn.model_selection import cross_val_score\n\ncross_val_score(pipe, X, y, cv=5, scoring='accuracy').mean()\n</code></pre></p> <p>Find optimal tuning parameters for the entire pipeline: <pre><code># specify parameter values to search\nparams = {}\nparams['columntransformer__countvectorizer__min_df'] = [1, 2]\nparams['logisticregression__C'] = [0.1, 1, 10]\nparams['logisticregression__penalty'] = ['l1', 'l2']\n\n# try all possible combinations of those parameter values\nfrom sklearn.model_selection import GridSearchCV\ngrid = GridSearchCV(pipe, params, cv=5, scoring='accuracy')\ngrid.fit(X, y);\n</code></pre></p> <p>Best score found during the search: <pre><code>grid.best_score_\n</code></pre></p> <p>Combination of parameters that produced the best score: <pre><code>grid.best_params_\n</code></pre></p>"},{"location":"python/machine-learning/ml-pipeline/#pipeline-diagram","title":"Pipeline diagram","text":"<p>Create interactive diagrams of Pipelines (and other estimators): <pre><code>from sklearn import set_config\nset_config(display='diagram')\n\npipe = make_pipeline(ct, selection, logreg)\npipe\n</code></pre></p> <p>Export the diagram to an HTML file: <pre><code>from sklearn.utils import estimator_html_repr\n\nwith open('pipeline.html', 'w') as f:  \n    f.write(estimator_html_repr(pipe))\n</code></pre></p>"},{"location":"python/machine-learning/ml-pipeline/#operate-on-part-of-a-pipeline","title":"Operate on part of a Pipeline","text":"<p>Slice the Pipeline using Python's slicing notation:</p> <pre><code># access step 0 (preprocessor)\npipe[0].fit_transform(X)\n\n# access steps 0 and 1 (preprocessor and feature selector)\npipe[0:2].fit_transform(X, y)\n\n# access step 1 (feature selector)\npipe[1].get_support()\n</code></pre>"},{"location":"python/machine-learning/ml-pipeline/#references","title":"References","text":"<ul> <li>scikit-learn tips</li> </ul>"},{"location":"python/machine-learning/ml-save-model/","title":"Saving Scikit-learn model for reuse","text":"<p>Saving the model with Pickle or Joblib allows you to recover the full Scikit-learn estimator object however some compatibility issues may occur if using different versions of sklearn. Other methods of saving models can deploy the model for prediction, usually by using tools supporting open model interchange formats but do not allow the recovery of the full Scikit-learn estimator object.</p>"},{"location":"python/machine-learning/ml-save-model/#index","title":"Index","text":"<ul> <li>Using Joblib</li> <li>Using Pickle</li> <li>Saving a complete ML pipeline</li> </ul>"},{"location":"python/machine-learning/ml-save-model/#using-joblib","title":"Using Joblib","text":"<p>Joblib is part of the SciPy ecosystem and provides utilities for pipelining Python jobs. It provides utilities for saving and loading Python objects that make use of NumPy data structures, efficiently. This can be useful for some machine learning algorithms that require a lot of parameters or store the entire dataset (like k-Nearest Neighbors).</p> <pre><code>from sklearn import svm\nfrom sklearn import datasets\nclf = svm.SVC()\nX, y= datasets.load_iris(return_X_y=True)\nclf.fit(X, y)\nSVC()\n</code></pre> <p>Saving and reusing the model:  <pre><code># Save\nfrom joblib import dump\ndump(clf, 'filename.joblib') \n\n# Load\nfrom joblib import load\nclf = load('filename.joblib') \n</code></pre></p>"},{"location":"python/machine-learning/ml-save-model/#using-pickle","title":"Using Pickle","text":"<p>Pickle is the standard way of serializing objects in Python. You can use the pickle operation to serialize your machine learning algorithms and save the serialized format to a file. Later you can load this file to deserialize your model and use it to make new predictions.</p> <p>Train the model:</p> <pre><code>from sklearn import svm\nfrom sklearn import datasets\n\nclf = svm.SVC(gamma='scale')\niris = datasets.load_iris()\nX, y = iris.data, iris.target\nclf.fit(X, y)  \n</code></pre> <p>Saving and reusing the model: </p> <pre><code>import pickle\n\n# Save to file\npickle.dump(clf, open('model.sav', 'wb'))\n\n# Load from file\nclf2 = pickle.load(open('model.sav', 'rb'))\n\n# Reuse\nclf2.predict(X[0:1])\n\ny[0]\n</code></pre>"},{"location":"python/machine-learning/ml-save-model/#saving-a-complete-ml-pipeline","title":"Saving a complete ML pipeline","text":"<p>Often it is useful, not only saving the ML model, but also other required component lique the scaler used. In the following you can use <code>joblib</code> or <code>pickle</code>. The point is to create a pipeline so that you don't have to separately call the scaler.</p> <p>Create the pipeline: <pre><code>from sklearn.pipeline import make_pipeline\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.externals import joblib\n\npipeline = make_pipeline(MinMaxScaler(),YOUR_ML_MODEL() )\n\nmodel = pipeline.fit(X_train, y_train)\n</code></pre></p> <p>Save: <pre><code>joblib.dump(model, 'filename.mod') \n</code></pre></p> <p>Load: <pre><code>model = joblib.load('filename.mod')\n</code></pre></p>"},{"location":"python/machine-learning/ml-save-model/#references","title":"References:","text":"<ul> <li>Scikit-learn docs</li> <li>Machine Learning \u2014 How to Save and Load scikit-learn Models</li> <li>Save and Load Machine Learning Models in Python with scikit-learn</li> </ul>"},{"location":"python/machine-learning/ml-sklearn/","title":"Machine Learning with <code>scikit-learn</code>","text":"<p>This document compiles some code snippets that cover the process of training a Machine Learning model using the <code>scikit-learn</code> Python library.</p> <p>Required Python libraries: - pandas - numpy - scikit-learn - matplotlib</p> <p>Useful resources: - scikit-learn documentation - A. Geron (2021) Hands-On Machine Learning with Scikit-Learn, Keras &amp; Tensorflow, O'Reilly, 2nd Ed. - JPS Aniceto et al. (2021) Machine learning models for the prediction of diffusivities in supercritical CO2 systems, Journal of Molecular Liquids. - JPS Aniceto et al. (2021) Predictive Models for the Binary Diffusion Coefficient at Infinite Dilution in Polar and Nonpolar Fluids, Materials.</p> <p>Other: - Intel Extension for Scikit-learn - software acceleration of Scikit-learn applications achieved through the use of vector instructions, IA hardware-specific memory optimizations, threading, and optimizations for all upcoming Intel platforms at launch time.</p> <p>Nomenclature: - <code>x_train</code> - training set variables/descriptors/features values. Size is [number of data points] x [number of features]. - <code>y_train</code> - training set targets. Size is [number of data points] x [number of targets]. Usually the number of targets is 1. - <code>x_test</code> - test set variables/descriptors/features values. Size is [number of data points] x [number of features]. - <code>y_test</code> - test set targets. Size is [number of data points] x [number of targets]. Usually the number of targets is 1.</p>"},{"location":"python/machine-learning/ml-sklearn/#loading-and-saving-data","title":"Loading and saving data","text":""},{"location":"python/machine-learning/ml-sklearn/#loading-data-from-csv-with-pandas","title":"Loading data from CSV with pandas:","text":"<pre><code>import pandas as pd\n\ndf = pd.read_csv('path/to/csvfile.csv')\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#save-pandasdataframe-to-csv","title":"Save pandas.Dataframe to CSV:","text":"<pre><code>df.to_csv('path/to/csvfile.csv', index=False)\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#data-preparation","title":"Data preparation","text":""},{"location":"python/machine-learning/ml-sklearn/#removing-unwanted-columns","title":"Removing unwanted columns:","text":"<pre><code>df.drop(columns=['x3', 'x4'], inplace=True)\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#removing-rows-with-missing-data","title":"Removing rows with missing data:","text":"<pre><code>df.dropna(inplace=True)\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#separate-the-variablesdescriptorsfeatures-x1-x2-x3-and-targets-y","title":"Separate the variables/descriptors/features (x1, x2, x3,...) and targets (y):","text":"<pre><code>variables = df.drop(columns=['y'])  # select the target from the original dataframe\ntarget = pd.DataFrame(df['y'])  # select the target from the original dataframe\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#replace-the-inf-and-inf-with-nan-may-be-required-for-later-imputation","title":"Replace the inf and -inf with nan (may be required for later imputation):","text":"<pre><code>import numpy as np\n\nvariables = variables.replace({np.inf: np.nan, -np.inf: np.nan})\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#split-data-into-training-and-testing-sets","title":"Split data into training and testing sets:","text":"<pre><code>from sklearn.model_selection import train_test_split\n\nx_train, x_test, y_train, y_test = train_test_split(variables, target, test_size=0.3, random_state=42)\n</code></pre> <ul> <li><code>test_size</code> - fraction of data to be reserved for testing (between 0 and 1)</li> <li><code>random_state</code> - selects the random seed. Setting a random state guarantees the same result every time the command is run. Otherwise, since a random split is performed each time the command <code>train_test_split</code> runs.</li> </ul>"},{"location":"python/machine-learning/ml-sklearn/#scale-data","title":"Scale data","text":"<p>Most ML algorithms require that their input data is scaled into the same range/dimensions. There are several scaler available in <code>sklearn</code>, below and example is shown using <code>MinMaxScaler</code>. The <code>MinMaxScaler</code> transform the variables by scaling each variables to a given range, usually between 0 and 1.  </p> <pre><code>from sklearn.preprocessing import MinMaxScaler\n\n# Create the scaler object with a range of 0-1\nscaler = MinMaxScaler(feature_range=(0, 1))\n\n# Fit on the training data\nscaler.fit(x_train)\n\n# Transform both the training and testing data\nx_train = scaler.transform(x_train)\nx_test = scaler.transform(x_test)\n\n# Convert y to one-dimensional array (vector)\ny_train = np.array(y_train).reshape((-1, ))\ny_test = np.array(y_test).reshape((-1, ))\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#train-a-model","title":"Train a model","text":""},{"location":"python/machine-learning/ml-sklearn/#1-train-using-default-options","title":"1) Train using default options","text":"<p>An example using the Gradient Boosting regression.</p> <pre><code>from sklearn.ensemble import GradientBoostingRegressor\n\n# Create the model instance\nmodel = GradientBoostingRegressor(random_state=42)\n\n# Fit model to training data\nmodel.fit(x_train, y_train)\n\n# Use the fitted model to predict the target on the test data\ny_test_pred = model.predict(x_test)\n\n# Evaluate the model using the coefficient of determination of the prediction (R^2)\nR2 = model.score(x_test, y_test\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#2-train-the-model-with-hyperparameter-tuning","title":"2) Train the model with hyperparameter tuning","text":"<p>Most ML models have a series of intrinsic parameters that are not fitted to the data but must instead be defined beforehand (before training can commence). These are called hyperparameters. Hyperparameter tuning is the process of choosing the optimal hyperparamters for the working problem.</p> <p>We start by defining the values of the hyperparamters that we wish to try. Here we will test the following hyperparamters of the Gradient Boosting regression model.</p> <pre><code># Loss function to be optimized\nloss = ['ls', 'lad', 'huber']\n\n# Number of trees used in the boosting process\nn_estimators = [100, 500, 900, 1100, 1500]\n\n# Maximum depth of each tree\nmax_depth = [2, 3, 5, 10, 15]\n\n# Minimum number of samples per leaf\nmin_samples_leaf = [1, 2, 4, 6, 8]\n\n# Minimum number of samples to split a node\nmin_samples_split = [2, 4, 6, 10]\n\n# Maximum number of features to consider for making splits\nmax_features = ['auto', 'sqrt', 'log2', None]\n\n# Define the grid of hyperparameters to search\nhyperparameter_grid = {'loss': loss,\n                       'n_estimators': n_estimators,\n                       'max_depth': max_depth,\n                       'min_samples_leaf': min_samples_leaf,\n                       'min_samples_split': min_samples_split,\n                       'max_features': max_features}\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#hyperparameter-tuning-with-random-search-cross-validation","title":"Hyperparameter tuning with Random Search Cross Validation","text":"<p>A Random Search Cross Validation (RandomizedSearchCV) performs a randomized search on hyperparameters. In contrast to GridSearchCV, not all combinations of parameter values are tried out, but rather a fixed number of parameter settings is sampled. The number of parameter settings that are tried is given by <code>n_iter</code>.</p> <pre><code>from sklearn.model_selection import RandomizedSearchCV\n\n# Create the model to use for hyperparameter tuning\nmodel = GradientBoostingRegressor(random_state=42)\n\n# Set up the random search with 4-fold cross validation\nrandom_cv = RandomizedSearchCV(estimator=model,\n                               param_distributions=hyperparameter_grid,\n                               cv=4, \n                               n_iter=200, \n                               scoring='neg_mean_absolute_error',\n                               n_jobs=-1, \n                               verbose = 1, \n                               return_train_score=True,\n                               random_state=42)\n\n# Fit on the training data\nrandom_cv.fit(x_train, y_train)\n\n# Print best hyperparameters found with Random Search\nprint(\"Best Hyperparameters:\\n\\n\", random_cv.best_params_)\n\n# Select the best model\nbest_random_cv_model = random_cv.best_estimator_\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#hyperparameter-tuning-with-grid-search-cross-validation","title":"Hyperparameter tuning with Grid Search Cross Validation","text":"<p>A Grid Search Cross Validation (GridSearchCV) performs an exhaustive search over specified parameter values for an estimator.</p> <pre><code>from sklearn.model_selection import GridSearchCV\n\n# Create the model to use for hyperparameter tuning\nmodel = GradientBoostingRegressor(random_state=42)\n\n# Set up the grid search with 4-fold cross validation\ngrid_cv = GridSearchCV(estimator=model,\n                       param_grid=hyperparameter_grid,\n                       cv=4, \n                       scoring='neg_mean_absolute_error',\n                       n_jobs=-1, \n                       verbose=1, \n                       return_train_score=True,\n                       random_state=42)\n\n# Fit on the training data\ngrid_cv.fit(x_train, y_train)\n\n# Print best hyperparameters found with Grid Search\nprint(\"Best Hyperparameters:\\n\\n\", grid_cv.best_params_)\n\n# Select the best model\nbest_grid_cv_model = grid_cv.best_estimator_\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#make-predictions","title":"Make predictions","text":"<p>We will select the best model obtained from the Grid Search.</p> <pre><code># Select the best model from grid search\nbest_model = grid_cv.best_estimator_\n\n# Get best model prediction of testing set\nbest_model_y_test = best_model.predict(x_test)\n</code></pre>"},{"location":"python/machine-learning/ml-sklearn/#plot-experimental-vs-calculated","title":"Plot Experimental vs Calculated","text":"<p>Create a plot of experimental vs calculated values (also called true vs predicted). Points falling on the diagonal represent cases where the prediction is accurate.</p> <pre><code>import matplotlib.pyplot as plt\n\n# Determine the upper range of the plot regarding the target\nmax_val = np.max([np.max(y_test), np.max(best_model_y_test)])\n\n# Plot diagonal line\nplt.plot([0, max_val], [0, max_val], '-')\n\n# Plot results\nplt.plot(y_test, best_model_y_test, 'o');\n\n# Plot formatting\nplt.ylim(0, max_val)\nplt.ylabel('Calculated value')\nplt.xlim(0, max_val)\nplt.xlabel('Experimental value')\nplt.ticklabel_format(style='sci', scilimits=(0,0))\n</code></pre>"},{"location":"python/machine-learning/ml-workflows/","title":"Simple Machine Learning workflow","text":"<p>This can be adapted to solve many ML problems. It has plenty of shortcomings, but can work surprisingly well as-is. Main shortcomings include: - Assumes all columns have proper data types - May include irrelevant or improper features - Does not handle text or date columns well - Does not include feature engineering - Ordinal encoding may be better - Other imputation strategies may be better - Numeric features may not need scaling - A different model may be better</p>"},{"location":"python/machine-learning/ml-workflows/#load-data","title":"Load data","text":"<pre><code>import pandas as pd\n\ncols = ['Pclass', 'Name', 'Sex', 'Age', 'SibSp', 'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked']\n\n# Train data\ndf = pd.read_csv('http://bit.ly/kaggletrain')\nX = df[cols]\ny = df['Survived']\n\n# Test data\ndf_new = pd.read_csv('http://bit.ly/kaggletest', nrows=10)\nX_new = df_new[cols]\n</code></pre>"},{"location":"python/machine-learning/ml-workflows/#ml-imports","title":"ML imports","text":"<pre><code>from sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder\nfrom sklearn.compose import make_column_selector, make_column_transformer\nfrom sklearn.pipeline import make_pipeline\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.model_selection import cross_val_score\n</code></pre>"},{"location":"python/machine-learning/ml-workflows/#preprocessing","title":"Preprocessing","text":"<pre><code># set up preprocessing for numeric columns\nimp_median = SimpleImputer(strategy='median', add_indicator=True)\nscaler = StandardScaler()\n\n# set up preprocessing for categorical columns\nimp_constant = SimpleImputer(strategy='constant')\nohe = OneHotEncoder(handle_unknown='ignore')\n\n# select columns by data type\nnum_cols = make_column_selector(dtype_include='number')\ncat_cols = make_column_selector(dtype_exclude='number')\n\n# do all preprocessing\npreprocessor = make_column_transformer(\n    (make_pipeline(imp_median, scaler), num_cols),\n    (make_pipeline(imp_constant, ohe), cat_cols))\n</code></pre>"},{"location":"python/machine-learning/ml-workflows/#create-pipeline","title":"Create pipeline","text":"<pre><code># create a pipeline\npipe = make_pipeline(preprocessor, LogisticRegression())\n\n# cross-validate the pipeline\ncross_val_score(pipe, X, y).mean()\n</code></pre>"},{"location":"python/machine-learning/ml-workflows/#fitting-and-making-predictions","title":"Fitting and making predictions","text":"<pre><code># fit the pipeline and make predictions\npipe.fit(X, y)\npipe.predict(X_new)\n</code></pre>"},{"location":"python/resources/data-science-libs/","title":"Python Libraries for Data Science and Data Viz","text":""},{"location":"python/resources/data-science-libs/#general-use","title":"General use","text":"<ul> <li>numpy</li> <li>pandas</li> </ul>"},{"location":"python/resources/data-science-libs/#specific","title":"Specific","text":"<ul> <li>scikit-learn - machine learning framework</li> <li>PyTorch - machine learning framework</li> <li>keras - deep learning (e.g., neural networks)</li> <li>TensorFlow - machine learning framework</li> <li>DEAP - evolutionary computation framework (e.g., genetic algorithms)</li> <li>pydantic - data validation and settings management using python type annotations</li> </ul>"},{"location":"python/resources/data-science-libs/#data-visualization","title":"Data visualization","text":""},{"location":"python/resources/data-science-libs/#plotting-libraries","title":"Plotting libraries","text":"<ul> <li>Matplotlib: Python de facto 2D plotting library.</li> <li>seaborn: Based on matplotlib, it provides a high-level interface for drawing attractive and informative statistical graphics.</li> <li>Altair: A declarative statistical visualization library for Python, based on Vega and Vega-Lite</li> </ul>"},{"location":"python/resources/data-science-libs/#web-ready","title":"Web ready","text":"<ul> <li>Bokeh : Creates interactive, web-ready plots, which can be easily output as JSON objects, HTML documents, or interactive web applications.</li> <li>Plotly: Makes interactive plots, but it offers some charts you won't find in most libraries, like contour plots, dendograms, and 3D charts.</li> </ul>"},{"location":"python/resources/data-science-libs/#geo","title":"Geo","text":"<ul> <li>Folium: Folium makes it easy to visualize data that\u2019s been manipulated in Python on an interactive <code>leaflet.js</code> map.</li> <li>Basemap: A matplotlib toolkit library for plotting 2D data on maps in Python.</li> </ul>"},{"location":"python/resources/hosting/","title":"Hosting scripts and services","text":"<p>This list is mainly focused on Python.</p>"},{"location":"python/resources/hosting/#hosting-options","title":"Hosting options:","text":""},{"location":"python/resources/hosting/#free","title":"Free:","text":"<ul> <li>Render - disconects after 15 minutes of inactivity</li> <li>Railway</li> <li>Cyclic - Javascript only</li> <li>Google App Engine (Free Tier)</li> <li>Amazon EC2 (Free Tier)</li> <li>Python Anywhaere (Free Tier)</li> </ul>"},{"location":"python/resources/hosting/#paid","title":"Paid:","text":"<ul> <li>Heroku (7$/month Min)</li> <li>Digital Ocean (5$/month Min, 50$ credit from Github Student Pack)</li> <li>Linode (5$/month Min)</li> </ul>"},{"location":"python/resources/hosting/#useful-software","title":"Useful Software","text":"<ul> <li>PuTTY - for SSH access</li> <li>WinSCP - To transfer files to the server</li> <li>FileZilla - An alternative to WinSCP</li> </ul>"},{"location":"python/resources/hosting/#useful-references","title":"Useful references","text":"<p>Running python scripts on a VPS</p>"},{"location":"python/resources/tutorials/","title":"Tutorials on various Python subjects","text":""},{"location":"python/resources/tutorials/#legend","title":"Legend:","text":"<ul> <li>:blue_book: - Book (usually freely available).</li> <li>:school: - Course material, usually provided by an University.</li> <li>:newspaper: - Written tutorial. May be a blog, article, post or even a PDF document.</li> <li>:tv: - Video tutorials. May be a playlist or a single video.</li> </ul>"},{"location":"python/resources/tutorials/#python-language-workings-general","title":"Python language workings (general)","text":"<ul> <li>:tv: :blue_book: Automate the Boring Stuff with Python by Al Sweigart</li> <li>:tv: Python OOP Tutorials - Working with Classes by Corey Schafer</li> <li>:tv: Python Tutorials by Corey Schafer</li> <li>:newspaper: Full Stack Python</li> </ul>"},{"location":"python/resources/tutorials/#python-libraries","title":"Python Libraries","text":"<ul> <li>:newspaper: The Most Detailed Selenium WebDriver Tutorial With Python by Himanshu Sheth</li> <li>:newspaper: PyQt Layouts: Create Professional-Looking GUI Applications by Real Python</li> </ul>"},{"location":"python/resources/tutorials/#data-analysis","title":"Data analysis","text":"<p>Libraries like <code>Numpy</code>, <code>Pandas</code>, and <code>Matplotlib</code>.</p> <ul> <li>:newspaper: Python NumPy For Your Grandma by Ben Gorman</li> <li>:newspaper: Python Pandas For Your Grandpa by Ben Gorman</li> <li>:tv: Data analysis in Python with pandas by Data School</li> <li>:tv: Matplotlib Tutorial Series - Graphing in Python by sentdex</li> </ul>"},{"location":"python/resources/tutorials/#data-science-and-machine-learning","title":"Data Science and Machine Learning","text":"<p>General Data Science theory as well as working with tools and frameworks like <code>scikit-learn</code>, <code>Keras</code> and <code>TensorFlow</code>.</p> <ul> <li>:tv: Intro to Data Science by Steve Brunton</li> <li>:school: :tv: CS50's Introduction to Artificial Intelligence with Python 2020 by Harvard</li> <li>:tv: Keras - Python Deep Learning Neural Network API by deeplizard</li> <li>:tv: Machine Learning Basics by Vinsloev Academy</li> <li>:tv: Neural Networks Explained from Scratch using Python by Bot Academy</li> </ul>"},{"location":"python/resources/tutorials/#web-frameworks","title":"Web frameworks","text":"<p>Mostly <code>Django</code> and <code>Flask</code>.</p> <ul> <li>:tv::newspaper: Python Flask From Scratch by Traversy Media</li> <li>:tv: Flask Tutorial by Chris Hawkes</li> <li>:tv: The Flask Mega-Tutorial by Miguel Grinberg</li> <li>:tv: Practical Flask Web Development Tutorials by sentdex</li> <li>:tv: Flask Web Development with Python Tutorials by thenewboston</li> <li>:tv: Django Tutorials by Corey Schafer</li> <li>:tv: The Best Django Tutorial by Chris Hawkes</li> <li>:tv: Building a Website with Django by Chris Hawkes</li> <li>:tv: Django Girls Tutorial by Django Girls</li> <li>:newspaper: A Complete Beginner's Guide to Django by Vitor Freitas</li> </ul>"},{"location":"python/resources/tutorials/#how-tos","title":"How To's","text":"<p>Tutorials on building croncrete projects.</p> <ul> <li>:newspaper: Monitor your internet with python by Joseph</li> <li>:newspaper: How to build your own Python Voice Assistant by thecodingpie</li> </ul>"},{"location":"python/resources/web-dev/","title":"Pure Python web development","text":""},{"location":"python/resources/web-dev/#1-fully-featured-production-grade-frameworks","title":"1) Fully-featured production grade frameworks","text":""},{"location":"python/resources/web-dev/#nicegui","title":"NiceGUI","text":"<ul> <li>Built on FastAPI.</li> <li>Clean and well-documented API.</li> <li>Not just limited to web applications. The 1.12 release has made it possible to have desktop apps as well.</li> </ul>"},{"location":"python/resources/web-dev/#datapane","title":"Datapane","text":"<ul> <li>Can be embedded in Flask or Django</li> </ul>"},{"location":"python/resources/web-dev/#reactpy","title":"ReactPy","text":"<ul> <li>Official support for the following backends: Flask, FastAPI, Sanic, Tornado, Django, Jupyter, Plotly-Dash</li> </ul>"},{"location":"python/resources/web-dev/#dash","title":"Dash","text":"<ul> <li>Built on plotly and ReactJS.</li> </ul>"},{"location":"python/resources/web-dev/#flet","title":"Flet","text":"<ul> <li>Build Flutter apps in Python. Flutter is an open source framework by Google for building beautiful, natively compiled, multi-platform applications from a single codebase.</li> </ul>"},{"location":"python/resources/web-dev/#pynecone","title":"Pynecone","text":"<ul> <li>Compiles to a traditional React (NextJS flavor) app.</li> <li>Excellent scalability.</li> <li>Uses FastAPI.</li> </ul>"},{"location":"python/resources/web-dev/#2-limited-scope-frameworks","title":"2) Limited-scope frameworks","text":""},{"location":"python/resources/web-dev/#streamlit","title":"Streamlit","text":"<ul> <li>Very powerful and very popular.</li> </ul>"},{"location":"python/resources/web-dev/#gradio","title":"Gradio","text":"<ul> <li>Gradio can wrap almost any Python function with an easy-to-use user interface.</li> </ul>"},{"location":"python/resources/web-dev/#shiny-for-python","title":"Shiny for Python","text":"<ul> <li>Clean API and good documentation. </li> <li>Lacks the features for complete web applications like authentication, authorization and sessioning.</li> </ul>"},{"location":"python/resources/web-dev/#references","title":"References","text":"<ul> <li>Pure Python Web Development</li> </ul>"}]}