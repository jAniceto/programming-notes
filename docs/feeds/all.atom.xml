<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Annotatio</title><link href="https://janiceto.github.io/programming-notes-blog/" rel="alternate"></link><link href="https://janiceto.github.io/programming-notes-blog/feeds/all.atom.xml" rel="self"></link><id>https://janiceto.github.io/programming-notes-blog/</id><updated>2019-02-03T20:46:00+00:00</updated><entry><title>Set up Amazon S3 to serve Django Static and Media files</title><link href="https://janiceto.github.io/programming-notes-blog/s3-django-setup.html" rel="alternate"></link><published>2019-01-31T12:10:00+00:00</published><updated>2019-02-03T20:46:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2019-01-31:/programming-notes-blog/s3-django-setup.html</id><summary type="html">&lt;p&gt;Amazon S3 Buckets are a cheap way to store your staticfiles and media files. It also seems like the easiest way when serving a Django&amp;nbsp;App. &lt;/p&gt;
&lt;h2&gt;1) Sign up to &lt;span class="caps"&gt;AWS&lt;/span&gt; S3 and create &lt;span class="caps"&gt;IAM&lt;/span&gt;&amp;nbsp;user&lt;/h2&gt;
&lt;p&gt;After signing up to Amazon &lt;span class="caps"&gt;AWS&lt;/span&gt; we need to create a user using the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Amazon S3 Buckets are a cheap way to store your staticfiles and media files. It also seems like the easiest way when serving a Django&amp;nbsp;App. &lt;/p&gt;
&lt;h2&gt;1) Sign up to &lt;span class="caps"&gt;AWS&lt;/span&gt; S3 and create &lt;span class="caps"&gt;IAM&lt;/span&gt;&amp;nbsp;user&lt;/h2&gt;
&lt;p&gt;After signing up to Amazon &lt;span class="caps"&gt;AWS&lt;/span&gt; we need to create a user using the &lt;strong&gt;&lt;span class="caps"&gt;IAM&lt;/span&gt;&lt;/strong&gt; service. This way you can restrict the access to the bucket. Each user will have its own access id and key. To do&amp;nbsp;this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the &lt;strong&gt;Services&lt;/strong&gt; dropdown select &lt;strong&gt;&lt;span class="caps"&gt;IAM&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Users&lt;/strong&gt; and select &lt;strong&gt;Add User&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type the name of the user and make sure that &lt;strong&gt;Programmatic access&lt;/strong&gt; is selected under &lt;strong&gt;Access type&lt;/strong&gt; as you will need this to provide upload access for your S3 bucket. Click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select &lt;strong&gt;Attatch existing policies directly&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the list that appears select &lt;strong&gt;AmazonS3FullAccess&lt;/strong&gt; and again click on &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Create User&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;This will create the user and generate an access id and key for the user. The id-key pair can only be downloaded at this step so do that by clicking on &lt;strong&gt;Download .csv&lt;/strong&gt;. Keep it&amp;nbsp;secret.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the Users Dashboard click on the user you have just created. Make a note of &lt;strong&gt;User &lt;span class="caps"&gt;ARN&lt;/span&gt;&lt;/strong&gt;. You will be using this&amp;nbsp;later.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2) Create a S3&amp;nbsp;Bucket&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;From the Services dropdown select s3. This opens up the dashboard for the S3&amp;nbsp;buckets.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on &lt;strong&gt;Create Bucket&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select the region you&amp;nbsp;want.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Note: Try to create  a bucket in the same region where your app is running to take advantage of &lt;span class="caps"&gt;AWS&lt;/span&gt;&amp;#8217;s free in-region data transfer&amp;nbsp;rates.&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Give your bucket a name and click on next that brings you to the &lt;strong&gt;Set Properties&lt;/strong&gt; tab. Click on &lt;strong&gt;Next&lt;/strong&gt; a couple more times and then click on &lt;strong&gt;Create Bucket&lt;/strong&gt; to create your&amp;nbsp;bucket.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;3) Set up Bucket&amp;nbsp;permissions&lt;/h2&gt;
&lt;p&gt;Now let&amp;#8217;s define the policy for allowing restricted access to our&amp;nbsp;bucket.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Click on the name of the bucket that you just&amp;nbsp;created.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click on the &lt;strong&gt;Permissions&lt;/strong&gt;&amp;nbsp;tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Since you have to set the permissions for access, click on &lt;strong&gt;Bucket Policy&lt;/strong&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On the bottom left click on &lt;strong&gt;&lt;span class="caps"&gt;AWS&lt;/span&gt; Policy Generator&lt;/strong&gt; which opens up the tool Amazon provides for quick policy&amp;nbsp;generation. &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Now we have to generate two policy rules. The first one is to allow our hosted website to access your files from the&amp;nbsp;bucket:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Select Type of Policy : S3 Bucket Policy
Effect : Allow
Principal : *      //This gives everybody access
AWS Service : Amazon S3
Actions : GetObject
Amazon Resource Name : arn:aws:s3:::&amp;lt;your bucket name&amp;gt;/* 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;*&lt;/code&gt; at the end siginifies that access is being given to all the&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;After setting the values as mentioned above click on &lt;strong&gt;Add Statement&lt;/strong&gt;. Do not click on &lt;strong&gt;Generate Policy&lt;/strong&gt; yet as you have to create a policy to allow the Django application to put files into the bucket on deployment. The policy will be as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Select Type of Policy : S3 Bucket Policy
Effect : Allow
Principal : &amp;lt;User ARN&amp;gt;     //This is the user arn that you kept a note of earlier.
AWS Service : Amazon S3
Actions : *    //I gave full access, though I think GetObject, PutObject will be better. Will try it out soon. 
Amazon Resource Name : arn:aws:s3:::&amp;lt;your bucket name&amp;gt;/*,arn:aws:s3:::&amp;lt;your bucket name&amp;gt;  // Gives full access to buckets and its contents.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After setting the values mentioned above click on &lt;strong&gt;Add Statement&lt;/strong&gt; and then &lt;strong&gt;Generate Policy&lt;/strong&gt; . This will show you the policy which you can copy, paste in the dialogue box on S3 dashboard and click on &lt;strong&gt;Save&lt;/strong&gt;.&lt;/p&gt;
&lt;h2&gt;4) Providing S3 access to your Heroku&amp;nbsp;app&lt;/h2&gt;
&lt;p&gt;The last step for setting up the Bucket access is providing the application hosted on Heroku, access to the bucket content. This can be done by setting up the &lt;strong&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt; configuration&lt;/strong&gt;. To do this click on the &lt;strong&gt;&lt;span class="caps"&gt;CORS&lt;/span&gt; Configuration&lt;/strong&gt; tab and click on Save. The default configuration will suffice. Something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;CORSConfiguration&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;CORSRule&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;AllowedOrigin&amp;gt;&lt;/span&gt;*&lt;span class="nt"&gt;&amp;lt;/AllowedOrigin&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;AllowedMethod&amp;gt;&lt;/span&gt;GET&lt;span class="nt"&gt;&amp;lt;/AllowedMethod&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;MaxAgeSeconds&amp;gt;&lt;/span&gt;3000&lt;span class="nt"&gt;&amp;lt;/MaxAgeSeconds&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;AllowedHeader&amp;gt;&lt;/span&gt;Authorization&lt;span class="nt"&gt;&amp;lt;/AllowedHeader&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/CORSRule&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/CORSConfiguration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have the bucket access set up. Now all you have to do is set up your Django application to access the bucket which is fairly easy. The first step to achieve the goal will be to install Boto3 and DjangoStorages. Nifty APIs to make working with S3 buckets easy. This can be easily done using&amp;nbsp;pip.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install django-storages boto3
pip freeze &amp;gt;&amp;gt; requirements.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add &lt;code&gt;storages&lt;/code&gt; to the list of INSTALLED_APPS in the &lt;code&gt;settings.py&lt;/code&gt; file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSTALLED_APPS = (
          ...,
          &amp;#39;storages&amp;#39;,
     )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next you have to add the following settings to the &lt;code&gt;settings.py&lt;/code&gt; file in your&amp;nbsp;application.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Set S3 as the place to store your files.&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; 
&lt;span class="n"&gt;storages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;backends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s3boto3&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;S3Boto3Storage&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;storages.backends.s3boto3.S3Boto3Storage&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AWS_ACCESS_KEY_ID&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AWS_SECRET_ACCESS_KEY&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;AWS_STORAGE_BUCKET_NAME&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;AWS_QUERYSTRING_AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt; &lt;span class="c1"&gt;# This will make sure that the file URL does not have unnecessary parameters like your access key.&lt;/span&gt;
&lt;span class="n"&gt;AWS_S3_CUSTOM_DOMAIN&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.s3.amazonaws.com&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# Static media settings&lt;/span&gt;
&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;https://&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.s3.amazonaws.com/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;media/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_DIRS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;static&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;staticfiles&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;ADMIN_MEDIA_PREFIX&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;admin/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATICFILES_FINDERS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.FileSystemFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles.finders.AppDirectoriesFinder&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, make sure the main &lt;code&gt;urls.py&lt;/code&gt; file does include the url configuration for your media&amp;nbsp;files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.conf&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;settings&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;static&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;document_root&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MEDIA_ROOT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And as a last step there should be a folder called static in the root of your application (same level as the manage.py file). Git does not allow you to commit empty folders so you can inlcude a readme file in there to commit the&amp;nbsp;folder.&lt;/p&gt;
&lt;p&gt;If you are using Heroku before pushing your code&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku config:set DISABLE_COLLECTSTATIC=1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;to disable collectstatic running automatically as your static folder is not yet present on the server and an error will be thrown regarding the same. You can now push all changes to Heroku&amp;nbsp;with&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push heroku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;or if you want to push from a different&amp;nbsp;branch:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;git push heroku testbranch:master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can now run the &lt;code&gt;collectstatic&lt;/code&gt; command manually&amp;nbsp;using:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku run python manage.py collectstatic --noinput
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you get the following&amp;nbsp;error:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;UserWarning&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;S3Boto3Storage&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;insecure&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="n"&gt;change&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;storages&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;By&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;buckets&lt;/span&gt; &lt;span class="n"&gt;are&lt;/span&gt; &lt;span class="n"&gt;saved&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;an&lt;/span&gt; &lt;span class="n"&gt;ACL&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;public-read&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;globally&lt;/span&gt; &lt;span class="n"&gt;publicly&lt;/span&gt; &lt;span class="n"&gt;readable&lt;/span&gt;&lt;span class="o"&gt;).&lt;/span&gt; &lt;span class="n"&gt;Version&lt;/span&gt; &lt;span class="mf"&gt;2.0&lt;/span&gt; &lt;span class="n"&gt;will&lt;/span&gt; &lt;span class="k"&gt;default&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;bucket&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="n"&gt;ACL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;To&lt;/span&gt; &lt;span class="n"&gt;opt&lt;/span&gt; &lt;span class="n"&gt;into&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;behavior&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;AWS_DEFAULT_ACL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;otherwise&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;silence&lt;/span&gt; &lt;span class="k"&gt;this&lt;/span&gt; &lt;span class="n"&gt;warning&lt;/span&gt; &lt;span class="n"&gt;explicitly&lt;/span&gt; &lt;span class="kd"&gt;set&lt;/span&gt; &lt;span class="n"&gt;AWS_DEFAULT_ACL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;The default behavior of S3Boto3Storage is insecure and will change &amp;quot;&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;AccessDenied&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;add the following variable to &lt;code&gt;settings.py&lt;/code&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;AWS_DEFAULT_ACL = None
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One important point before you go on this adventure. At the moment all the media files (files that are uploaded by the user) used in our models have the property &lt;code&gt;upload_to&lt;/code&gt; set for them and as a result don&amp;#8217;t overwrite the static&amp;nbsp;files. &lt;/p&gt;
&lt;p&gt;We are now ready to serve static and media files from the S3&amp;nbsp;bucket!&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://medium.com/@manibatra23/setting-up-amazon-s3-bucket-for-serving-django-static-and-media-files-3e781ab325d5"&gt;Setting up Amazon S3 Bucket for serving Django Static and Media&amp;nbsp;files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.caktusgroup.com/blog/2014/11/10/Using-Amazon-S3-to-store-your-Django-sites-static-and-media-files/"&gt;Using Amazon S3 to Store your Django Site&amp;#8217;s Static and Media&amp;nbsp;Files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://simpleisbetterthancomplex.com/tutorial/2017/08/01/how-to-setup-amazon-s3-in-a-django-project.html"&gt;How to Setup Amazon S3 in a Django&amp;nbsp;Project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Deploy a Django app to Heroku</title><link href="https://janiceto.github.io/programming-notes-blog/deploy-django-heroku.html" rel="alternate"></link><published>2019-01-22T14:45:00+00:00</published><updated>2019-02-01T23:11:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2019-01-22:/programming-notes-blog/deploy-django-heroku.html</id><summary type="html">&lt;h3&gt;Index:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-the-heroku-cli"&gt;Install the Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-python-and-django-apps-on-heroku"&gt;Deploying Python and Django Apps on&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-django-apps-for-heroku"&gt;Configure Django apps for&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-to-heroku"&gt;Deploy to&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Requirements:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git&amp;nbsp;installed&lt;/li&gt;
&lt;li&gt;Python&amp;nbsp;&amp;gt;3.6&lt;/li&gt;
&lt;li&gt;Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt; (see step&amp;nbsp;1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1) Install the Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Install the Heroku Command Line Interface (&lt;span class="caps"&gt;CLI&lt;/span&gt;) for your platform from &lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#set-up"&gt;here …&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Index:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#requirements"&gt;Requirements&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#install-the-heroku-cli"&gt;Install the Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploying-python-and-django-apps-on-heroku"&gt;Deploying Python and Django Apps on&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#configure-django-apps-for-heroku"&gt;Configure Django apps for&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#deploy-to-heroku"&gt;Deploy to&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#references"&gt;References&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Requirements:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Git&amp;nbsp;installed&lt;/li&gt;
&lt;li&gt;Python&amp;nbsp;&amp;gt;3.6&lt;/li&gt;
&lt;li&gt;Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt; (see step&amp;nbsp;1)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1) Install the Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;Install the Heroku Command Line Interface (&lt;span class="caps"&gt;CLI&lt;/span&gt;) for your platform from &lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python#set-up"&gt;here&lt;/a&gt;. Once installed, you can use the &lt;code&gt;heroku&lt;/code&gt; command from your command shell. To log in to the Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt;&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku login
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2) Deploying Python and Django apps on&amp;nbsp;Heroku&lt;/h2&gt;
&lt;p&gt;Heroku automatically identifies your app as a Python app if any of the following files are present in its root directory:
&lt;em&gt; &lt;code&gt;Pipfile&lt;/code&gt;
&lt;/em&gt; &lt;code&gt;setup.py&lt;/code&gt;
* &lt;code&gt;requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;When you deploy to Heroku, the dependencies you specify are automatically installed. If you’re using Django, the &lt;code&gt;collectstatic&lt;/code&gt; command also runs automatically during the deployment process. For this to work properly make sure you install the Django-Heroku Python package (step&amp;nbsp;3).&lt;/p&gt;
&lt;h2&gt;3) Configure Django apps for&amp;nbsp;Heroku&lt;/h2&gt;
&lt;p&gt;Create a &lt;code&gt;Procfile&lt;/code&gt; (no extension) and add the following content where &lt;code&gt;myproject&lt;/code&gt; is the name of your Django&amp;nbsp;app.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;web&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;gunicorn&lt;/span&gt; &lt;span class="n"&gt;myproject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;wsgi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install &lt;code&gt;gunicorn&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install the &lt;code&gt;django-heroku&lt;/code&gt; package&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv install django-heroku
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following import statement to the top of &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;django_heroku&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then add the following to the bottom of &lt;code&gt;settings.py&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Activate Django-Heroku.&lt;/span&gt;
&lt;span class="n"&gt;django_heroku&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;locals&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4) Deploy to&amp;nbsp;Heroku&lt;/h2&gt;
&lt;p&gt;Using the Heroku &lt;span class="caps"&gt;CLI&lt;/span&gt; lets create our app and the&amp;nbsp;database.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku login
$ heroku create &amp;lt;desired_app_name&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now lets push our code to&amp;nbsp;Heroku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git add .
$ git commit -m &lt;span class="s2"&gt;&amp;quot;Ready to heroku this.&amp;quot;&lt;/span&gt;
$ git push heroku master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, migrate your Database to the Heroku&amp;nbsp;app:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ heroku run python manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now be able to see your app in the Heroku Dashboard as well as a Dyno web process with the &lt;code&gt;ON&lt;/code&gt; indication.&lt;/p&gt;
&lt;h2&gt;5) Import local database to Heroku&amp;nbsp;(Optional)&lt;/h2&gt;
&lt;p&gt;If you are using a postgresql database locally you can easily import it to your newly created Heroku app. First create a backup of your local &lt;span class="caps"&gt;DB&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pg_dump -U USERNAME DATABASE &amp;gt; pg_db_dump.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To import it to Heroku&amp;nbsp;run:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;heroku pg:psql --app APPNAME &amp;lt; pg_db_dump.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/getting-started-with-python"&gt;Getting Started on Heroku with&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/deploying-python"&gt;Deploying Python and Django Apps on&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/django-app-configuration"&gt;Configuring Django Apps for&amp;nbsp;Heroku&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/heroku/django-heroku"&gt;django-heroku&amp;nbsp;Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://devcenter.heroku.com/articles/git"&gt;Deploying with&amp;nbsp;Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Collection of useful Django snippets for several purposes</title><link href="https://janiceto.github.io/programming-notes-blog/django-snippets.html" rel="alternate"></link><published>2019-01-08T10:32:00+00:00</published><updated>2019-01-22T22:48:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2019-01-08:/programming-notes-blog/django-snippets.html</id><summary type="html">&lt;h3&gt;Index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-a-slug"&gt;Create a&amp;nbsp;slug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#send-email"&gt;Send&amp;nbsp;email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-dump-to-file"&gt;Database dump to&amp;nbsp;file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#provide-data-to-db-via-django-python-shell"&gt;Provide data to &lt;span class="caps"&gt;DB&lt;/span&gt; via Django Python&amp;nbsp;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-script-with-access-to-django-shell"&gt;Create script with access to Django&amp;nbsp;shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrate-django-from-sqlite-to-postgresql"&gt;Migrate Django from SQLite to&amp;nbsp;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Create a&amp;nbsp;slug&lt;/h3&gt;
&lt;p&gt;Call the Django &lt;code&gt;slugify&lt;/code&gt; function automatically by overriding the &lt;code&gt;save&lt;/code&gt; method. It is preferable to generate …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Index&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#create-a-slug"&gt;Create a&amp;nbsp;slug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#send-email"&gt;Send&amp;nbsp;email&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#database-dump-to-file"&gt;Database dump to&amp;nbsp;file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#provide-data-to-db-via-django-python-shell"&gt;Provide data to &lt;span class="caps"&gt;DB&lt;/span&gt; via Django Python&amp;nbsp;Shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#create-script-with-access-to-django-shell"&gt;Create script with access to Django&amp;nbsp;shell&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#migrate-django-from-sqlite-to-postgresql"&gt;Migrate Django from SQLite to&amp;nbsp;PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Create a&amp;nbsp;slug&lt;/h3&gt;
&lt;p&gt;Call the Django &lt;code&gt;slugify&lt;/code&gt; function automatically by overriding the &lt;code&gt;save&lt;/code&gt; method. It is preferable to generate the slug only once when you create a new object, otherwise your URLs may change when the &lt;code&gt;q&lt;/code&gt; field is edited, which can cause broken links. More info &lt;a href="https://stackoverflow.com/questions/837828/how-do-i-create-a-slug-in-django"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SlugField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="c1"&gt;# Newly created object, so set slug&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;slugify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Test&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Send&amp;nbsp;email&lt;/h3&gt;
&lt;p&gt;If &lt;code&gt;html_message&lt;/code&gt; keyword argument is provided, the resulting email will be a multipart/alternative email with &lt;code&gt;message&lt;/code&gt; as the text/plain content type and &lt;code&gt;html_message&lt;/code&gt; as the text/html content&amp;nbsp;type. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# views.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.core.mail&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;send_mail&lt;/span&gt;

&lt;span class="n"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Subject here&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;Here is the message.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;from@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;to@example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="n"&gt;fail_silently&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Mail is sent using the &lt;span class="caps"&gt;SMTP&lt;/span&gt; host and port specified in the &lt;code&gt;EMAIL_HOST&lt;/code&gt; and &lt;code&gt;EMAIL_PORT&lt;/code&gt; settings. The &lt;code&gt;EMAIL_HOST_USER&lt;/code&gt; and &lt;code&gt;EMAIL_HOST_PASSWORD&lt;/code&gt; settings, if set, are used to authenticate to the &lt;span class="caps"&gt;SMTP&lt;/span&gt; server, and the &lt;code&gt;EMAIL_USE_TLS&lt;/code&gt; and &lt;code&gt;EMAIL_USE_SSL&lt;/code&gt; settings control whether a secure connection is used. More info &lt;a href="https://docs.djangoproject.com/en/2.1/topics/email/"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;Database dump to&amp;nbsp;file&lt;/h3&gt;
&lt;p&gt;Save from &lt;span class="caps"&gt;DB&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py dumpdata &amp;gt; db_dump.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Load fixture to &lt;span class="caps"&gt;DB&lt;/span&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py loaddata &amp;lt;fixture&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Provide data to &lt;span class="caps"&gt;DB&lt;/span&gt; via Django Python&amp;nbsp;Shell&lt;/h3&gt;
&lt;p&gt;Exemple for loading data in a json file named &lt;code&gt;filename.json&lt;/code&gt; to the Model &lt;code&gt;Member&lt;/code&gt; in the app &lt;code&gt;website&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python manage.py shell
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;website.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;filename.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;utf-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;members_json&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;members_json&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Member&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;position&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;position&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;alumni&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alumni&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Create script with access to Django&amp;nbsp;shell&lt;/h3&gt;
&lt;p&gt;If you wnat to run an external script but have access to the Django environment like you do with &lt;code&gt;python manage.py shell&lt;/code&gt; you can do the following. More info &lt;a href="https://stackoverflow.com/questions/8047204/django-script-to-access-model-objects-without-using-manage-py-shell"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# your_script.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdefault&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;DJANGO_SETTINGS_MODULE&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your_project_name.settings&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# your imports, e.g. Django models&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;your_project_name.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;

&lt;span class="c1"&gt;# From now onwards start your script..&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here is an example to access and modify your&amp;nbsp;model:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# models.py&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;models&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CharField&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# your_script.py&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;    
    &lt;span class="c1"&gt;# e.g. add a new location&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Berlin&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# this is an example to access your model&lt;/span&gt;
    &lt;span class="n"&gt;locations&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;locations&lt;/span&gt;

    &lt;span class="c1"&gt;# e.g. delete the location&lt;/span&gt;
    &lt;span class="n"&gt;berlin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Location&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Berlin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;berlin&lt;/span&gt;
    &lt;span class="n"&gt;berlin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;Migrate Django from SQLite to&amp;nbsp;PostgreSQL&lt;/h3&gt;
&lt;p&gt;Here&amp;#8217;s how to migrate a Django database from SQLite to PostgreSQL. More info &lt;a href="https://stackoverflow.com/questions/3034910/whats-the-best-way-to-migrate-a-django-db-from-sqlite-to-mysql"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;1) Dump existing&amp;nbsp;data:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py dumpdata &amp;gt; datadump.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) Change settings.py to Postgres&amp;nbsp;backend.&lt;/p&gt;
&lt;p&gt;3) Make sure you can connect on PostgreSQL.&amp;nbsp;Then:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py migrate --run-syncdb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4) Run this on Django shell to exclude contentype&amp;nbsp;data&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python manage.py shell
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib.contenttypes.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ContentType&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;delete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="sb"&gt;````&lt;/span&gt;

&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;Finally&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;python manage.py loaddata datadump.json&amp;nbsp;&amp;#8220;`&lt;/p&gt;</content></entry><entry><title>Editing photos metadata</title><link href="https://janiceto.github.io/programming-notes-blog/image-metadata.html" rel="alternate"></link><published>2018-12-14T10:43:00+00:00</published><updated>2018-12-14T10:43:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-12-14:/programming-notes-blog/image-metadata.html</id><summary type="html">&lt;p&gt;You can do it in one line in the Terminal using &lt;code&gt;jhead&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, adjust all &lt;span class="caps"&gt;EXIF&lt;/span&gt; times forward by 1&amp;nbsp;hour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jhead -ta+1:00 *.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Useful&amp;nbsp;links: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sentex.net/~mwandel/jhead/"&gt;jhead download&amp;nbsp;page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sentex.net/~mwandel/jhead/usage.html"&gt;jhead&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;You can do it in one line in the Terminal using &lt;code&gt;jhead&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;For example, adjust all &lt;span class="caps"&gt;EXIF&lt;/span&gt; times forward by 1&amp;nbsp;hour:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;jhead -ta+1:00 *.jpg
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Useful&amp;nbsp;links: &lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sentex.net/~mwandel/jhead/"&gt;jhead download&amp;nbsp;page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.sentex.net/~mwandel/jhead/usage.html"&gt;jhead&amp;nbsp;documentation&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Filter a table or list by typing in search box</title><link href="https://janiceto.github.io/programming-notes-blog/filter-search.html" rel="alternate"></link><published>2018-08-28T11:27:00+01:00</published><updated>2018-08-28T11:27:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-08-28:/programming-notes-blog/filter-search.html</id><summary type="html">&lt;h2&gt;Using a &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;library:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://listjs.com/"&gt;listjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;From&amp;nbsp;scratch:&lt;/h2&gt;
&lt;h3&gt;For a&amp;nbsp;table&lt;/h3&gt;
&lt;p&gt;1) &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myInput&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onkeyup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myFunction()&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search for names..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myTable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width:60%;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width:40%;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Country&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Alfreds Futterkiste&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Germany …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;Using a &lt;span class="caps"&gt;JS&lt;/span&gt;&amp;nbsp;library:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://listjs.com/"&gt;listjs.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;From&amp;nbsp;scratch:&lt;/h2&gt;
&lt;h3&gt;For a&amp;nbsp;table&lt;/h3&gt;
&lt;p&gt;1) &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myInput&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onkeyup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myFunction()&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search for names..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myTable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="na"&gt;class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;header&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width:60%;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Name&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt; &lt;span class="na"&gt;style&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;width:40%;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Country&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Alfreds Futterkiste&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Germany&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Berglunds snabbkop&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Sweden&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Island Trading&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;UK&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Koniglich Essen&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Germany&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;td&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;table&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) &lt;span class="caps"&gt;CSS&lt;/span&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/css/searchicon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Add a search icon to input */&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Position the search icon */&lt;/span&gt;
    &lt;span class="k"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Do not repeat the icon image */&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Full-width */&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Increase font-size */&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add some padding */&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add a grey border */&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add some space below the input */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myTable&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border-collapse&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;collapse&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Collapse borders */&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Full-width */&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add a grey border */&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Increase font-size */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myTable&lt;/span&gt; &lt;span class="nt"&gt;th&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myTable&lt;/span&gt; &lt;span class="nt"&gt;td&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;text-align&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Left-align text */&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add padding */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myTable&lt;/span&gt; &lt;span class="nt"&gt;tr&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Add a bottom border to all table rows */&lt;/span&gt;
    &lt;span class="k"&gt;border-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myTable&lt;/span&gt; &lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;header&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myTable&lt;/span&gt; &lt;span class="nt"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Add a grey background color to the table header and on hover */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f1f1f1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3)&amp;nbsp;Javascript &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="c1"&gt;// Declare variables &lt;/span&gt;
  &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myInput&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="nx"&gt;table&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myTable&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="nx"&gt;tr&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;table&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tr&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

  &lt;span class="c1"&gt;// Loop through all table rows, and hide those who don&amp;#39;t match the search query&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;td&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;td&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
      &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;td&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;tr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
      &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 
  &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Remove &lt;code&gt;toUpperCase()&lt;/code&gt; if you want to perform a case-sensitive&amp;nbsp;search.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change &lt;code&gt;tr[i].getElementsByTagName('td')[0]&lt;/code&gt; to &lt;code&gt;[1]&lt;/code&gt; if you want to search for &amp;#8220;Country&amp;#8221; (index 1) instead of &amp;#8220;Name&amp;#8221; (index&amp;nbsp;0).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;For a&amp;nbsp;list&lt;/h3&gt;
&lt;p&gt;1) &lt;span class="caps"&gt;HTML&lt;/span&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;input&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myInput&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;onkeyup&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myFunction()&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Search for names..&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;myUL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Adele&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Agnes&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Billy&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Bob&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;

  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Calvin&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Christina&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;#&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Cindy&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;li&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2) &lt;span class="caps"&gt;CSS&lt;/span&gt; &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myInput&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-image&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/css/searchicon.png&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c"&gt;/* Add a search icon to input */&lt;/span&gt;
    &lt;span class="k"&gt;background-position&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Position the search icon */&lt;/span&gt;
    &lt;span class="k"&gt;background-repeat&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;no-repeat&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Do not repeat the icon image */&lt;/span&gt;
    &lt;span class="k"&gt;width&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Full-width */&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Increase font-size */&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="mi"&gt;40&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add some padding */&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add a grey border */&lt;/span&gt;
    &lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add some space below the input */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myUL&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c"&gt;/* Remove default list styling */&lt;/span&gt;
    &lt;span class="k"&gt;list-style-type&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;margin&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myUL&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;border&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt; &lt;span class="kc"&gt;solid&lt;/span&gt; &lt;span class="mh"&gt;#ddd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add a border to all links */&lt;/span&gt;
    &lt;span class="k"&gt;margin-top&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;-1&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Prevent double borders */&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#f6f6f6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Grey background color */&lt;/span&gt;
    &lt;span class="k"&gt;padding&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add some padding */&lt;/span&gt;
    &lt;span class="k"&gt;text-decoration&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;none&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Remove default text underline */&lt;/span&gt;
    &lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;18&lt;/span&gt;&lt;span class="kt"&gt;px&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Increase the font-size */&lt;/span&gt;
    &lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;black&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add a black text color */&lt;/span&gt;
    &lt;span class="k"&gt;display&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;block&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Make it into a block element to fill the whole list */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;myUL&lt;/span&gt; &lt;span class="nt"&gt;li&lt;/span&gt; &lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;hover&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;not&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;header&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;background-color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;#eee&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c"&gt;/* Add a hover effect to all links, except for headers */&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3)&amp;nbsp;Javascript &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;script&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;myFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;// Declare variables&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;input&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myInput&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;filter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;input&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ul&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;myUL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;li&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ul&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;li&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="c1"&gt;// Loop through all list items, and hide those who don&amp;#39;t match the search query&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;innerHTML&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;li&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;].&lt;/span&gt;&lt;span class="nx"&gt;style&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;display&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;none&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="err"&gt;/script&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>VPS providers</title><link href="https://janiceto.github.io/programming-notes-blog/vps-providers.html" rel="alternate"></link><published>2018-08-28T11:16:00+01:00</published><updated>2019-01-31T17:01:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-08-28:/programming-notes-blog/vps-providers.html</id><summary type="html">&lt;p&gt;When you need to host your projects, you have several options&amp;nbsp;available:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shared hosting&lt;/strong&gt;, where you share a server with lots of other users and have very limited control over the server. &lt;strong&gt;Dedicated hosting&lt;/strong&gt;, where you have complete control over a server, a very flexible option, but requires you to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When you need to host your projects, you have several options&amp;nbsp;available:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Shared hosting&lt;/strong&gt;, where you share a server with lots of other users and have very limited control over the server. &lt;strong&gt;Dedicated hosting&lt;/strong&gt;, where you have complete control over a server, a very flexible option, but requires you to manage the whole server, worry about hardware failures and backups, and is typically expensive. A third option that is in between these two choices is a &lt;strong&gt;Virtual Private Server&lt;/strong&gt;, or &lt;strong&gt;&lt;span class="caps"&gt;VPS&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;VPSs virtualized nature provides several advantages such as instant reinstallation of the operating system, quick recovery and backup, and fast and simple hardware upgrades (the hardware is virtual, after&amp;nbsp;all).&lt;/p&gt;
&lt;p&gt;Here is a list of several popular &lt;span class="caps"&gt;VPS&lt;/span&gt;&amp;nbsp;providers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/pricing/"&gt;digitalocean.com&lt;/a&gt; - from 5 $/month + tax&amp;nbsp;(anual)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com"&gt;linode.com&lt;/a&gt; - from 5 $/month +&amp;nbsp;tax&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.heroku.com/pricing"&gt;heroku.com&lt;/a&gt; from 7 $/month + tax&amp;nbsp;(anual)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://console.cloud.google.com/compute"&gt;Google&amp;nbsp;Cloudm&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ec2/"&gt;&lt;span class="caps"&gt;AWS&lt;/span&gt; &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Portugal based&amp;nbsp;providers:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.ovh.pt/vps/vps-ssd.xml"&gt;ovh.pt&lt;/a&gt; - from 3 €/month + tax&amp;nbsp;(anual)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.flexi.pt/vps-servidor-virtual"&gt;flexi.pt&lt;/a&gt; - from 3 €/month + tax&amp;nbsp;(anual)&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Installing Python 3.7 on Raspbian</title><link href="https://janiceto.github.io/programming-notes-blog/python-raspbian.html" rel="alternate"></link><published>2018-08-27T21:14:00+01:00</published><updated>2018-08-27T21:14:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-08-27:/programming-notes-blog/python-raspbian.html</id><summary type="html">&lt;p&gt;As of January 2018, Raspbian does not yet include the latest Python release, Python 3.6. This means we will have to build it ourselves, and here is how to do it. There is also an ansible role attached that automates it all for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;1) Install the required build-tools …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As of January 2018, Raspbian does not yet include the latest Python release, Python 3.6. This means we will have to build it ourselves, and here is how to do it. There is also an ansible role attached that automates it all for&amp;nbsp;you.&lt;/p&gt;
&lt;p&gt;1) Install the required build-tools (some might already be installed on your&amp;nbsp;system).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get install build-essential tk-dev libncurses5-dev libncursesw5-dev libreadline6-dev libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If one of the packages cannot be found, try a newer version number (e.g. &lt;code&gt;libdb5.4-dev&lt;/code&gt; instead of &lt;code&gt;libdb5.3-dev&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;2) Download and install Python 3.6. When downloading the source code, select the most recent release of Python 3.6, available on the &lt;a href="https://www.python.org/downloads/source/"&gt;official site&lt;/a&gt;. Adjust the file names&amp;nbsp;accordingly.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ wget https://www.python.org/ftp/python/3.7.0/Python-3.7.0.tar.xz
$ tar xf Python-3.7.0.tar.xz
$ &lt;span class="nb"&gt;cd&lt;/span&gt; Python-3.7.0
$ ./configure
$ make
$ sudo make altinstall
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3) Optionally: Delete the source code and uninstall the previously installed packages. When uninstalling the packages, make sure you only remove those that were not previously installed on your system. Also, remember to adjust version numbers if&amp;nbsp;necesarry.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo rm -r Python-3.7.0
$ rm Python-3.7.0.tar.xz
$ sudo apt-get --purge remove build-essential tk-dev
$ sudo apt-get --purge remove libncurses5-dev libncursesw5-dev libreadline6-dev
$ sudo apt-get --purge remove libdb5.3-dev libgdbm-dev libsqlite3-dev libssl-dev
$ sudo apt-get --purge remove libbz2-dev libexpat1-dev liblzma-dev zlib1g-dev
$ sudo apt-get autoremove
$ sudo apt-get clean
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://liudr.wordpress.com/2016/02/04/install-python-on-raspberry-pi-or-debian/&lt;/li&gt;
&lt;li&gt;https://gist.github.com/BMeu/af107b1f3d7cf1a2507c9c6429367a3b&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Create a standalone exacutable from a Python scripy</title><link href="https://janiceto.github.io/programming-notes-blog/create-exe.html" rel="alternate"></link><published>2018-08-27T17:21:00+01:00</published><updated>2018-08-27T17:21:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-08-27:/programming-notes-blog/create-exe.html</id><summary type="html">&lt;h2&gt;Using&amp;nbsp;pyinstaller&lt;/h2&gt;
&lt;p&gt;To install pyinstaller on your pc (more details can be found here:&amp;nbsp;https://www.pyinstaller.org/)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pyinstaller&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use cmd to go to your program directory and to turn it into a exe&amp;nbsp;folder&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyinstaller yourprogram.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What I&amp;nbsp;run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyinstaller -F --windowed --icon=myapp.ico SumExcel …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Using&amp;nbsp;pyinstaller&lt;/h2&gt;
&lt;p&gt;To install pyinstaller on your pc (more details can be found here:&amp;nbsp;https://www.pyinstaller.org/)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install pyinstaller&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use cmd to go to your program directory and to turn it into a exe&amp;nbsp;folder&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyinstaller yourprogram.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;What I&amp;nbsp;run:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pyinstaller -F --windowed --icon=myapp.ico SumExcel.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This makes it a single exe (without the folders with all dependables) but is slightly slower, minimizes the console window sine I have a &lt;span class="caps"&gt;GUI&lt;/span&gt;, and gives it a snazzy icon that I had saved (you have to copy over the icon, or have an exception incase it isn&amp;#8217;t&amp;nbsp;found)&lt;/p&gt;</content></entry><entry><title>Regular expressions</title><link href="https://janiceto.github.io/programming-notes-blog/regex.html" rel="alternate"></link><published>2018-08-08T13:48:00+01:00</published><updated>2018-08-08T13:48:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-08-08:/programming-notes-blog/regex.html</id><summary type="html">&lt;h2&gt;Regex for finding&amp;nbsp;URLs&lt;/h2&gt;
&lt;p&gt;Regex if you want to ensure &lt;span class="caps"&gt;URL&lt;/span&gt; starts with &lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;HTTPS&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do not require &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;protocol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Exemple usage in VSCode to find …&lt;/h4&gt;</summary><content type="html">&lt;h2&gt;Regex for finding&amp;nbsp;URLs&lt;/h2&gt;
&lt;p&gt;Regex if you want to ensure &lt;span class="caps"&gt;URL&lt;/span&gt; starts with &lt;span class="caps"&gt;HTTP&lt;/span&gt;/&lt;span class="caps"&gt;HTTPS&lt;/span&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you do not require &lt;span class="caps"&gt;HTTP&lt;/span&gt;&amp;nbsp;protocol:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*)
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Exemple usage in VSCode to find a &lt;span class="caps"&gt;URL&lt;/span&gt; and convert to Markdown link like, &lt;code&gt;[link](link)&lt;/code&gt;:&lt;/h4&gt;
&lt;p&gt;Find: &lt;code&gt;(https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#?&amp;amp;//=]*))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Replace: &lt;code&gt;[$1]($1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;()&lt;/code&gt; to create a group and &lt;code&gt;$1&lt;/code&gt; to reference that&amp;nbsp;group.&lt;/p&gt;</content></entry><entry><title>Run Matlab programs in Python</title><link href="https://janiceto.github.io/programming-notes-blog/matlab.html" rel="alternate"></link><published>2018-07-26T15:11:00+01:00</published><updated>2018-07-26T15:11:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-07-26:/programming-notes-blog/matlab.html</id><summary type="html">&lt;p&gt;This example shows how to create a Python package using a &lt;span class="caps"&gt;MATLAB&lt;/span&gt; function. You can then pass the generated package to the developer who is responsible for integrating it into an application. The target system does not require a licensed copy of &lt;span class="caps"&gt;MATLAB&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Matlab version with a license …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;This example shows how to create a Python package using a &lt;span class="caps"&gt;MATLAB&lt;/span&gt; function. You can then pass the generated package to the developer who is responsible for integrating it into an application. The target system does not require a licensed copy of &lt;span class="caps"&gt;MATLAB&lt;/span&gt;.&lt;/p&gt;
&lt;h2&gt;Requirements&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;A Matlab version with a license for &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Compiler or &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Compiler &lt;span class="caps"&gt;SDK&lt;/span&gt; to compile the Python&amp;nbsp;package.&lt;/li&gt;
&lt;li&gt;The target computer (where the final application will run) does not require Matlab or a Matlab Licence. However, it requires the Matlab Runtime (free, &lt;a href="https://www.mathworks.com/products/compiler/matlab-runtime.html"&gt;download here&lt;/a&gt;) of the same version of the Matlab used to compile the application. For instance, if the package was compiled in Matlab 2018a the target computer must have Matlab Runtime version 2018a&amp;nbsp;installed&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1) Create a Python package for the Maltab&amp;nbsp;Application&lt;/h2&gt;
&lt;p&gt;For this example let&amp;#8217;s create a simple Matlab function and save it as &lt;code&gt;makesqr.m&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;function&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;y &lt;span class="p"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;makesqr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;x&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="p"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;magic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now lets create the Python package. Enter &lt;code&gt;libraryCompiler&lt;/code&gt; at the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; prompt to open the Library Compiler. To use the Library Compiler you need a license for &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Compiler or &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Compiler &lt;span class="caps"&gt;SDK&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;In the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Compiler project window, specify the main file of the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; application that you want to deploy. Select whether to include the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime installer in the generated application by selecting one of the two options in the Packaging Options&amp;nbsp;section:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Runtime downloaded from web — Generates an installer that downloads the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime and installs it along with the deployed &lt;span class="caps"&gt;MATLAB&lt;/span&gt;&amp;nbsp;application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime included in package — Generates an application that includes the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime&amp;nbsp;installer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Fill in the remaining fields. For this example lets edit the Library Name field, replacing makesqr with &lt;code&gt;MagicSquarePkg&lt;/code&gt;. &lt;/p&gt;
&lt;p&gt;To generate the packaged application, click Package. When the deployment process is complete, the output folder&amp;nbsp;contains:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for_redistribution — Folder containing the file that installs the application and the &lt;span class="caps"&gt;MATLAB&lt;/span&gt;&amp;nbsp;Runtime.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for_testing — Folder containing all the artifacts created by mcc, such as binaries and &lt;span class="caps"&gt;JAR&lt;/span&gt;, header, and source files for a specific target. Use these files to test the&amp;nbsp;installation.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for_redistribution_files_only — Folder containing the files required for redistributing the application. Distribute these files to users who have &lt;span class="caps"&gt;MATLAB&lt;/span&gt; or &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime installed on their&amp;nbsp;machines.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PackagingLog.txt — Log file generated by &lt;span class="caps"&gt;MATLAB&lt;/span&gt;&amp;nbsp;Compiler.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;2) Set up the target computer (Ubuntu&amp;nbsp;server)&lt;/h2&gt;
&lt;p&gt;1) Make sure Python is installed. Python versions supported are versions 2.7, 3.5, and 3.6. For 64-bit &lt;span class="caps"&gt;MATLAB&lt;/span&gt;, the 64-bit Python version is&amp;nbsp;requiered.&lt;/p&gt;
&lt;p&gt;2) If necessary install setuptools for python: &lt;code&gt;sudo apt-get install python-setuptools&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3) Now we need to install the Matlab Runtime in the Ubuntu server. Download the it from the website at &lt;a href="https://www.mathworks.com/products/compiler/mcr"&gt;Mathworks&lt;/a&gt;. Make sure you download and install the version corresponding to the Matlab you used to create the Python&amp;nbsp;package.&lt;/p&gt;
&lt;p&gt;3) Start the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime installer.
    On Ubuntu: &lt;code&gt;sudo ./install&lt;/code&gt;
    On Debian: &lt;code&gt;gksudo ./install&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4) Follow the installation dialog&amp;nbsp;instructions.&lt;/p&gt;
&lt;h3&gt;Install the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime&amp;nbsp;Non-Interactively&lt;/h3&gt;
&lt;p&gt;To install the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime without having to interact with the installer dialog boxes (headless Ubuntu server for instance), use the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime installer’s non-interactive &lt;code&gt;silent&lt;/code&gt; mode. The installer runs as a background task and does not display any dialog boxes.
Extract the contents of the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime installer file to a temporary folder and run the &lt;span class="caps"&gt;MATLAB&lt;/span&gt; Runtime installer, specifying the -mode&amp;nbsp;option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./install -mode silent -agreeToLicense yes
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3) Create and install the Python application that will use the Matlab&amp;nbsp;function&lt;/h2&gt;
&lt;p&gt;To install the Python application, open a command prompt in the &lt;code&gt;for_redistribution_files_only&lt;/code&gt; folder and run the&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python setup.py install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create a file called getmagic.py, and include the following code in&amp;nbsp;it.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;MagicSquarePkg&lt;/span&gt;

&lt;span class="n"&gt;myMagic&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MagicSquarePkg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;myMagic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makesqr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;myMagic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;terminate&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At the system command prompt, navigate to the folder containing getmagic.py and run the application as&amp;nbsp;follows:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python getmagic.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Notes&lt;/h2&gt;
&lt;h4&gt;Uninstall &lt;span class="caps"&gt;MATLAB&lt;/span&gt;&amp;nbsp;Runtime&lt;/h4&gt;
&lt;p&gt;Exit the application and run the&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf mcr_root
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;where &lt;code&gt;mcr_root&lt;/code&gt; represents the name of your top-level &lt;span class="caps"&gt;MATLAB&lt;/span&gt; installation&amp;nbsp;folder.&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://www.mathworks.com/help/compiler_sdk/gs/create-a-python-application-with-matlab-code.html&lt;/li&gt;
&lt;li&gt;https://www.mathworks.com/help/matlab/matlab-engine-for-python.html&lt;/li&gt;
&lt;li&gt;https://www.mathworks.com/help/compiler/deployment-process.html&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Online Resources For Web Developers</title><link href="https://janiceto.github.io/programming-notes-blog/web-dev-resources.html" rel="alternate"></link><published>2018-07-16T21:53:00+01:00</published><updated>2019-01-13T21:44:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-07-16:/programming-notes-blog/web-dev-resources.html</id><summary type="html">&lt;h2&gt;&lt;span class="caps"&gt;GENERATORS&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Text Content Generator -&amp;nbsp;http://www.lipsum.com&lt;/li&gt;
&lt;li&gt;Favicon Generator -&amp;nbsp;http://tools.dynamicdrive.com/favicon     &lt;/li&gt;
&lt;li&gt;Data Generator -&amp;nbsp;https://mockaroo.com/                        &lt;/li&gt;
&lt;li&gt;Mobile Mockup Generator -&amp;nbsp;https://mockuphone.com&lt;/li&gt;
&lt;li&gt;Logo Generator -&amp;nbsp;https://www.logaster.com&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UUID&lt;/span&gt; Generator -&amp;nbsp;https://www.uuidgenerator.net/&lt;/li&gt;
&lt;li&gt;Hash Generator -&amp;nbsp;https://passwordsgenerator.net/sha256-hash-generator/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;FONTS&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google Fonts -&amp;nbsp;https://fonts.google …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;&lt;span class="caps"&gt;GENERATORS&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Text Content Generator -&amp;nbsp;http://www.lipsum.com&lt;/li&gt;
&lt;li&gt;Favicon Generator -&amp;nbsp;http://tools.dynamicdrive.com/favicon     &lt;/li&gt;
&lt;li&gt;Data Generator -&amp;nbsp;https://mockaroo.com/                        &lt;/li&gt;
&lt;li&gt;Mobile Mockup Generator -&amp;nbsp;https://mockuphone.com&lt;/li&gt;
&lt;li&gt;Logo Generator -&amp;nbsp;https://www.logaster.com&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;UUID&lt;/span&gt; Generator -&amp;nbsp;https://www.uuidgenerator.net/&lt;/li&gt;
&lt;li&gt;Hash Generator -&amp;nbsp;https://passwordsgenerator.net/sha256-hash-generator/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;FONTS&lt;/span&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Google Fonts -&amp;nbsp;https://fonts.google.com/&lt;/li&gt;
&lt;li&gt;Font Joy -&amp;nbsp;https://fontjoy.com/&lt;/li&gt;
&lt;li&gt;Font Pair -&amp;nbsp;https://fontpair.co/&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; symbols -&amp;nbsp;https://www.toptal.com/designers/htmlarrows/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;IMAGE&lt;/span&gt; &lt;span class="caps"&gt;RESOURCES&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Free Stock Images -&amp;nbsp;https://www.pexels.com&lt;/li&gt;
&lt;li&gt;Free Stock Images With Great &lt;span class="caps"&gt;API&lt;/span&gt; -&amp;nbsp;https://unsplash.com/&lt;/li&gt;
&lt;li&gt;Free- Vectors, mockups -&amp;nbsp;https://www.freepik.com&lt;/li&gt;
&lt;li&gt;Dummy Image Placeholders -&amp;nbsp;https://source.unsplash.com/&lt;/li&gt;
&lt;li&gt;Dummy Image Placeholders -&amp;nbsp;https://placeholder.com&lt;/li&gt;
&lt;li&gt;Free Icons -&amp;nbsp;https://www.iconfinder.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;COLOR&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;DESIGN&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Generate Color Palette from Image -&amp;nbsp;https://www.canva.com/color-palette/&lt;/li&gt;
&lt;li&gt;Color Palette Generator -&amp;nbsp;https://coolors.co/app&lt;/li&gt;
&lt;li&gt;Color Pallete Generator -&amp;nbsp;http://colormind.io/&lt;/li&gt;
&lt;li&gt;Create Color Schemes -&amp;nbsp;https://color.hailpixel.com&lt;/li&gt;
&lt;li&gt;Get Color Schemes of Websites -&amp;nbsp;http://stylifyme.com&lt;/li&gt;
&lt;li&gt;Create Gradients -&amp;nbsp;https://uigradients.com&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt; Button Generator -&amp;nbsp;http://css3buttongenerator.com &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;IMAGE&lt;/span&gt; &lt;span class="caps"&gt;COMPRESSION&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Compress All Images -&amp;nbsp;https://compressor.io/compress&lt;/li&gt;
&lt;li&gt;Compress &lt;span class="caps"&gt;JPG&lt;/span&gt; -&amp;nbsp;http://jpeg-optimizer.com/&lt;/li&gt;
&lt;li&gt;Compress &lt;span class="caps"&gt;PNG&lt;/span&gt; -&amp;nbsp;https://tinypng.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;CODE&lt;/span&gt; &lt;span class="caps"&gt;OPTIMIZATION&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Minify &lt;span class="caps"&gt;JS&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;CSS&lt;/span&gt; -&amp;nbsp;http://minifier.org&lt;/li&gt;
&lt;li&gt;Code Optimization Tools -&amp;nbsp;https://codebeautify.org&lt;/li&gt;
&lt;li&gt;Code Diff Checker -&amp;nbsp;https://www.diffchecker.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;CONVERTERS&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class="caps"&gt;ES6&lt;/span&gt;+ &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;JSX&lt;/span&gt; Compiler -&amp;nbsp;https://babeljs.io/repl&lt;/li&gt;
&lt;li&gt;Sass Converter -&amp;nbsp;https://www.sassmeister.com/           &lt;/li&gt;
&lt;li&gt;Less Converter &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; More -&amp;nbsp;http://www.webtoolkitonline.com   &lt;/li&gt;
&lt;li&gt;Markdown Editor -&amp;nbsp;https://stackedit.io&lt;/li&gt;
&lt;li&gt;Jade Converter -&amp;nbsp;http://www.html2jade.org/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;VALIDATION&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;COMPATIBILITY&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Validate &lt;span class="caps"&gt;HTML&lt;/span&gt; -&amp;nbsp;https://validator.w3.org&lt;/li&gt;
&lt;li&gt;Validate &lt;span class="caps"&gt;CSS&lt;/span&gt; -&amp;nbsp;https://jigsaw.w3.org/css-validator&lt;/li&gt;
&lt;li&gt;Check Browser Compatibility -&amp;nbsp;https://caniuse.com/&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;ES6&lt;/span&gt;+ Compatibility Table -&amp;nbsp;https://kangax.github.io/compat-table/es6/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;IN&lt;/span&gt; &lt;span class="caps"&gt;BROWSER&lt;/span&gt; &lt;span class="caps"&gt;CODING&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Client Side Code -&amp;nbsp;https://codepen.io&lt;/li&gt;
&lt;li&gt;Client Side Code -&amp;nbsp;https://jsfiddle.net&lt;/li&gt;
&lt;li&gt;Client Side Code -&amp;nbsp;http://liveweave.com&lt;/li&gt;
&lt;li&gt;Server Side Code -&amp;nbsp;https://repl.it&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SNIPPET&lt;/span&gt; &lt;span class="caps"&gt;TOOLS&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Snippet Manager -&amp;nbsp;https://gist.github.com&lt;/li&gt;
&lt;li&gt;Snippet Manager -&amp;nbsp;https://pastebin.com&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;WIREFRAME&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;In Browser Wireframing -&amp;nbsp;https://app.moqups.com&lt;/li&gt;
&lt;li&gt;Very Basic In Browser Wireframing -&amp;nbsp;https://wireframe.cc&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;RESPONSIVENESS&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Device Testing -&amp;nbsp;http://www.responsinator.com&lt;/li&gt;
&lt;li&gt;What&amp;#8217;s My Browser Size -&amp;nbsp;https://www.webpagefx.com/tools/whats-my-browser-size/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;SPEED&lt;/span&gt; &lt;span class="caps"&gt;TEST&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Speed &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; Performance Testing -&amp;nbsp;https://tools.keycdn.com/speed&lt;/li&gt;
&lt;li&gt;Pingdom Speed Test -&amp;nbsp;https://tools.pingdom.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;span class="caps"&gt;OTHER&lt;/span&gt;:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Public &lt;span class="caps"&gt;API&lt;/span&gt; Resources -&amp;nbsp;https://github.com/toddmotto/public-apis?utm_source=mybridge&amp;amp;utm_medium=blog&amp;amp;utm_campaign=read_more&lt;/li&gt;
&lt;li&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt; Entity Lookup -&amp;nbsp;http://entity-lookup.leftlogic.com/&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;References:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;https://gist.github.com/bradtraversy/61171a9b81586f5bc4c0ca1e2beb59ab&lt;/li&gt;
&lt;li&gt;https://www.youtube.com/watch?v=4JC8ahZneYU&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Deploy a Django app in an Ubuntu VPS (DigitalOcean)</title><link href="https://janiceto.github.io/programming-notes-blog/deploy-django.html" rel="alternate"></link><published>2018-06-06T23:29:00+01:00</published><updated>2018-06-13T14:31:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-06-06:/programming-notes-blog/deploy-django.html</id><summary type="html">&lt;p&gt;This guide will demonstrate how to install and configure some components on Ubuntu 16.04 to support and serve Django applications. We will be setting up a PostgreSQL database and configure the Gunicorn application server to interface with our applications. We will then set up Nginx to reverse proxy to …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This guide will demonstrate how to install and configure some components on Ubuntu 16.04 to support and serve Django applications. We will be setting up a PostgreSQL database and configure the Gunicorn application server to interface with our applications. We will then set up Nginx to reverse proxy to Gunicorn, giving us access to its security and performance features to serve our&amp;nbsp;apps.&lt;/p&gt;
&lt;h2&gt;1) Initial Server&amp;nbsp;Setup&lt;/h2&gt;
&lt;p&gt;Perform the initial server setup as detailed &lt;a href="server-setup.md"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;2) Install the Packages from the Ubuntu&amp;nbsp;Repositories&lt;/h2&gt;
&lt;p&gt;We need to update the local apt package index and then download and install the packages. The packages we install depend on which version of Python your project will&amp;nbsp;use.&lt;/p&gt;
&lt;p&gt;If you are using Django with Python 3,&amp;nbsp;type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get install python3-pip python3-dev libpq-dev nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will install pip, the Python development files needed to build Gunicorn later and the Nginx web&amp;nbsp;server.&lt;/p&gt;
&lt;h2&gt;3) Install the&amp;nbsp;Database&lt;/h2&gt;
&lt;p&gt;Install the database system and the libraries needed to interact with&amp;nbsp;it.&lt;/p&gt;
&lt;h4&gt;For&amp;nbsp;Postgres:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install postgresql postgresql-contrib&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;For&amp;nbsp;MySQL&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install libmysqlclient-dev
$ sudo apt-get install mysql-server mysql-client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now let&amp;#8217;s create the Database and User but first verify that the MySQL service is&amp;nbsp;running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl status mysql.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the output is negative you can run &lt;code&gt;sudo systemctl start mysql&lt;/code&gt; to get &lt;code&gt;mysql.service&lt;/code&gt; started again. Now you can log in with your MySQL credentials using the following command. Where &lt;code&gt;-u&lt;/code&gt; is the flag for declaring your username and &lt;code&gt;-p&lt;/code&gt; is the flag that tells MySQL that this user requires a&amp;nbsp;password:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo mysql -u db_user -p
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;CREATE&lt;/span&gt; &lt;span class="k"&gt;DATABASE&lt;/span&gt; &lt;span class="n"&gt;project_db&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;SHOW&lt;/span&gt; &lt;span class="k"&gt;DATABASES&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Whenever you&amp;#8217;d like to exit MySQL server, press &lt;span class="caps"&gt;CTRL&lt;/span&gt; +&amp;nbsp;D.&lt;/p&gt;
&lt;h2&gt;4) Create a Python Virtual&amp;nbsp;Environment&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo -H pip3 install --upgrade pip
$ sudo -H pip3 install virtualenv
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mkdir ~/myproject
$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/myproject
$ virtualenv venv
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note: Regardless of which version of Python you are using, when the virtual environment is activated, you should use the pip command (not&amp;nbsp;pip3).&lt;/p&gt;
&lt;p&gt;Install the &lt;code&gt;mysqlclient&lt;/code&gt; library:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install mysqlclient
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With your virtual environment active, install Django and&amp;nbsp;Gunicorn:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install django gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5) Create Django&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;Since we already have a project directory, we will tell Django to install the files here. It will create a second level directory with the actual code, which is normal, and place a management script in this directory. The key to this is that we are defining the directory explicitly instead of allowing Django to make decisions relative to our current&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ django-admin startproject myproject ~/myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;At this point, your project directory (~/myproject in our case) should have the following&amp;nbsp;content:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;~/myproject/manage.py: A Django project management script.
~/myproject/myproject/: The Django project package. This should contain the __init__.py, settings.py, urls.py, and wsgi.py files.
~/myproject/myprojectenv/: The virtual environment directory we created earlier.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Go to the end of the &lt;code&gt;settings.py&lt;/code&gt; file and add &lt;code&gt;STATIC_ROOT&lt;/code&gt; as shown&amp;nbsp;below:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Static files (CSS, JavaScript, Images)&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.0/howto/static-files/&lt;/span&gt;

&lt;span class="n"&gt;STATIC_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/static/&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;STATIC_ROOT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;static&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add your server’s &lt;span class="caps"&gt;IP&lt;/span&gt; address between the square brackets and single quotes to the &lt;code&gt;ALLOWED_HOSTS&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# The simplest case: just add the domain name(s) and IP addresses of your Django server&lt;/span&gt;
&lt;span class="c1"&gt;# ALLOWED_HOSTS = [ &amp;#39;example.com&amp;#39;, &amp;#39;203.0.113.5&amp;#39;]&lt;/span&gt;
&lt;span class="c1"&gt;# To respond to &amp;#39;example.com&amp;#39; and any subdomains, start the domain with a dot&lt;/span&gt;
&lt;span class="c1"&gt;# ALLOWED_HOSTS = [&amp;#39;.example.com&amp;#39;, &amp;#39;203.0.113.5&amp;#39;]&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;your_server_domain_or_IP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;second_domain_or_IP&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Migrate the initial database schema to our database using the management&amp;nbsp;script:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ python ~/myproject/manage.py makemigrations
(venv) $ python ~/myproject/manage.py migrate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create an administrative user for the project by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ ~/myproject/manage.py createsuperuser
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can collect all of the static content into the directory location we configured by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv) $ ~/myproject/manage.py collectstatic
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The static files will then be placed in a directory called static within your project&amp;nbsp;directory.&lt;/p&gt;
&lt;h4&gt;Connect your Django app to&amp;nbsp;MySQL&lt;/h4&gt;
&lt;p&gt;Navigate to the settings.py file and replace the current &lt;span class="caps"&gt;DATABASES&lt;/span&gt; lines with the following. We will configure your database dictionary so that it knows to use MySQL as your database backend and from what file to read your database connection&amp;nbsp;credentials:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Database&lt;/span&gt;
&lt;span class="c1"&gt;# https://docs.djangoproject.com/en/2.0/ref/settings/#databases&lt;/span&gt;

&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;OPTIONS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;read_default_file&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;/etc/mysql/my.cnf&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, let’s edit the config file so that it has your MySQL credentials. Use nano as sudo to edit the file and add the following&amp;nbsp;information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nano /etc/mysql/my.cnf
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[client]&lt;/span&gt;
&lt;span class="na"&gt;database&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;db_name&lt;/span&gt;
&lt;span class="na"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;db_user&lt;/span&gt;
&lt;span class="na"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;db_password&lt;/span&gt;
&lt;span class="na"&gt;default-character-set&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;utf8&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Where database name in our case is mysite, your username for the MySQL server is the one you’ve created, and the password is the MySQL server password you’ve created. Also, you’ll notice that utf8 is set as the default encoding, this is a common way to encode unicode data in MySQL. Once the file has been edited, we need to restart MySQL for the changes to take&amp;nbsp;effect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ systemctl daemon-reload
$ systemctl restart mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Please note that restarting MySQL takes a few seconds, so please be patient. Now, let&amp;#8217;s test the MySQL connection to the application. We need to verify that the configurations in Django detect your MySQL server properly. We can do this by simply running the server. If it fails, it means that the connection isn’t working properly. Otherwise, the connection is&amp;nbsp;valid.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/mysite/mysite/
$ python manage.py runserver your-server-ip:8000
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6) Setting up Gunicorn&amp;#8217;s ability to serve the&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;The last thing we want to do before leaving our virtual environment is test Gunicorn to make sure that it can serve the application. We can do this by entering our project directory and using gunicorn to load the project&amp;#8217;s &lt;span class="caps"&gt;WSGI&lt;/span&gt;&amp;nbsp;module:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; ~/myproject
$ gunicorn --bind &lt;span class="m"&gt;0&lt;/span&gt;.0.0.0:8000 myproject.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will start Gunicorn on the same interface that the Django development server was running on. You can go back and test the app&amp;nbsp;again. &lt;/p&gt;
&lt;p&gt;We passed Gunicorn a module by specifying the relative directory path to Django&amp;#8217;s wsgi.py file, which is the entry point to our application, using Python&amp;#8217;s module syntax. Inside of this file, a function called application is defined, which is used to communicate with the application. When you are finished testing, hit &lt;span class="caps"&gt;CTRL&lt;/span&gt;-C in the terminal window to stop Gunicorn. We&amp;#8217;re now finished configuring our Django application. We can back out of our virtual environment by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create and open a systemd service file for Gunicorn with sudo privileges in your text&amp;nbsp;editor:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nano /etc/systemd/system/gunicorn.service
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;gunicorn daemon&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;network.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;User&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;synergix&lt;/span&gt;
&lt;span class="na"&gt;Group&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;www-data&lt;/span&gt;
&lt;span class="na"&gt;WorkingDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/synergix/myproject&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/home/synergix/myproject/myprojectenv/bin/gunicorn --access-logfile - --workers 3 --bind unix:/home/synergix/myproject/myproject.sock myproject.wsgi:application&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can now start the Gunicorn service we created and enable it so that it starts at&amp;nbsp;boot:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl start gunicorn
$ sudo systemctl &lt;span class="nb"&gt;enable&lt;/span&gt; gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We can confirm that the operation was successful by checking for the socket&amp;nbsp;file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl status gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, check for the existence of the myproject.sock file within your project&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls /home/synergix/myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If the systemctl status command indicated that an error occurred or if you do not find the myproject.sock file in the directory, it&amp;#8217;s an indication that Gunicorn was not able to start correctly. Check the Gunicorn process logs by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo journalctl -u gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;7) Configure Nginx to Proxy Pass to&amp;nbsp;Gunicorn&lt;/h2&gt;
&lt;p&gt;Now that Gunicorn is set up, we need to configure Nginx to pass traffic to the process. Start by creating and opening a new server block in Nginx&amp;#8217;s sites-available&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nano /etc/nginx/sites-available/myproject
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Inside, open up a new server block. We will start by specifying that this block should listen on the normal port 80 and that it should respond to our server&amp;#8217;s domain name or &lt;span class="caps"&gt;IP&lt;/span&gt; address. Next, we will tell Nginx to ignore any problems with finding a favicon. We will also tell it where to find the static assets that we collected in our ~/myproject/static directory. All of these files have a standard &lt;span class="caps"&gt;URI&lt;/span&gt; prefix of &amp;#8220;/static&amp;#8221;, so we can create a location block to match those requests. Finally, we&amp;#8217;ll create a location / {} block to match all other requests. Inside of this location, we&amp;#8217;ll include the standard proxy_params file included with the Nginx installation and then we will pass the traffic to the socket that our Gunicorn process&amp;nbsp;created:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;server_domain_or_IP&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="err"&gt;/favicon.ico&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt; &lt;span class="err"&gt;access_log&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="err"&gt;log_not_found&lt;/span&gt; &lt;span class="err"&gt;off&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;root&lt;/span&gt; &lt;span class="err"&gt;/home/sammy/myproject&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;proxy_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;proxy_pass&lt;/span&gt; &lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="o"&gt;:/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sammy&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myproject&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;myproject&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Save and close the file when you are finished. Now, we can enable the file by linking it to the sites-enabled&amp;nbsp;directory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ln -s /etc/nginx/sites-available/myproject /etc/nginx/sites-enabled
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test your Nginx configuration for syntax errors by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nginx -t
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If no errors are reported, go ahead and restart Nginx by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl restart nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, we need to open up our firewall to normal traffic on port 80. Since we no longer need access to the development server, we can remove the rule to open port 8000 as&amp;nbsp;well:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo ufw delete allow &lt;span class="m"&gt;8000&lt;/span&gt;
$ sudo ufw allow &lt;span class="s1"&gt;&amp;#39;Nginx Full&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You should now be able to go to your server&amp;#8217;s domain or &lt;span class="caps"&gt;IP&lt;/span&gt; address to view your&amp;nbsp;application.&lt;/p&gt;
&lt;h2&gt;8)&amp;nbsp;Troubleshooting&lt;/h2&gt;
&lt;p&gt;Logs can help narrow down root causes. Check each of them in turn and look for messages indicating problem areas. The following logs may be&amp;nbsp;helpful:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Check the Nginx process logs by typing: &lt;code&gt;sudo journalctl -u nginx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the Nginx access logs by typing: &lt;code&gt;sudo less /var/log/nginx/access.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the Nginx error logs by typing: &lt;code&gt;sudo less /var/log/nginx/error.log&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Check the Gunicorn application logs by typing: &lt;code&gt;sudo journalctl -u gunicorn&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As you update your configuration or application, you will likely need to restart the processes to adjust to your changes. If you update your Django application, you can restart the Gunicorn process to pick up the changes by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl restart gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you change gunicorn systemd service file, reload the daemon and restart the process by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo systemctl daemon-reload
$ sudo systemctl restart gunicorn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you change the Nginx server block configuration, test the configuration and then Nginx by&amp;nbsp;typing:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nginx -t &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo systemctl restart nginx
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-set-up-django-with-postgres-nginx-and-gunicorn-on-ubuntu-16-04"&gt;DigitalOcean - Setup Django, Postgres, nginx and Gunicorn on&amp;nbsp;Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-serve-django-applications-with-uwsgi-and-nginx-on-ubuntu-16-04"&gt;DigitalOcean - Serve Django with uwsgi and ngix on&amp;nbsp;Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-create-a-django-app-and-connect-it-to-a-database"&gt;DigitalOcean - Create Django app and connect to&amp;nbsp;database&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Initial Server Setup with Ubuntu 18.04</title><link href="https://janiceto.github.io/programming-notes-blog/server-setup.html" rel="alternate"></link><published>2018-06-06T23:19:00+01:00</published><updated>2018-06-13T22:30:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-06-06:/programming-notes-blog/server-setup.html</id><summary type="html">&lt;p&gt;When first creating a new Ubuntu 18.04 server, there are a few configuration steps that you should take early on as part of the basic&amp;nbsp;setup.&lt;/p&gt;
&lt;h2&gt;1) Creating a New&amp;nbsp;User&lt;/h2&gt;
&lt;p&gt;Once you are logged in as root, we&amp;#8217;re prepared to add the new user (synergix) account that …&lt;/p&gt;</summary><content type="html">&lt;p&gt;When first creating a new Ubuntu 18.04 server, there are a few configuration steps that you should take early on as part of the basic&amp;nbsp;setup.&lt;/p&gt;
&lt;h2&gt;1) Creating a New&amp;nbsp;User&lt;/h2&gt;
&lt;p&gt;Once you are logged in as root, we&amp;#8217;re prepared to add the new user (synergix) account that we will use to log in from now&amp;nbsp;on.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;adduser synergix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Enter a strong password and, optionally, fill in any of the additional information if you would like. This is not required and you can just hit &lt;span class="caps"&gt;ENTER&lt;/span&gt; in any field you wish to&amp;nbsp;skip.&lt;/p&gt;
&lt;h2&gt;2) Granting Administrative&amp;nbsp;Privileges&lt;/h2&gt;
&lt;p&gt;Set up what is known as &amp;#8220;superuser&amp;#8221; or root privileges for our normal account. This will allow our normal user to run commands with administrative privileges by putting the word &lt;code&gt;sudo&lt;/code&gt; before each command. As &lt;strong&gt;root&lt;/strong&gt;, run this command to add your new user to the sudo&amp;nbsp;group:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;usermod -aG sudo synergix&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;3) Setting Up a Basic&amp;nbsp;Firewall&lt;/h2&gt;
&lt;p&gt;Ubuntu 18.04 servers can use the &lt;span class="caps"&gt;UFW&lt;/span&gt; firewall to make sure only connections to certain services are allowed. We can set up a basic firewall very easily using this&amp;nbsp;application.&lt;/p&gt;
&lt;p&gt;Different applications can register their profiles with &lt;span class="caps"&gt;UFW&lt;/span&gt; upon installation. These profiles allow &lt;span class="caps"&gt;UFW&lt;/span&gt; to manage these applications by name. OpenSSH, the service allowing us to connect to our server now, has a profile registered with &lt;span class="caps"&gt;UFW&lt;/span&gt;. You can see this by&amp;nbsp;typing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ufw app list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Afterwards, we can enable the firewall by&amp;nbsp;typing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ufw enable&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Type &amp;#8220;y&amp;#8221; and press &lt;span class="caps"&gt;ENTER&lt;/span&gt; to proceed. You can see that &lt;span class="caps"&gt;SSH&lt;/span&gt; connections are still allowed by&amp;nbsp;typing:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ufw status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;As the firewall is currently blocking all connections except for &lt;span class="caps"&gt;SSH&lt;/span&gt;, if you install and configure additional services, you will need to adjust the firewall settings to allow acceptable traffic in. More info here:&amp;nbsp;https://www.digitalocean.com/community/tutorials/ufw-essentials-common-firewall-rules-and-commands&lt;/p&gt;
&lt;h2&gt;4) Enabling External Access for Your Regular&amp;nbsp;User&lt;/h2&gt;
&lt;p&gt;Now that we have a regular user for daily use, we need to make sure we can &lt;span class="caps"&gt;SSH&lt;/span&gt; into the account directly. The process for configuring &lt;span class="caps"&gt;SSH&lt;/span&gt; access for your new user depends on whether your server&amp;#8217;s root account uses a password or &lt;span class="caps"&gt;SSH&lt;/span&gt; keys for&amp;nbsp;authentication.&lt;/p&gt;
&lt;h4&gt;If the Root Account Uses Password&amp;nbsp;Authentication&lt;/h4&gt;
&lt;p&gt;If you logged in to your root account using a password, then password authentication is enabled for &lt;span class="caps"&gt;SSH&lt;/span&gt;. You can &lt;span class="caps"&gt;SSH&lt;/span&gt; to your new user account by opening up a new terminal session and using &lt;span class="caps"&gt;SSH&lt;/span&gt; with your new&amp;nbsp;username:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh synergix@your_server_ip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;After entering your regular user&amp;#8217;s password, you will be logged in. You will be prompted for your regular user password when using sudo for the first time each session (and periodically&amp;nbsp;afterwards).&lt;/p&gt;
&lt;p&gt;To enhance your server&amp;#8217;s security, it is recommended to set up &lt;span class="caps"&gt;SSH&lt;/span&gt; keys instead of using password authentication:&amp;nbsp;https://www.digitalocean.com/community/tutorials/how-to-set-up-ssh-keys-on-ubuntu-1804&lt;/p&gt;
&lt;h4&gt;If the Root Account Uses &lt;span class="caps"&gt;SSH&lt;/span&gt; Key&amp;nbsp;Authentication&lt;/h4&gt;
&lt;p&gt;If you logged in to your root account using &lt;span class="caps"&gt;SSH&lt;/span&gt; keys, then password authentication is disabled for &lt;span class="caps"&gt;SSH&lt;/span&gt;. You will need to add a copy of your local public key to the new user&amp;#8217;s &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file to log in&amp;nbsp;successfully.&lt;/p&gt;
&lt;p&gt;Since your public key is already in the root account&amp;#8217;s &lt;code&gt;~/.ssh/authorized_keys&lt;/code&gt; file on the server, we can copy that file and directory structure to our new user account in our existing&amp;nbsp;session.&lt;/p&gt;
&lt;p&gt;The simplest way to copy the files with the correct ownership and permissions is with the &lt;code&gt;rsync&lt;/code&gt; command. This will copy the root user&amp;#8217;s .ssh directory, preserve the permissions, and modify the file owners, all in a single&amp;nbsp;command:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rsync --archive --chown=synergix:synergix ~/.ssh /home/synergix&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now, open up a new terminal session and using &lt;span class="caps"&gt;SSH&lt;/span&gt; with your new&amp;nbsp;username:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh synergix@your_server_ip&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You should be logged in to the new user account without using a&amp;nbsp;password. &lt;/p&gt;
&lt;h2&gt;5)&amp;nbsp;Other&lt;/h2&gt;
&lt;p&gt;Chose the timezone by running: &lt;code&gt;sudo dpkg-reconfigure tzdata&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;References:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-18-04&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Useful Python code snippets</title><link href="https://janiceto.github.io/programming-notes-blog/snippets.html" rel="alternate"></link><published>2018-06-03T14:27:00+01:00</published><updated>2018-06-06T13:49:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-06-03:/programming-notes-blog/snippets.html</id><summary type="html">&lt;p&gt;A collection of several code snippets of common or useful operation in&amp;nbsp;Python.&lt;/p&gt;
&lt;h2&gt;Remove dictionary from&amp;nbsp;list&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s how to remove a specific dictionary, or several dictionaries, from a list of dictionaries by a specific key. In the example below we are removing from the list all dictionaries which …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A collection of several code snippets of common or useful operation in&amp;nbsp;Python.&lt;/p&gt;
&lt;h2&gt;Remove dictionary from&amp;nbsp;list&lt;/h2&gt;
&lt;p&gt;Here&amp;#8217;s how to remove a specific dictionary, or several dictionaries, from a list of dictionaries by a specific key. In the example below we are removing from the list all dictionaries which have and &lt;code&gt;id&lt;/code&gt; key of &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;thelist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;paul&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;john&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}]&lt;/span&gt;

&lt;span class="n"&gt;thelist&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;thelist&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;List&amp;nbsp;Comprehension&lt;/h2&gt;
&lt;p&gt;Without list&amp;nbsp;comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [1, 4, 9, 16]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With list&amp;nbsp;comprehension:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;item&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;item&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# [1, 4, 9, 16]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Lambda&amp;nbsp;Functions&lt;/h2&gt;
&lt;p&gt;Lambda functions are used for creating small, one-time and anonymous function objects in Python. Basically, they let you create a function, without creating a function. Note that lambda functions can do everything that regular functions can do, as long as there’s just one expression. The basic syntax of lambda functions is: &lt;code&gt;lambda arguments: expression&lt;/code&gt;. And here is an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;double&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# 10&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Map and&amp;nbsp;Filter&lt;/h2&gt;
&lt;p&gt;Once you have a grasp on lambda functions, learning to pair them with the map and filter functions can be a powerful tool. Specifically, &lt;strong&gt;map&lt;/strong&gt; takes in a list and transforms it into a new list by performing some sort of operation on each element. In this example, it goes through each element and maps the result of itself times 2 to a new list. Note that the list function simply converts the output to list&amp;nbsp;type.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;map&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
 &lt;span class="c1"&gt;#[2, 4, 6, 8, 10]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;strong&gt;filter&lt;/strong&gt; function takes in a list and a rule, much like map, however it returns a subset of the original list by comparing each element against the boolean filtering&amp;nbsp;rule.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="c1"&gt;# [3, 4, 5]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="http://www.youtube.com/watch?v=cKlnR-CB3tk" title="Python: Lambda, Map, Filter, Reduce Functions"&gt;&lt;img alt="IMAGE ALT TEXT" src="http://img.youtube.com/vi/cKlnR-CB3tk/0.jpg"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;Arange and&amp;nbsp;Linspace&lt;/h2&gt;
&lt;p&gt;For creating quick and easy Numpy arrays, look no further than the arange and linspace functions. Each one has their specific purpose, but the appeal here (instead of using range), is that they output NumPy arrays, which are typically easier to work with for data&amp;nbsp;science.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Arange&lt;/strong&gt; returns evenly spaced values within a given interval. Along with a starting and stopping point, you can also define a step size or data type if necessary. Note that the stopping point is a ‘cut-off’ value, so it will not be included in the array&amp;nbsp;output.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# np.arange(start, stop, step)&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;arange&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# array([3, 5])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Linspace&lt;/strong&gt; is very similar, but with a slight twist. Linspace returns evenly spaced numbers over a specified interval. So given a starting and stopping point, as well as a number of values, linspace will evenly space them out for you in a NumPy array. This is especially helpful for data visualizations and declaring axes when&amp;nbsp;plotting.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# np.linspace(start, stop, num)&lt;/span&gt;
&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;linspace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# array([ 2.0,  2.25,  2.5,  2.75, 3.0])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>CSV files</title><link href="https://janiceto.github.io/programming-notes-blog/csv.html" rel="alternate"></link><published>2018-04-19T16:57:00+01:00</published><updated>2018-04-19T16:57:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-04-19:/programming-notes-blog/csv.html</id><summary type="html">&lt;p&gt;&lt;span class="caps"&gt;CSV&lt;/span&gt; (Comma Separated Values) is a very popular import and export data format used in spreadsheets and databases. Each line in a &lt;span class="caps"&gt;CSV&lt;/span&gt; file is a data record. Each record consists of one or more fields, separated by commas. While &lt;span class="caps"&gt;CSV&lt;/span&gt; is a very simple data format, there can be …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;span class="caps"&gt;CSV&lt;/span&gt; (Comma Separated Values) is a very popular import and export data format used in spreadsheets and databases. Each line in a &lt;span class="caps"&gt;CSV&lt;/span&gt; file is a data record. Each record consists of one or more fields, separated by commas. While &lt;span class="caps"&gt;CSV&lt;/span&gt; is a very simple data format, there can be many differecies, such as different delimiters, new lines, or quoting&amp;nbsp;characters.&lt;/p&gt;
&lt;h2&gt;Reading &lt;span class="caps"&gt;CSV&lt;/span&gt;&amp;nbsp;files&lt;/h2&gt;
&lt;p&gt;Reading of &lt;span class="caps"&gt;CSV&lt;/span&gt; files into&amp;nbsp;memory:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# example1.csv
1/2/2014,5,8,red
1/3/2014,5,2,green
1/4/2014,9,1,blue
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;example1.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;readCSV&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;csvfile&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;delimiter&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;readCSV&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;DictReader&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;csv.DictReader&lt;/code&gt; class operates like a regular reader but maps the information read into a dictionary. The keys for the dictionary can be passed in with the fieldnames parameter or inferred from the first row of the &lt;span class="caps"&gt;CSV&lt;/span&gt;&amp;nbsp;file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# example2.csv
min,avg,max
1, 5.5, 10
2, 3.5, 5
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;values.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;reader&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictReader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;avg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Writing to &lt;span class="caps"&gt;CSV&lt;/span&gt;&amp;nbsp;files&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;csv.writer()&lt;/code&gt; method returns a writer object which converts the user&amp;#8217;s data into delimited strings on the given file-like&amp;nbsp;object.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="n"&gt;nms&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;numbers2.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;nms&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;DictWriter&lt;/h3&gt;
&lt;p&gt;The csv.DictWriter class operates like a regular writer but maps Python dictionaries into &lt;span class="caps"&gt;CSV&lt;/span&gt; rows. The fieldnames parameter is a sequence of keys that identify the order in which values in the dictionary passed to the writerow() method are written to the &lt;span class="caps"&gt;CSV&lt;/span&gt;&amp;nbsp;file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;csv&lt;/span&gt;

&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;names.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;fnames&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;csv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DictWriter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fieldnames&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fnames&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;    

    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writeheader&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# writes the headers to the CSV file.&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;John&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Smith&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Robert&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Brown&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;writer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;writerow&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;first_name&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Julia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last_name&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Griffin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Quoting &lt;span class="caps"&gt;CSV&lt;/span&gt;&amp;nbsp;Files&lt;/h2&gt;
&lt;p&gt;With the &lt;span class="caps"&gt;CSV&lt;/span&gt; module, you can also perform a variety of quoting&amp;nbsp;functions.&lt;/p&gt;
&lt;p&gt;They&amp;nbsp;are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;csv.QUOTE_ALL&lt;/code&gt; - Quote everything, regardless of&amp;nbsp;type.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv.QUOTE_MINIMAL&lt;/code&gt; - Quote fields with special&amp;nbsp;characters&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv.QUOTE_NONNUMERIC&lt;/code&gt; - Quote all fields that are not integers or&amp;nbsp;floats&lt;/li&gt;
&lt;li&gt;&lt;code&gt;csv.QUOTE_NONE&lt;/code&gt; - Do not quote anything on&amp;nbsp;output&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Building a Django site</title><link href="https://janiceto.github.io/programming-notes-blog/django.html" rel="alternate"></link><published>2018-04-03T17:23:00+01:00</published><updated>2018-07-09T17:48:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-04-03:/programming-notes-blog/django.html</id><summary type="html">&lt;h2&gt;Installing&amp;nbsp;Django&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install Django&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Start&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;Navigate via the terminal or command prompt to an area where you want to work on your project, then&amp;nbsp;do:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django-admin startproject mysite&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will create a directory called mysite. Within that directory, you have another one called mysite, along with a manage …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Installing&amp;nbsp;Django&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;pip install Django&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Start&amp;nbsp;project&lt;/h2&gt;
&lt;p&gt;Navigate via the terminal or command prompt to an area where you want to work on your project, then&amp;nbsp;do:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;django-admin startproject mysite&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;This will create a directory called mysite. Within that directory, you have another one called mysite, along with a manage.py file. The manage.py file lets you easily interact with your project via the command line. The contents of the second mysite directory contain your settings and urls mainly. Broken&amp;nbsp;down:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/mysite/  REM Simple container, Call whatever you want.
    manage.py  REM Lets you interact with your project via the command line.
    /mysite/  REM Actual project directory.
        __init__.py  REM Tells python this is a Python package.
        settings.py  REM Settings for the project.
        urls.py  REM URL rules. Django docs aptly describes as your table of contents.
        wsgi.py  REM WSGI magic begins here. Worry about this when it comes time to actually deploy to a server.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The paradigm of Django is that either a website is an app, or a collection of apps in most cases. We currently have our website, called &amp;#8220;mysite&amp;#8221; for now. For now, run the following via the command line or terminal to run the local development server, which you can reach at&amp;nbsp;http://127.0.0.1:8000. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;cd mysite
python manage.py runserver
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Create an&amp;nbsp;app&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;python manage.py startapp webapp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Now a new directory exists, called webapp. In here, we see a lot of similar files, and some new&amp;nbsp;ones:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;webapp/
    migrations/ 
    __init__.py
    admin.py
    apps.py
    models.py
    tests.py
    views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, we need to include our new app in our installed&amp;nbsp;applications:&lt;/p&gt;
&lt;p&gt;Open the &lt;code&gt;mysite/settings.py&lt;/code&gt; file and add the &lt;code&gt;'webapp'&lt;/code&gt; line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# ...this is just a slice of code within settings.py &lt;/span&gt;
&lt;span class="c1"&gt;# do not delete the other code&lt;/span&gt;
&lt;span class="c1"&gt;# just add &amp;#39;webapp&amp;#39; to the list.&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;webapp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.admin&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.auth&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.contenttypes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.sessions&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.messages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;django.contrib.staticfiles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Make migrations&amp;nbsp;(databases)&lt;/h3&gt;
&lt;p&gt;Whenever you define new models, you need to&amp;nbsp;migrate: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py makemigrations&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;makemigrations&lt;/code&gt; command tells Django that you&amp;#8217;ve made some model changes, and you want to save them as a migration. Migrations are used any time you want Django to recognize changes to the models and database schema. &lt;strong&gt;Adding data to an existing database table, for example, is not something that needs a migration, changing that table&amp;#8217;s structure (by changing the model), would require a migration.&lt;/strong&gt; You can also tell Django you want to make migrations for only a specific app, like: &lt;code&gt;python manage.py makemigrations webapp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Once you&amp;#8217;ve made migrations, nothing has actually happened yet. You can run a migrate, but there is one more check you can make. This will output the proposed &lt;span class="caps"&gt;SQL&lt;/span&gt; that will be run for you by Django when you migrate. The &lt;code&gt;0001&lt;/code&gt; is the migration &lt;span class="caps"&gt;ID&lt;/span&gt;. You can see this on the &lt;code&gt;0001_initial.py&lt;/code&gt; file in the migrations folder of your&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py sqlmigrate webapp 0001&lt;/code&gt; (Optional)&lt;/p&gt;
&lt;p&gt;If all looks good, you can run the &lt;code&gt;migrate&lt;/code&gt; command. This will actually perform the migrations. If this is your first time doing this, you should see quite a bit has been&amp;nbsp;migrated.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Admin control&amp;nbsp;panel&lt;/h3&gt;
&lt;p&gt;To access the admin page, you visit /admin/, assuming the admin app is indeed installed. To login to the admin panel you need to create an&amp;nbsp;user:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python manage.py createsuperuser&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To register a model create a webapp/admin.py file, and in it&amp;nbsp;put:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.contrib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;admin&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;webapp.models&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Post&lt;/span&gt;

&lt;span class="n"&gt;admin&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;register&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Post&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here, we are importing the admin, the Post model, and then we&amp;#8217;re registering the Post&amp;nbsp;model.&lt;/p&gt;
&lt;h2&gt;Using MySQL&amp;nbsp;database&lt;/h2&gt;
&lt;p&gt;By default Django works with SQLite database management system. First, create the MySQL database using the MySQL&amp;nbsp;shell: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREATE DATABASE django_db;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To use MySQL in Django, instead of SQLite, do the&amp;nbsp;following:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pip install mysqlclient&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Go to the main &lt;code&gt;settings.py&lt;/code&gt; file and modify the &lt;span class="caps"&gt;DATABASES&lt;/span&gt; section&amp;nbsp;to:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.mysql&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django_db&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;123456&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can run the migrate command to create all tables Django needs: &lt;code&gt;python manage.py migrate&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Django authentication&amp;nbsp;system&lt;/h2&gt;
&lt;p&gt;Base project struture for this&amp;nbsp;section:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;mysite/
  manage.py

  mysite/
    __init__.py
    settings.py
    urls.py
    wsgi.py

  app1/
    __init__.py
    admin.py
    apps.py
    migrations/
    models.py
    tests.py
    views.py
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mysite/urls.py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# mysite/urls.py&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
  &lt;span class="o"&gt;...&lt;/span&gt;
  &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;accounts/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;django&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;contrib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;auth&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;urls&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Performing &lt;span class="caps"&gt;AJAX&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt; Requests in&amp;nbsp;Django&lt;/h2&gt;
&lt;p&gt;Ref:&amp;nbsp;http://coreymaynard.com/blog/performing-ajax-post-requests-in-django/&lt;/p&gt;
&lt;p&gt;A common pitfall that shows up when developing a Django application is when you try and make your first &lt;span class="caps"&gt;POST&lt;/span&gt; request to your server from &lt;span class="caps"&gt;AJAX&lt;/span&gt;. As a response you receive a helpful 403 &lt;span class="caps"&gt;FORBIDDEN&lt;/span&gt; notice, and not much other information. There&amp;#8217;s a fairly simple way of handling this issue in a seamless&amp;nbsp;fashion,.&lt;/p&gt;
&lt;p&gt;Firstly, let&amp;#8217;s discuss the actual problem that is causing this. Django comes with a security feature called Cross Site Request Forgery protection. A &lt;span class="caps"&gt;CSRF&lt;/span&gt; attack is when some external malicious site contains a link with some JavaScript that is intended to perform an action on your web site using the credentials of a logged-in-user who visited the malicious site in their browser. To protect against this, Django adds a &lt;span class="caps"&gt;CSRF&lt;/span&gt; token to every request that must be included with every unsafe &lt;span class="caps"&gt;HTTP&lt;/span&gt; request method (&lt;span class="caps"&gt;POST&lt;/span&gt;, &lt;span class="caps"&gt;PUT&lt;/span&gt;, and &lt;span class="caps"&gt;DELETE&lt;/span&gt;). This random string is verified upon every request, and if it is not valid (or not present) the server will respond with 403 &lt;span class="caps"&gt;FORBIDDEN&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;So, assuming you already have a Django project all setup and ready to go, we&amp;#8217;re going to create a view and a template to show the &lt;span class="caps"&gt;POST&lt;/span&gt; request in action. Just to keep things simple, we&amp;#8217;re going to do this in a separate app, so go ahead and create a new app and add it to your INSTALLED_APPS list. Inside of that app let&amp;#8217;s modify the views file and make it look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.views.generic&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;TemplateView&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.http&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;PostExample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;TemplateView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;template_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;start.html&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;post&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dumps&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}),&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What we&amp;#8217;re doing here is creating an incredibly basic view that on a &lt;span class="caps"&gt;GET&lt;/span&gt; request will respond with the &lt;code&gt;start.html&lt;/code&gt; template and on a post request will respond with a hard coded &lt;span class="caps"&gt;JSON&lt;/span&gt; dictionary. Now we need to add the &lt;span class="caps"&gt;URL&lt;/span&gt; for this view to the&amp;nbsp;project:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sa"&gt;r&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;^$&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;PostExample&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_view&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test-start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The template we&amp;#8217;re going to develop here will be equally simple, let&amp;#8217;s start with the&amp;nbsp;following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{{ STATIC_URL }}js/jquery-1.11.1.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;#post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;click&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;preventDefault&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajax&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;dataType&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;json&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;url&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;/test/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nx"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;console&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;result&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;head&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;PostExample&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;h1&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;post&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;Post Request&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;a&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;p&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;body&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;html&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you were to go to that page and click the link, you instead of a lovely &lt;span class="caps"&gt;JSON&lt;/span&gt; response you would see the 403 &lt;span class="caps"&gt;FORBIDDEN&lt;/span&gt; notice. Let&amp;#8217;s take care of that. The way to solve this is by overriding the jQuery beforeSend method on an &lt;span class="caps"&gt;AJAX&lt;/span&gt; query and grabbing the &lt;span class="caps"&gt;CSRF&lt;/span&gt; token embedded in the request and including it in the &lt;span class="caps"&gt;POST&lt;/span&gt; headers. Create a new JavaScript file and add the following to it, and make sure to include it into your&amp;nbsp;template:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;getCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookieValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;null&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;cookie&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;jQuery&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookies&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
            &lt;span class="c1"&gt;// Does this cookie string begin with the name we want?&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;=&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="nx"&gt;cookieValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;decodeURIComponent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;cookie&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;substring&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;cookieValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;ajaxSetup&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;
    &lt;span class="nx"&gt;beforeSend&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sr"&gt;/^http:.*/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="sr"&gt;/^https:.*/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;test&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;settings&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="c1"&gt;// Only send the token to relative URLs i.e. locally.&lt;/span&gt;
            &lt;span class="nx"&gt;xhr&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setRequestHeader&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;X-CSRFToken&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;getCookie&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;csrftoken&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;With that being done, all you have to do is add the &lt;span class="caps"&gt;CSRF&lt;/span&gt; token into the template like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{% raw %}{% csrf_token %}{% endraw %}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That takes care of it! You can now make &lt;span class="caps"&gt;AJAX&lt;/span&gt; &lt;span class="caps"&gt;POST&lt;/span&gt; requests from within your application, without doing any specific work on a per instance&amp;nbsp;basis.&lt;/p&gt;</content></entry><entry><title>Progress Bars</title><link href="https://janiceto.github.io/programming-notes-blog/progress-bar.html" rel="alternate"></link><published>2018-02-28T16:59:00+00:00</published><updated>2018-02-28T16:59:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-02-28:/programming-notes-blog/progress-bar.html</id><summary type="html">&lt;h2&gt;Basic progress&amp;nbsp;bar&lt;/h2&gt;
&lt;p&gt;There are many progressbars out there for Python, but they are dependencies, and this can be really annoying, especially when it is hard to install pip&amp;nbsp;libraries.&lt;/p&gt;
&lt;p&gt;To make any progressbar, you need to know the string option &lt;code&gt;\r&lt;/code&gt;. What makes &lt;code&gt;\r&lt;/code&gt; unique is that it will …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Basic progress&amp;nbsp;bar&lt;/h2&gt;
&lt;p&gt;There are many progressbars out there for Python, but they are dependencies, and this can be really annoying, especially when it is hard to install pip&amp;nbsp;libraries.&lt;/p&gt;
&lt;p&gt;To make any progressbar, you need to know the string option &lt;code&gt;\r&lt;/code&gt;. What makes &lt;code&gt;\r&lt;/code&gt; unique is that it will go to the start of&amp;nbsp;printing.&lt;/p&gt;
&lt;p&gt;For example, if you were to do &lt;code&gt;print('Hello World!')&lt;/code&gt;, it would print Hello World!. To visualize it, it is more&amp;nbsp;like&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hello World!
            ^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The cursor is at the character after the !. If we were to use &lt;code&gt;\r&lt;/code&gt;, the cursor would go to the front. In our example, it would&amp;nbsp;mean&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hello World!
^
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See how the cursor is at the h? If it were to print anything, it would overwrite the character&amp;nbsp;h.&lt;/p&gt;
&lt;p&gt;Theoretically, if we want to make a progressbar, we have to print a string multiple times with &lt;code&gt;\r&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# how many times the loop has looped&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# will repeat whatever is below 10 times.&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Happened &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; times.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#happened x times&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#this is the same as times = times + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, if we run this, there will be an error. Each line will print on a new&amp;nbsp;line.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Happened 1 times.
Happened 2 times.
Happened 3 times.
Happened 4 times.
Happened 5 times.
Happened 6 times.
Happened 7 times.
Happened 8 times.
Happened 9 times.
Happened 10 times.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This is because the print function adds &lt;code&gt;\n&lt;/code&gt; to the end of every string that is printed. Theoretically, it is printing &lt;code&gt;'\rHappened '+str(times)+' times.\n'&lt;/code&gt;. We do not want &lt;code&gt;\n&lt;/code&gt; to be added, so to fix this, write &lt;code&gt;print('\rHappened '+str(times)+' times.', end = '')&lt;/code&gt;. This makes it so that print will add &lt;code&gt;''&lt;/code&gt; to the end of every string, which is equal to nothing. Finally if you&amp;nbsp;run&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# how many times the loop has looped&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# will repeat whatever is below 10 times.&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Happened &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; times.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#happened x times&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#this is the same as times = times + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You will get just one line of text. The only problem is that it happens so quickly, that you cannot see the bar updating. Try making it loop 1000000&amp;nbsp;times.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# how many times the loop has looped&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# will repeat whatever is below 1000000 times.&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Happened &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; times.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#happened x times&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#this is the same as times = times + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can see the text&amp;nbsp;changing.&lt;/p&gt;
&lt;p&gt;Finally, you want to make sure to run &lt;code&gt;times = 1&lt;/code&gt; every time you use this progressbar so that the number restarts at 1. You can also change the text to say whatever you&amp;nbsp;want.&lt;/p&gt;
&lt;p&gt;To do a basic x/total bar, just add a bit of text that says the&amp;nbsp;total:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# how many times the loop has looped&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# will repeat whatever is below 1000000 times.&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Happened &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/1000000 times.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#happened x times&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#this is the same as times = times + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For basic&amp;nbsp;programmers:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;basic_function&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="nb"&gt;sum&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reps&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; &lt;span class="c1"&gt;# will repeat whatever is below reps times.&lt;/span&gt;
        &lt;span class="n"&gt;basic_function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\r&lt;/span&gt;&lt;span class="s1"&gt;Happened &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;times&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;reps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; times.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;#happened x times&lt;/span&gt;
        &lt;span class="n"&gt;times&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;#this is the same as times = times + 1&lt;/span&gt;

&lt;span class="n"&gt;counter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Just replace whatever is in basic_function with whatever you want to&amp;nbsp;happen&lt;/p&gt;
&lt;p&gt;If you are on Python2, enter in from &lt;code&gt;__future__ import print_function&lt;/code&gt; at the top of the file/first thing on your&amp;nbsp;interpter&lt;/p&gt;
&lt;h2&gt;Using &lt;a href="https://github.com/tqdm/tqdm"&gt;tqdm&lt;/a&gt;&amp;nbsp;library&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;tqdm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;

&lt;span class="n"&gt;alist&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;thing&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;tqdm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;alist&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;thing&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# or whatever you do...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Hiding Passwords and Secret Keys in Environment Variables</title><link href="https://janiceto.github.io/programming-notes-blog/os-env-vars.html" rel="alternate"></link><published>2018-02-02T13:31:00+00:00</published><updated>2018-02-02T13:31:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-02-02:/programming-notes-blog/os-env-vars.html</id><summary type="html">&lt;h3&gt;Adding a Environment Variable&amp;nbsp;(Windows)&lt;/h3&gt;
&lt;p&gt;System Menu &amp;gt; &lt;code&gt;Advanced System Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Environment Variables...&lt;/code&gt; &amp;gt; in User Variables click &lt;code&gt;New...&lt;/code&gt; &amp;gt; insert variable name (VAR_NAME) and value&amp;nbsp;(VAR_VALUE)&lt;/p&gt;
&lt;p&gt;When coding it may be necessary to restart your &lt;span class="caps"&gt;IDE&lt;/span&gt; or text&amp;nbsp;editor.&lt;/p&gt;
&lt;h3&gt;Adding a Environment Variable (Linux and&amp;nbsp;Mac)&lt;/h3&gt;
&lt;p&gt;Open the&amp;nbsp;terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; 
$ nano .bash_profile …&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Adding a Environment Variable&amp;nbsp;(Windows)&lt;/h3&gt;
&lt;p&gt;System Menu &amp;gt; &lt;code&gt;Advanced System Settings&lt;/code&gt; &amp;gt; &lt;code&gt;Environment Variables...&lt;/code&gt; &amp;gt; in User Variables click &lt;code&gt;New...&lt;/code&gt; &amp;gt; insert variable name (VAR_NAME) and value&amp;nbsp;(VAR_VALUE)&lt;/p&gt;
&lt;p&gt;When coding it may be necessary to restart your &lt;span class="caps"&gt;IDE&lt;/span&gt; or text&amp;nbsp;editor.&lt;/p&gt;
&lt;h3&gt;Adding a Environment Variable (Linux and&amp;nbsp;Mac)&lt;/h3&gt;
&lt;p&gt;Open the&amp;nbsp;terminal:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; 
$ nano .bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To the file add the line and&amp;nbsp;save:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export VAR_NAME=&amp;quot;VAR_VALUE&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When coding it may be necessary to restart your &lt;span class="caps"&gt;IDE&lt;/span&gt; or text&amp;nbsp;editor.&lt;/p&gt;
&lt;h3&gt;Acessing your Environment Variables in&amp;nbsp;Python&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="n"&gt;var1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;environ&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;VAR_NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Deploy a Flask Application on an Ubuntu VPS (DigitalOcean)</title><link href="https://janiceto.github.io/programming-notes-blog/ubuntu-vps.html" rel="alternate"></link><published>2018-01-25T14:14:00+00:00</published><updated>2018-01-25T14:14:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-01-25:/programming-notes-blog/ubuntu-vps.html</id><summary type="html">&lt;p&gt;This page details the process of seting up a Ubuntu &lt;span class="caps"&gt;VPS&lt;/span&gt; (in this case a DigitalOcean dropplet using Ubuntu 16.04 was used) to serve a Flask based websiite. MySQL databases are&amp;nbsp;used.&lt;/p&gt;
&lt;h2&gt;1) Install&amp;nbsp;Apache&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can do a …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This page details the process of seting up a Ubuntu &lt;span class="caps"&gt;VPS&lt;/span&gt; (in this case a DigitalOcean dropplet using Ubuntu 16.04 was used) to serve a Flask based websiite. MySQL databases are&amp;nbsp;used.&lt;/p&gt;
&lt;h2&gt;1) Install&amp;nbsp;Apache&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get upgrade
$ sudo apt-get install apache2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can do a spot check right away to verify that everything went as planned by visiting your server&amp;#8217;s public &lt;span class="caps"&gt;IP&lt;/span&gt; address in your web browser. You will see the default Ubuntu 16.04 Apache web&amp;nbsp;page.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;http://your_server_IP_address
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;How To Find your Server&amp;#8217;s Public &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;Address&lt;/h3&gt;
&lt;p&gt;Usually, this is the address you use to connect to your server through &lt;span class="caps"&gt;SSH&lt;/span&gt;. However you can find the &lt;span class="caps"&gt;IP&lt;/span&gt; address from the command line by typing&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ip addr show eth0 &lt;span class="p"&gt;|&lt;/span&gt; grep inet &lt;span class="p"&gt;|&lt;/span&gt; awk &lt;span class="s1"&gt;&amp;#39;{ print $2; }&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; sed &lt;span class="s1"&gt;&amp;#39;s/\/.*$//&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Alternatively you can use &lt;code&gt;curl&lt;/code&gt; to contact an outside party to tell you how it sees your server. You can do this by asking a specific server what your &lt;span class="caps"&gt;IP&lt;/span&gt; address&amp;nbsp;is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install curl
$ curl http://icanhazip.com
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;2) Install&amp;nbsp;MySQL&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install mysql-server mysql-client
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;During the installation, your server will ask you to select and confirm a password for the MySQL &amp;#8220;root&amp;#8221; user. This is an administrative account in MySQL that has increased privileges. Think of it as being similar to the root account for the server itself (the one you are configuring now is a MySQL-specific account, however). Make sure this is a strong, unique password, and do not leave it&amp;nbsp;blank.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Optional:&lt;/strong&gt; Run a simple security script that will remove some dangerous defaults and lock down access to our database system a little bit. See more info on this on reference&amp;nbsp;[2].&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ mysql_secure_installation
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;3) Install and enable&amp;nbsp;mod_wsgi&lt;/h2&gt;
&lt;p&gt;&lt;span class="caps"&gt;WSGI&lt;/span&gt; (Web Server Gateway Interface) is an interface between web servers and web apps for python. Mod_wsgi is an Apache &lt;span class="caps"&gt;HTTP&lt;/span&gt; server mod that enables Apache to serve Flask&amp;nbsp;applications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /var/www
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Copy in your Flask app directory struture. It should look like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|----FlaskApp
|---------FlaskApp
|--------------static
|--------------templates
|--------------__init__.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;4) Install Flask and&amp;nbsp;virtualenv&lt;/h2&gt;
&lt;p&gt;Install &lt;code&gt;pip&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install python-pip 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install &lt;code&gt;virtualenv&lt;/code&gt; and create a new virtual environment names &lt;code&gt;venv&lt;/code&gt; for the Flask&amp;nbsp;app&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install virtualenv 
$ &lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/FlaskApp/FlaskApp
$ sudo virtualenv venv
$ &lt;span class="nb"&gt;source&lt;/span&gt; venv/bin/activate 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Install &lt;code&gt;Flask&lt;/code&gt; and other necessary Flask plug-ins and&amp;nbsp;extensions&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo pip install Flask 
$ sudo pip install flask-mysqldb
$ sudo pip install Flask-WTF
$ sudo pip install passlib
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Test if the installation is successful and the app is&amp;nbsp;running:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo python __init__.py 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It should display “Running on http://localhost:5000/” or &amp;#8220;Running on http://127.0.0.1:5000/&amp;#8221;. If you see this message, you have successfully configured the&amp;nbsp;app.&lt;/p&gt;
&lt;p&gt;To deactivate the environment, give the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ deactivate
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;5) Configure and Enable a New Virtual&amp;nbsp;Host&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo nano /etc/apache2/sites-available/FlaskApp.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines of code to the file to configure the virtual host. Be sure to change the ServerName to your domain or cloud server&amp;#8217;s &lt;span class="caps"&gt;IP&lt;/span&gt;&amp;nbsp;address:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class="err"&gt;*:80&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        ServerName mywebsite.com
        ServerAlias www.mywebsite.com
        ServerAdmin admin@mywebsite.com
        WSGIScriptAlias / /var/www/FlaskApp/flaskapp.wsgi
        &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="err"&gt;/var/www/FlaskApp/FlaskApp&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            Order allow,deny
            Allow from all
        &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
        Alias /static /var/www/FlaskApp/FlaskApp/static
        &lt;span class="nt"&gt;&amp;lt;Directory&lt;/span&gt; &lt;span class="err"&gt;/var/www/FlaskApp/FlaskApp/static&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            Order allow,deny
            Allow from all
        &lt;span class="nt"&gt;&amp;lt;/Directory&amp;gt;&lt;/span&gt;
        ErrorLog &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/error.log
        LogLevel warn
        CustomLog &lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;APACHE_LOG_DIR&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/access.log combined
&lt;span class="nt"&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Enable the virtual host with the following&amp;nbsp;command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo a2ensite FlaskApp
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;6) Create the .wsgi&amp;nbsp;File&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; /var/www/FlaskApp
$ sudo nano flaskapp.wsgi 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add the following lines of code to the flaskapp.wsgi&amp;nbsp;file:&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt;1
2
3
4
5
6
7
8&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/usr/bin/python&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;sys&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basicConfig&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stream&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/var/www/FlaskApp/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;FlaskApp&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;application&lt;/span&gt;
&lt;span class="n"&gt;application&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Add your secret key&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;h2&gt;7) Restart&amp;nbsp;Apache&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo service apache2 restart 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To view your application, open your browser and navigate to the domain name or &lt;span class="caps"&gt;IP&lt;/span&gt; address that you entered in your virtual host&amp;nbsp;configuration.&lt;/p&gt;
&lt;h2&gt;Final directory&amp;nbsp;structure&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;|--------FlaskApp
|----------------FlaskApp
|-----------------------static
|-----------------------templates
|-----------------------venv
|-----------------------__init__.py
|----------------flaskapp.wsgi
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Useful&amp;nbsp;references:&lt;/h2&gt;
&lt;p&gt;1) &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-deploy-a-flask-application-on-an-ubuntu-vps"&gt;How To Deploy a Flask Application on an Ubuntu &lt;span class="caps"&gt;VPS&lt;/span&gt;&lt;/a&gt;
2) &lt;a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-ubuntu-16-04"&gt;How To Install Linux, Apache, MySQL, &lt;span class="caps"&gt;PHP&lt;/span&gt; (&lt;span class="caps"&gt;LAMP&lt;/span&gt;) stack on Ubuntu 16.04&lt;/a&gt;
3) &lt;a href="https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04"&gt;Initial Server Setup with Ubuntu 16.04&lt;/a&gt;
4) &lt;a href="blob/master/python/flask.md"&gt;Building a Flask&amp;nbsp;site&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>DataTables JS Library</title><link href="https://janiceto.github.io/programming-notes-blog/datatables.html" rel="alternate"></link><published>2018-01-21T00:49:00+00:00</published><updated>2018-01-21T00:49:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2018-01-21:/programming-notes-blog/datatables.html</id><summary type="html">&lt;p&gt;&lt;a href="https://datatables.net/manual/index"&gt;Documentation&amp;nbsp;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Requirements:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage:&lt;/h3&gt;
&lt;p&gt;Include the &lt;span class="caps"&gt;CSS&lt;/span&gt; and &lt;span class="caps"&gt;JS&lt;/span&gt; code for DataTables to the head and bottom of the body of your website, respectively. &lt;span class="caps"&gt;CSS&lt;/span&gt; is not&amp;nbsp;required.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{ url_for(&amp;#39;static&amp;#39;,filename=&amp;#39;style.css&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.datatables.net …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;&lt;a href="https://datatables.net/manual/index"&gt;Documentation&amp;nbsp;here&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Requirements:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;JQuery&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Usage:&lt;/h3&gt;
&lt;p&gt;Include the &lt;span class="caps"&gt;CSS&lt;/span&gt; and &lt;span class="caps"&gt;JS&lt;/span&gt; code for DataTables to the head and bottom of the body of your website, respectively. &lt;span class="caps"&gt;CSS&lt;/span&gt; is not&amp;nbsp;required.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;link&lt;/span&gt; &lt;span class="na"&gt;rel&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/css&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;{{ url_for(&amp;#39;static&amp;#39;,filename=&amp;#39;style.css&amp;#39;) }}&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt; 

&lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt; &lt;span class="na"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;src&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;https://cdn.datatables.net/1.10.16/js/jquery.dataTables.min.js&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;script&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Use the single function bellow to call to initialise the tabl. Do not forget to add an id tag to the&amp;nbsp;table.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#myTable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;DataTable&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Add options like&amp;nbsp;so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;document&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;ready&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;#myTable&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;DataTable&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;columnDefs&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
      &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;orderable&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;targets&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;paging&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;order&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[[&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;asc&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;]]&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Slice notation</title><link href="https://janiceto.github.io/programming-notes-blog/slice-notation.html" rel="alternate"></link><published>2017-12-15T14:57:00+00:00</published><updated>2017-12-15T14:57:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-12-15:/programming-notes-blog/slice-notation.html</id><summary type="html">&lt;p&gt;The &lt;span class="caps"&gt;ASCII&lt;/span&gt; art diagram is helpful too for remembering how slices&amp;nbsp;work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One way to remember how slices work is to think of the indices as pointing &lt;em&gt;between&lt;/em&gt; characters, with the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The &lt;span class="caps"&gt;ASCII&lt;/span&gt; art diagram is helpful too for remembering how slices&amp;nbsp;work:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;One way to remember how slices work is to think of the indices as pointing &lt;em&gt;between&lt;/em&gt; characters, with the left edge of the first character numbered 0. Then the right edge of the last character of a string of &lt;em&gt;n&lt;/em&gt; characters has index &lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# items start through end-1&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;    &lt;span class="c1"&gt;# items start through the rest of the array&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;      &lt;span class="c1"&gt;# items from the beginning through end-1&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:]&lt;/span&gt;         &lt;span class="c1"&gt;# a copy of the whole array&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There is also the &lt;code&gt;step&lt;/code&gt; value, which can be used with any of the&amp;nbsp;above:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;step&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# start through not past end, by step&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The key point to remember is that the &lt;code&gt;:end&lt;/code&gt; value represents the first value that is &lt;em&gt;not&lt;/em&gt; in the selected slice. So, the difference beween &lt;code&gt;end&lt;/code&gt; and &lt;code&gt;start&lt;/code&gt; is the number of elements selected (if &lt;code&gt;step&lt;/code&gt; is 1, the&amp;nbsp;default).&lt;/p&gt;
&lt;p&gt;The other feature is that &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;end&lt;/code&gt; may be a &lt;em&gt;negative&lt;/em&gt; number, which means it counts from the end of the array instead of the beginning.&amp;nbsp;So:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;    &lt;span class="c1"&gt;# last item in the array&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;   &lt;span class="c1"&gt;# last two items in the array&lt;/span&gt;
&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="c1"&gt;# everything except the last two items&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Python is kind to the programmer if there are fewer items than you ask for. For example, if you ask for &lt;code&gt;a[:-2]&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt; only contains one element, you get an empty list instead of an error. Sometimes you would prefer the error, so you have to be aware that this may&amp;nbsp;happen.&lt;/p&gt;</content></entry><entry><title>Introduction</title><link href="https://janiceto.github.io/programming-notes-blog/magic-methods.html" rel="alternate"></link><published>2017-12-12T10:48:00+00:00</published><updated>2017-12-12T10:48:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-12-12:/programming-notes-blog/magic-methods.html</id><summary type="html">&lt;p&gt;This guide is the culmination of a few months&amp;#8217; worth of blog posts. The subject is &lt;strong&gt;magic methods&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What are magic methods? They&amp;#8217;re everything in object-oriented Python. They&amp;#8217;re special methods that you can define to add &amp;#8220;magic&amp;#8221; to your classes. They&amp;#8217;re always surrounded by double underscores (e …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This guide is the culmination of a few months&amp;#8217; worth of blog posts. The subject is &lt;strong&gt;magic methods&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;What are magic methods? They&amp;#8217;re everything in object-oriented Python. They&amp;#8217;re special methods that you can define to add &amp;#8220;magic&amp;#8221; to your classes. They&amp;#8217;re always surrounded by double underscores (e.g. &lt;code&gt;__init__&lt;/code&gt; or &lt;code&gt;__lt__&lt;/code&gt;). They&amp;#8217;re also not as well documented as they need to be. All of the magic methods for Python appear in the same section in the Python docs, but they&amp;#8217;re scattered about and only loosely organized. There&amp;#8217;s hardly an example to be found in that section (and that may very well be by design, since they&amp;#8217;re all detailed in the &lt;em&gt;language reference&lt;/em&gt;, along with boring syntax descriptions,&amp;nbsp;etc.).&lt;/p&gt;
&lt;p&gt;So, to fix what I perceived as a flaw in Python&amp;#8217;s documentation, I set out to provide some more plain-English, example-driven documentation for Python&amp;#8217;s magic methods. I started out with weekly blog posts, and now that I&amp;#8217;ve finished with those, I&amp;#8217;ve put together this&amp;nbsp;guide.&lt;/p&gt;
&lt;p&gt;I hope you enjoy it. Use it as a tutorial, a refresher, or a reference; it&amp;#8217;s just intended to be a user-friendly guide to Python&amp;#8217;s magic&amp;nbsp;methods.&lt;/p&gt;
&lt;h2&gt;Construction and&amp;nbsp;Initialization&lt;/h2&gt;
&lt;p&gt;Everyone knows the most basic magic method, &lt;code&gt;__init__&lt;/code&gt;. It&amp;#8217;s the way that we can define the initialization behavior of an object. However, when I call &lt;code&gt;x = SomeClass()&lt;/code&gt;, &lt;code&gt;__init__&lt;/code&gt; is not the first thing to get called. Actually, it&amp;#8217;s a method called &lt;code&gt;__new__&lt;/code&gt;, which actually creates the instance, then passes any arguments at creation on to the initializer. At the other end of the object&amp;#8217;s lifespan, there&amp;#8217;s &lt;code&gt;__del__&lt;/code&gt;. Let&amp;#8217;s take a closer look at these 3 magic&amp;nbsp;methods:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__new__(cls, [...)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;__new__&lt;/code&gt; is the first method to get called in an object&amp;#8217;s instantiation. It takes the class, then any other arguments that it will pass along to &lt;code&gt;__init__&lt;/code&gt;. &lt;code&gt;__new__&lt;/code&gt; is used fairly rarely, but it does have its purposes, particularly when subclassing an immutable type like a tuple or a string. I don&amp;#8217;t want to go in to too much detail on &lt;code&gt;__new__&lt;/code&gt; because it&amp;#8217;s not too useful, but it is covered in great detail &lt;a href="http://www.python.org/download/releases/2.2/descrintro/#__new__"&gt;in the Python docs&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__init__(self, [...)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;The initializer for the class. It gets passed whatever the primary constructor was called with (so, for example, if we called &lt;code&gt;x = SomeClass(10, 'foo')&lt;/code&gt;, &lt;code&gt;__init__&lt;/code&gt; would get passed &lt;code&gt;10&lt;/code&gt; and &lt;code&gt;'foo'&lt;/code&gt; as arguments. &lt;code&gt;__init__&lt;/code&gt; is almost universally used in Python class&amp;nbsp;definitions.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__del__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;If &lt;code&gt;__new__&lt;/code&gt; and &lt;code&gt;__init__&lt;/code&gt; formed the constructor of the object, &lt;code&gt;__del__&lt;/code&gt; is the destructor. It doesn&amp;#8217;t implement behavior for the statement &lt;code&gt;del x&lt;/code&gt; (so that code would not translate to &lt;code&gt;x.__del__()&lt;/code&gt;). Rather, it defines behavior for when an object is garbage collected. It can be quite useful for objects that might require extra cleanup upon deletion, like sockets or file objects. Be careful, however, as there is no guarantee that &lt;code&gt;__del__&lt;/code&gt; will be executed if the object is still alive when the interpreter exits, so &lt;code&gt;__del__&lt;/code&gt; can&amp;#8217;t serve as a replacement for good coding practices (like always closing a connection when you&amp;#8217;re done with it. In fact, &lt;code&gt;__del__&lt;/code&gt; should almost never be used because of the precarious circumstances under which it is called; use it with&amp;nbsp;caution!&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Putting it all together, here&amp;#8217;s an example of &lt;code&gt;__init__&lt;/code&gt; and &lt;code&gt;__del__&lt;/code&gt; in&amp;nbsp;action:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;os.path&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;join&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FileObject&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Wrapper for file objects to make sure the file gets closed on deletion.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;~&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;sample.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# open a file filename in filepath in read and write mode&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;filepath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;filename&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r+&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__del__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Making Operators Work on Custom&amp;nbsp;Classes&lt;/h2&gt;
&lt;p&gt;One of the biggest advantages of using Python&amp;#8217;s magic methods is that they provide a simple way to make objects behave like built-in types. That means you can avoid ugly, counter-intuitive, and nonstandard ways of performing basic operators. In some languages, it&amp;#8217;s common to do something like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other_instance&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You could certainly do this in Python, too, but this adds confusion and is unnecessarily verbose. Different libraries might use different names for the same operations, making the client do way more work than necessary. With the power of magic methods, however, we can define one method (&lt;code&gt;__eq__&lt;/code&gt;, in this case), and say what we &lt;em&gt;mean&lt;/em&gt;&amp;nbsp;instead:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;other_instance&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;#do something&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That&amp;#8217;s part of the power of magic methods. The vast majority of them allow us to define meaning for operators so that we can use them on our own classes just like they were built in&amp;nbsp;types.&lt;/p&gt;
&lt;h3&gt;Comparison magic&amp;nbsp;methods&lt;/h3&gt;
&lt;p&gt;Python has a whole slew of magic methods designed to implement intuitive comparisons between objects using operators, not awkward method calls. They also provide a way to override the default Python behavior for comparisons of objects (by reference). Here&amp;#8217;s the list of those methods and what they&amp;nbsp;do:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__cmp__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;__cmp__&lt;/code&gt; is the most basic of the comparison magic methods. It actually implements behavior for all of the comparison operators (&amp;lt;, ==, !=, etc.), but it might not do it the way you want (for example, if whether one instance was equal to another were determined by one criterion and and whether an instance is greater than another were determined by something else). &lt;code&gt;__cmp__&lt;/code&gt; should return a negative integer if &lt;code&gt;self &amp;lt; other&lt;/code&gt;, zero if &lt;code&gt;self == other&lt;/code&gt;, and positive if &lt;code&gt;self &amp;gt; other&lt;/code&gt;. It&amp;#8217;s usually best to define each comparison you need rather than define them all at once, but &lt;code&gt;__cmp__&lt;/code&gt; can be a good way to save repetition and improve clarity when you need all comparisons implemented with similar&amp;nbsp;criteria.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__eq__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for the equality operator, &lt;code&gt;==&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ne__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for the inequality operator, &lt;code&gt;!=&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__lt__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for the less-than operator, &lt;code&gt;&amp;lt;&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__gt__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for the greater-than operator, &lt;code&gt;&amp;gt;&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__le__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for the less-than-or-equal-to operator, &lt;code&gt;&amp;lt;=&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ge__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for the greater-than-or-equal-to operator, &lt;code&gt;&amp;gt;=&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;For an example, consider a class to model a word. We might want to compare words lexicographically (by the alphabet), which is the default comparison behavior for strings, but we also might want to do it based on some other criterion, like length or number of syllables. In this example, we&amp;#8217;ll compare by length. Here&amp;#8217;s an&amp;nbsp;implementation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Word&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Class for words, defining comparison based on word length.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Note that we have to use __new__. This is because str is an immutable&lt;/span&gt;
        &lt;span class="c1"&gt;# type, so we have to initialize it early (at creation)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Value contains spaces. Truncating to first space.&amp;quot;&lt;/span&gt;
            &lt;span class="n"&gt;word&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt; &lt;span class="c1"&gt;# Word is now all chars before first space&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__new__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;word&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__gt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__lt__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__ge__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__le__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, we can create two &lt;code&gt;Word&lt;/code&gt;s (by using &lt;code&gt;Word('foo')&lt;/code&gt; and &lt;code&gt;Word('bar')&lt;/code&gt;) and compare them based on length. Note, however, that we didn&amp;#8217;t define &lt;code&gt;__eq__&lt;/code&gt; and &lt;code&gt;__ne__&lt;/code&gt;. This is because this would lead to some weird behavior (notably that &lt;code&gt;Word('foo') == Word('bar')&lt;/code&gt; would evaluate to true). It wouldn&amp;#8217;t make sense to test for equality based on length, so we fall back on &lt;code&gt;str&lt;/code&gt;&lt;span class="quo"&gt;&amp;#8216;&lt;/span&gt;s implementation of&amp;nbsp;equality.&lt;/p&gt;
&lt;p&gt;Now would be a good time to note that you don&amp;#8217;t have to define every comparison magic method to get rich comparisons. The standard library has kindly provided us with a class decorator in the module &lt;code&gt;functools&lt;/code&gt; that will define all rich comparison methods if you only define &lt;code&gt;__eq__&lt;/code&gt; and one other (e.g. &lt;code&gt;__gt__&lt;/code&gt;, &lt;code&gt;__lt__&lt;/code&gt;, etc.) This feature is only available in Python 2.7, but when you get a chance it saves a great deal of time and effort. You can use it by placing &lt;code&gt;@total_ordering&lt;/code&gt; above your class&amp;nbsp;definition.&lt;/p&gt;
&lt;h3&gt;Numeric magic&amp;nbsp;methods&lt;/h3&gt;
&lt;p&gt;Just like you can create ways for instances of your class to be compared with comparison operators, you can define behavior for numeric operators. Buckle your seat belts, folks&amp;#8230;there&amp;#8217;s a lot of these. For organization&amp;#8217;s sake, I&amp;#8217;ve split the numeric magic methods into 5 categories: unary operators, normal arithmetic operators, reflected arithmetic operators (more on this later), augmented assignment, and type&amp;nbsp;conversions.&lt;/p&gt;
&lt;h4&gt;Unary operators and&amp;nbsp;functions&lt;/h4&gt;
&lt;p&gt;Unary operators and functions only have one operand, e.g. negation, absolute value,&amp;nbsp;etc.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__pos__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for unary positive (e.g. &lt;code&gt;+some_object&lt;/code&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__neg__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for negation (e.g. &lt;code&gt;-some_object&lt;/code&gt;)&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__abs__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for the built in &lt;code&gt;abs()&lt;/code&gt; function.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__invert__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for inversion using the &lt;code&gt;~&lt;/code&gt; operator. For an explanation on what this does, see &lt;a href="http://en.wikipedia.org/wiki/Bitwise_operation#NOT"&gt;the Wikipedia article on bitwise operations&lt;/a&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__round__(self, n)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for the built in &lt;code&gt;round()&lt;/code&gt; function. &lt;code&gt;n&lt;/code&gt; is the number of decimal places to round&amp;nbsp;to.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__floor__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for &lt;code&gt;math.floor()&lt;/code&gt;, i.e., rounding down to the nearest&amp;nbsp;integer.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ceil__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for &lt;code&gt;math.ceil()&lt;/code&gt;, i.e., rounding up to the nearest&amp;nbsp;integer.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__trunc__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for &lt;code&gt;math.trunc()&lt;/code&gt;, i.e., truncating to an&amp;nbsp;integral.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Normal arithmetic&amp;nbsp;operators&lt;/h4&gt;
&lt;p&gt;Now, we cover the typical binary operators (and a function or two): +, -, * and the like. These are, for the most part, pretty&amp;nbsp;self-explanatory.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__add__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements&amp;nbsp;addition.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__sub__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements&amp;nbsp;subtraction.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__mul__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements&amp;nbsp;multiplication.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__floordiv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements integer division using the &lt;code&gt;//&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__div__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements division using the &lt;code&gt;/&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__truediv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements &lt;em&gt;true&lt;/em&gt; division. Note that this only works when &lt;code&gt;from __future__ import division&lt;/code&gt; is in&amp;nbsp;effect.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__mod__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements modulo using the &lt;code&gt;%&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__divmod__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for long division using the &lt;code&gt;divmod()&lt;/code&gt; built in&amp;nbsp;function.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__pow__&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for exponents using the &lt;code&gt;**&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__lshift__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements left bitwise shift using the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rshift__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements right bitwise shift using the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__and__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements bitwise and using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__or__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements bitwise or using the &lt;code&gt;|&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__xor__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements bitwise xor using the &lt;code&gt;^&lt;/code&gt; operator.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Reflected arithmetic&amp;nbsp;operators&lt;/h4&gt;
&lt;p&gt;You know how I said I would get to reflected arithmetic in a bit? Some of you might think it&amp;#8217;s some big, scary, foreign concept. It&amp;#8217;s actually quite simple. Here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;some_object&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;other&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That was &amp;#8220;normal&amp;#8221; addition. The reflected equivalent is the same thing, except with the operands switched&amp;nbsp;around:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;other&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;some_object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So, all of these magic methods do the same thing as their normal equivalents, except the perform the operation with other as the first operand and self as the second, rather than the other way around. In most cases, the result of a reflected operation is the same as its normal equivalent, so you may just end up defining &lt;code&gt;__radd__&lt;/code&gt; as calling &lt;code&gt;__add__&lt;/code&gt; and so on. Note that the object on the left hand side of the operator (&lt;code&gt;other&lt;/code&gt; in the example) must not define (or return &lt;code&gt;NotImplemented&lt;/code&gt;) for its definition of the non-reflected version of an operation. For instance, in the example, &lt;code&gt;some_object.__radd__&lt;/code&gt; will only be called if &lt;code&gt;other&lt;/code&gt; does not define &lt;code&gt;__add__&lt;/code&gt;.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__radd__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected&amp;nbsp;addition.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rsub__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected&amp;nbsp;subtraction.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rmul__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected&amp;nbsp;multiplication.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rfloordiv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected integer division using the &lt;code&gt;//&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rdiv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected division using the &lt;code&gt;/&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rtruediv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected &lt;em&gt;true&lt;/em&gt; division. Note that this only works when &lt;code&gt;from __future__ import division&lt;/code&gt; is in&amp;nbsp;effect.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rmod__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected modulo using the &lt;code&gt;%&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rdivmod__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for long division using the &lt;code&gt;divmod()&lt;/code&gt; built in function, when &lt;code&gt;divmod(other, self)&lt;/code&gt; is&amp;nbsp;called.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rpow__&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for reflected exponents using the &lt;code&gt;**&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rlshift__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected left bitwise shift using the &lt;code&gt;&amp;lt;&amp;lt;&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rrshift__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected right bitwise shift using the &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rand__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected bitwise and using the &lt;code&gt;&amp;amp;&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ror__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected bitwise or using the &lt;code&gt;|&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__rxor__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements reflected bitwise xor using the &lt;code&gt;^&lt;/code&gt; operator.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Augmented&amp;nbsp;assignment&lt;/h4&gt;
&lt;p&gt;Python also has a wide variety of magic methods to allow custom behavior to be defined for augmented assignment. You&amp;#8217;re probably already familiar with augmented assignment, it combines &amp;#8220;normal&amp;#8221; operators with assignment. If you still don&amp;#8217;t know what I&amp;#8217;m talking about, here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="c1"&gt;# in other words x = x + 1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Each of these methods should return the value that the variable on the left hand side should be assigned to (for instance, for &lt;code&gt;a += b&lt;/code&gt;, &lt;code&gt;__iadd__&lt;/code&gt; might return &lt;code&gt;a + b&lt;/code&gt;, which would be assigned to &lt;code&gt;a&lt;/code&gt;). Here&amp;#8217;s the&amp;nbsp;list:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__iadd__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements addition with&amp;nbsp;assignment.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__isub__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements subtraction with&amp;nbsp;assignment.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__imul__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements multiplication with&amp;nbsp;assignment.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ifloordiv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements integer division with assignment using the &lt;code&gt;//=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__idiv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements division with assignment using the &lt;code&gt;/=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__itruediv__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements &lt;em&gt;true&lt;/em&gt; division with assignment. Note that this only works when &lt;code&gt;from __future__ import division&lt;/code&gt; is in&amp;nbsp;effect.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__imod__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements modulo with assignment using the &lt;code&gt;%=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ipow__&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements behavior for exponents with assignment using the &lt;code&gt;**=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ilshift__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements left bitwise shift with assignment using the &lt;code&gt;&amp;lt;&amp;lt;=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__irshift__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements right bitwise shift with assignment using the &lt;code&gt;&amp;gt;&amp;gt;=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__iand__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements bitwise and with assignment using the &lt;code&gt;&amp;amp;=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ior__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements bitwise or with assignment using the &lt;code&gt;|=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__ixor__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements bitwise xor with assignment using the &lt;code&gt;^=&lt;/code&gt; operator.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;Type conversion magic&amp;nbsp;methods&lt;/h4&gt;
&lt;p&gt;Python also has an array of magic methods designed to implement behavior for built in type conversion functions like &lt;code&gt;float()&lt;/code&gt;. Here they&amp;nbsp;are:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__int__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to&amp;nbsp;int.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__long__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to&amp;nbsp;long.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__float__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to&amp;nbsp;float.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__complex__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to&amp;nbsp;complex.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__oct__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to&amp;nbsp;octal.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__hex__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to&amp;nbsp;hexadecimal.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__index__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Implements type conversion to an int when the object is used in a slice expression. If you define a custom numeric type that might be used in slicing, you should define &lt;code&gt;__index__&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__trunc__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called when &lt;code&gt;math.trunc(self)&lt;/code&gt; is called. &lt;code&gt;__trunc__&lt;/code&gt; should return the value of `self truncated to an integral type (usually a&amp;nbsp;long).&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__coerce__(self, other)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Method to implement mixed mode arithmetic. &lt;code&gt;__coerce__&lt;/code&gt; should return &lt;code&gt;None&lt;/code&gt; if type conversion is impossible. Otherwise, it should return a pair (2-tuple) of &lt;code&gt;self&lt;/code&gt; and &lt;code&gt;other&lt;/code&gt;, manipulated to have the same&amp;nbsp;type.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h2&gt;Representing your&amp;nbsp;Classes&lt;/h2&gt;
&lt;p&gt;It&amp;#8217;s often useful to have a string representation of a class. In Python, there are a few methods that you can implement in your class definition to customize how built in functions that return representations of your class&amp;nbsp;behave.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__str__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;str()&lt;/code&gt; is called on an instance of your&amp;nbsp;class.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__repr__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;repr()&lt;/code&gt; is called on an instance of your class. The major difference between &lt;code&gt;str()&lt;/code&gt; and &lt;code&gt;repr()&lt;/code&gt; is intended audience. &lt;code&gt;repr()&lt;/code&gt; is intended to produce output that is mostly machine-readable (in many cases, it could be valid Python code even), whereas &lt;code&gt;str()&lt;/code&gt; is intended to be&amp;nbsp;human-readable.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__unicode__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;unicode()&lt;/code&gt; is called on an instance of your class. &lt;code&gt;unicode()&lt;/code&gt; is like &lt;code&gt;str()&lt;/code&gt;, but it returns a unicode string. Be wary: if a client calls &lt;code&gt;str()&lt;/code&gt; on an instance of your class and you&amp;#8217;ve only defined &lt;code&gt;__unicode__()&lt;/code&gt;, it won&amp;#8217;t work. You should always try to define &lt;code&gt;__str__()&lt;/code&gt; as well in case someone doesn&amp;#8217;t have the luxury of using&amp;nbsp;unicode.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__format__(self, formatstr)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when an instance of your class is used in new-style string formatting. For instance, &lt;code&gt;"Hello, {0:abc}!".format(a)&lt;/code&gt; would lead to the call &lt;code&gt;a.__format__("abc")&lt;/code&gt;. This can be useful for defining your own numerical or string types that you might like to give special formatting&amp;nbsp;options.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__hash__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;hash()&lt;/code&gt; is called on an instance of your class. It has to return an integer, and its result is used for quick key comparison in dictionaries. Note that this usually entails implementing &lt;code&gt;__eq__&lt;/code&gt; as well. Live by the following rule: &lt;code&gt;a == b&lt;/code&gt; implies &lt;code&gt;hash(a) == hash(b)&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__nonzero__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;bool()&lt;/code&gt; is called on an instance of your class. Should return &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;, depending on whether you would want to consider the instance to be &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__dir__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;dir()&lt;/code&gt; is called on an instance of your class. This method should return a list of attributes for the user. Typically, implementing &lt;code&gt;__dir__&lt;/code&gt; is unnecessary, but it can be vitally important for interactive use of your classes if you redefine &lt;code&gt;__getattr__&lt;/code&gt; or &lt;code&gt;__getattribute__&lt;/code&gt; (which you will see in the next section) or are otherwise dynamically generating&amp;nbsp;attributes.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__sizeof__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when &lt;code&gt;sys.getsizeof()&lt;/code&gt; is called on an instance of your class. This should return the size of your object, in bytes. This is generally more useful for Python classes implemented in C extensions, but it helps to be aware of&amp;nbsp;it.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;We&amp;#8217;re pretty much done with the boring (and example-free) part of the magic methods guide. Now that we&amp;#8217;ve covered some of the more basic magic methods, it&amp;#8217;s time to move to more advanced&amp;nbsp;material.&lt;/p&gt;
&lt;h2&gt;Controlling Attribute&amp;nbsp;Access&lt;/h2&gt;
&lt;p&gt;Many people coming to Python from other languages complain that it lacks true encapsulation for classes; that is, there&amp;#8217;s no way to define private attributes with public getter and setters. This couldn&amp;#8217;t be farther than the truth: it just happens that Python accomplishes a great deal of encapsulation through &amp;#8220;magic&amp;#8221;, instead of explicit modifiers for methods or fields. Take a&amp;nbsp;look:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__getattr__(self, name)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;You can define behavior for when a user attempts to access an attribute that doesn&amp;#8217;t exist (either at all or yet). This can be useful for catching and redirecting common misspellings, giving warnings about using deprecated attributes (you can still choose to compute and return that attribute, if you wish), or deftly handing an &lt;code&gt;AttributeError&lt;/code&gt;. It only gets called when a nonexistent attribute is accessed, however, so it isn&amp;#8217;t a true encapsulation&amp;nbsp;solution.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__setattr__(self, name, value)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Unlike &lt;code&gt;__getattr__&lt;/code&gt;, &lt;code&gt;__setattr__&lt;/code&gt; is an encapsulation solution. It allows you to define behavior for assignment to an attribute regardless of whether or not that attribute exists, meaning you can define custom rules for any changes in the values of attributes. However, you have to be careful with how you use &lt;code&gt;__setattr__&lt;/code&gt;, as the example at the end of the list will&amp;nbsp;show.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__delattr__(self, name)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;This is the exact same as &lt;code&gt;__setattr__&lt;/code&gt;, but for deleting attributes instead of setting them. The same precautions need to be taken as with &lt;code&gt;__setattr__&lt;/code&gt; as well in order to prevent infinite recursion (calling &lt;code&gt;del self.name&lt;/code&gt; in the implementation of &lt;code&gt;__delattr__&lt;/code&gt; would cause infinite&amp;nbsp;recursion).&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__getattribute__(self, name)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;After all this, &lt;code&gt;__getattribute__&lt;/code&gt; fits in pretty well with its companions &lt;code&gt;__setattr__&lt;/code&gt; and &lt;code&gt;__delattr__&lt;/code&gt;. However, I don&amp;#8217;t recommend you use it. &lt;code&gt;__getattribute__&lt;/code&gt; can only be used with new-style classes (all classes are new-style in the newest versions of Python, and in older versions you can make a class new-style by subclassing &lt;code&gt;object&lt;/code&gt;. It allows you to define rules for whenever an attribute&amp;#8217;s value is accessed. It suffers from some similar infinite recursion problems as its partners-in-crime (this time you call the base class&amp;#8217;s &lt;code&gt;__getattribute__&lt;/code&gt; method to prevent this). It also mainly obviates the need for &lt;code&gt;__getattr__&lt;/code&gt;, which, when &lt;code&gt;__getattribute__&lt;/code&gt; is implemented, only gets called if it is called explicitly or an &lt;code&gt;AttributeError&lt;/code&gt; is raised. This method can be used (after all, it&amp;#8217;s your choice), but I don&amp;#8217;t recommend it because it has a small use case (it&amp;#8217;s far more rare that we need special behavior to retrieve a value than to assign to it) and because it can be really difficult to implement&amp;nbsp;bug-free.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;You can easily cause a problem in your definitions of any of the methods controlling attribute access. Consider this&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="c1"&gt;# since every time an attribute is assigned, __setattr__() is called, this&lt;/span&gt;
    &lt;span class="c1"&gt;# is recursion.&lt;/span&gt;
    &lt;span class="c1"&gt;# so this really means self.__setattr__(&amp;#39;name&amp;#39;, value). Since the method&lt;/span&gt;
    &lt;span class="c1"&gt;# keeps calling itself, the recursion goes on forever causing a crash&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__dict__&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="c1"&gt;# assigning to the dict of names in the class&lt;/span&gt;
    &lt;span class="c1"&gt;# define custom behavior here&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Again, Python&amp;#8217;s magic methods are incredibly powerful, and with great power comes great responsibility. It&amp;#8217;s important to know the proper way to use magic methods so you don&amp;#8217;t break any&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;So, what have we learned about custom attribute access in Python? It&amp;#8217;s not to be used lightly. In fact, it tends to be excessively powerful and counter-intuitive. But the reason why it exists is to scratch a certain itch: Python doesn&amp;#8217;t seek to make bad things impossible, but just to make them difficult. Freedom is paramount, so you can really do whatever you want. Here&amp;#8217;s an example of some of the special attribute access methods in action (note that we use &lt;code&gt;super&lt;/code&gt; because not all classes have an attribute &lt;code&gt;__dict__&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;A class that contains a value and implements an access counter.&lt;/span&gt;
&lt;span class="sd"&gt;    The counter increments each time the value is changed.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="c1"&gt;# Make this unconditional.&lt;/span&gt;
        &lt;span class="c1"&gt;# If you want to prevent other attributes to be set, raise AttributeError(name)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__delattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__setattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;counter&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;counter&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AccessCounter&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="fm"&gt;__delattr__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Making Custom&amp;nbsp;Sequences&lt;/h2&gt;
&lt;p&gt;There&amp;#8217;s a number of ways to get your Python classes to act like built in sequences (&lt;code&gt;dict&lt;/code&gt;, &lt;code&gt;tuple&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;str&lt;/code&gt;, etc.). These are by far my favorite magic methods in Python because of the absurd degree of control they give you and the way that they magically make a whole array of global functions work beautifully on instances of your class. But before we get down to the good stuff, a quick word on&amp;nbsp;requirements.&lt;/p&gt;
&lt;h4&gt;Requirements&lt;/h4&gt;
&lt;p&gt;Now that we&amp;#8217;re talking about creating your own sequences in Python, it&amp;#8217;s time to talk about &lt;em&gt;protocols&lt;/em&gt;. Protocols are somewhat similar to interfaces in other languages in that they give you a set of methods you must define. However, in Python protocols are totally informal and require no explicit declarations to implement. Rather, they&amp;#8217;re more like&amp;nbsp;guidelines.&lt;/p&gt;
&lt;p&gt;Why are we talking about protocols now? Because implementing custom container types in Python involves using some of these protocols. First, there&amp;#8217;s the protocol for defining immutable containers: to make an immutable container, you need only define &lt;code&gt;__len__&lt;/code&gt; and &lt;code&gt;__getitem__&lt;/code&gt; (more on these later). The mutable container protocol requires everything that immutable containers require plus &lt;code&gt;__setitem__&lt;/code&gt; and &lt;code&gt;__delitem__&lt;/code&gt;. Lastly, if you want your object to be iterable, you&amp;#8217;ll have to define &lt;code&gt;__iter__&lt;/code&gt;, which returns an iterator. That iterator must conform to an iterator protocol, which requires iterators to have methods called &lt;code&gt;__iter__&lt;/code&gt;(returning itself) and &lt;code&gt;next&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;The magic behind&amp;nbsp;containers&lt;/h4&gt;
&lt;p&gt;Without any more wait, here are the magic methods that containers&amp;nbsp;use:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__len__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Returns the length of the container. Part of the protocol for both immutable and mutable&amp;nbsp;containers.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__getitem__(self, key)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when an item is accessed, using the notation &lt;code&gt;self[key]&lt;/code&gt;. This is also part of both the mutable and immutable container protocols. It should also raise appropriate exceptions: &lt;code&gt;TypeError&lt;/code&gt; if the type of the key is wrong and &lt;code&gt;KeyError&lt;/code&gt; if there is no corresponding value for the&amp;nbsp;key.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__setitem__(self, key, value)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when an item is assigned to, using the notation &lt;code&gt;self[nkey] = value&lt;/code&gt;. This is part of the mutable container protocol. Again, you should raise &lt;code&gt;KeyError&lt;/code&gt; and &lt;code&gt;TypeError&lt;/code&gt; where&amp;nbsp;appropriate.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__delitem__(self, key)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for when an item is deleted (e.g. &lt;code&gt;del self[key]&lt;/code&gt;). This is only part of the mutable container protocol. You must raise the appropriate exceptions when an invalid key is&amp;nbsp;used.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__iter__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Should return an iterator for the container. Iterators are returned in a number of contexts, most notably by the &lt;code&gt;iter()&lt;/code&gt; built in function and when a container is looped over using the form &lt;code&gt;for x in container:&lt;/code&gt;. Iterators are their own objects, and they also must define an &lt;code&gt;__iter__&lt;/code&gt; method that returns &lt;code&gt;self&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__reversed__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Called to implement behavior for the &lt;code&gt;reversed()&lt;/code&gt; built in function. Should return a reversed version of the sequence. Implement this only if the sequence class is ordered, like list or&amp;nbsp;tuple.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__contains__(self, item)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;__contains__&lt;/code&gt; defines behavior for membership tests using &lt;code&gt;in&lt;/code&gt; and &lt;code&gt;not in&lt;/code&gt;. Why isn&amp;#8217;t this part of a sequence protocol, you ask? Because when &lt;code&gt;__contains__&lt;/code&gt; isn&amp;#8217;t defined, Python just iterates over the sequence and returns &lt;code&gt;True&lt;/code&gt; if it comes across the item it&amp;#8217;s looking&amp;nbsp;for.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__missing__(self, key)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;__missing__&lt;/code&gt; is used in subclasses of &lt;code&gt;dict&lt;/code&gt;. It defines behavior for whenever a key is accessed that does not exist in a dictionary (so, for instance, if I had a dictionary &lt;code&gt;d&lt;/code&gt; and said &lt;code&gt;d["george"]&lt;/code&gt; when &lt;code&gt;"george"&lt;/code&gt; is not a key in the dict, &lt;code&gt;d.__missing__("george")&lt;/code&gt; would be&amp;nbsp;called).&lt;/dd&gt;
&lt;/dl&gt;
&lt;h4&gt;An&amp;nbsp;example&lt;/h4&gt;
&lt;p&gt;For our example, let&amp;#8217;s look at a list that implements some functional constructs that you might be used to from other languages (Haskell, for&amp;nbsp;example).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;FunctionalList&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;A class wrapping a list with some extra functional magic, like head,&lt;/span&gt;
&lt;span class="sd"&gt;    tail, init, last, drop, and take.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;values&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__len__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__getitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# if key is of invalid type or value, the list values will raise the error&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__setitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__delitem__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;del&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;iter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__reversed__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;reversed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# get the first element&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;tail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# get all elements after the first&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# get elements up to the last&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;last&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# get last element&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;drop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# get all elements except first n&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;take&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# get first n elements&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;[:&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There you have it, a (marginally) useful example of how to implement your own sequence. Of course, there are more useful applications of custom sequences, but quite a few of them are already implemented in the standard library (batteries included, right?), like &lt;code&gt;Counter&lt;/code&gt;, &lt;code&gt;OrderedDict&lt;/code&gt;, and &lt;code&gt;NamedTuple&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;Reflection&lt;/h2&gt;
&lt;p&gt;You can also control how reflection using the built in functions &lt;code&gt;isinstance()&lt;/code&gt; and &lt;code&gt;issubclass()&lt;/code&gt;behaves by defining magic methods. The magic methods&amp;nbsp;are:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__instancecheck__(self, instance)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Checks if an instance is an instance of the class you defined (e.g. &lt;code&gt;isinstance(instance, class)&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__subclasscheck__(self, subclass)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Checks if a class subclasses the class you defined (e.g. &lt;code&gt;issubclass(subclass, class)&lt;/code&gt;).&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;The use case for these magic methods might seem small, and that may very well be true. I won&amp;#8217;t spend too much more time on reflection magic methods because they aren&amp;#8217;t very important, but they reflect something important about object-oriented programming in Python and Python in general: there is almost always an easy way to do something, even if it&amp;#8217;s rarely necessary. These magic methods might not seem useful, but if you ever need them you&amp;#8217;ll be glad that they&amp;#8217;re there (and that you read this&amp;nbsp;guide!).&lt;/p&gt;
&lt;h2&gt;Callable&amp;nbsp;Objects&lt;/h2&gt;
&lt;p&gt;As you may already know, in Python, functions are first-class objects. This means that they can be passed to functions and methods just as if they were objects of any other kind. This is an incredibly powerful&amp;nbsp;feature.&lt;/p&gt;
&lt;p&gt;A special magic method in Python allows instances of your classes to behave as if they were functions, so that you can &amp;#8220;call&amp;#8221; them, pass them to functions that take functions as arguments, and so on. This is another powerful convenience feature that makes programming in Python that much&amp;nbsp;sweeter.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__call__(self, [args...])&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Allows an instance of a class to be called as a function. Essentially, this means that &lt;code&gt;x()&lt;/code&gt; is the same as &lt;code&gt;x.__call__()&lt;/code&gt;. Note that &lt;code&gt;__call__&lt;/code&gt; takes a variable number of arguments; this means that you define &lt;code&gt;__call__&lt;/code&gt; as you would any other function, taking however many arguments you&amp;#8217;d like it&amp;nbsp;to.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;__call__&lt;/code&gt; can be particularly useful in classes with instances that need to often change state. &amp;#8220;Calling&amp;#8221; the instance can be an intuitive and elegant way to change the object&amp;#8217;s state. An example might be a class representing an entity&amp;#8217;s position on a&amp;nbsp;plane:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Entity&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Class to represent an entity. Callable to update the entity&amp;#39;s position.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__call__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Change the position of the entity.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="c1"&gt;# snip...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Context&amp;nbsp;Managers&lt;/h2&gt;
&lt;p&gt;In Python 2.5, a new keyword was introduced in Python along with a new method for code reuse: the &lt;code&gt;with&lt;/code&gt; statement. The concept of context managers was hardly new in Python (it was implemented before as a part of the library), but not until &lt;a href="http://www.python.org/dev/peps/pep-0343/"&gt;&lt;span class="caps"&gt;PEP&lt;/span&gt; 343&lt;/a&gt; was accepted did it achieve status as a first-class language construct. You may have seen &lt;code&gt;with&lt;/code&gt; statements&amp;nbsp;before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# perform some action with bar&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Context managers allow setup and cleanup actions to be taken for objects when their creation is wrapped with a &lt;code&gt;with&lt;/code&gt; statement. The behavior of the context manager is determined by two magic&amp;nbsp;methods:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__enter__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines what the context manager should do at the beginning of the block created by the &lt;code&gt;with&lt;/code&gt; statement. Note that the return value of &lt;code&gt;__enter__&lt;/code&gt; is bound to the &lt;em&gt;target&lt;/em&gt; of the &lt;code&gt;with&lt;/code&gt; statement, or the name after the &lt;code&gt;as&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__exit__(self, exception_type, exception_value, traceback)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines what the context manager should do after its block has been executed (or terminates). It can be used to handle exceptions, perform cleanup, or do something always done immediately after the action in the block. If the block executes successfully, &lt;code&gt;exception_type&lt;/code&gt;, &lt;code&gt;exception_value&lt;/code&gt;, and &lt;code&gt;traceback&lt;/code&gt; will be &lt;code&gt;None&lt;/code&gt;. Otherwise, you can choose to handle the exception or let the user handle it; if you want to handle it, make sure &lt;code&gt;__exit__&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; after all is said and done. If you don&amp;#8217;t want the exception to be handled by the context manager, just let it&amp;nbsp;happen.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;&lt;code&gt;__enter__&lt;/code&gt; and &lt;code&gt;__exit__&lt;/code&gt; can be useful for specific classes that have well-defined and common behavior for setup and cleanup. You can also use these methods to create generic context managers that wrap other objects. Here&amp;#8217;s an&amp;nbsp;example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Closer&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;A context manager to automatically close an object with a close method&lt;/span&gt;
&lt;span class="sd"&gt;    in a with statement.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__enter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt; &lt;span class="c1"&gt;# bound to target&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__exit__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;exception_val&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;trace&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
           &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;AttributeError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# obj isn&amp;#39;t closable&lt;/span&gt;
           &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Not closable.&amp;#39;&lt;/span&gt;
           &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt; &lt;span class="c1"&gt;# exception handled successfully&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here&amp;#8217;s an example of &lt;code&gt;Closer&lt;/code&gt; in action, using an &lt;span class="caps"&gt;FTP&lt;/span&gt; connection to demonstrate it (a closable&amp;nbsp;socket):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;magicmethods&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Closer&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;ftplib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;FTP&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Closer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ftp.somesite.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="c1"&gt;# output omitted for brevity&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dir&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# long AttributeError message, can&amp;#39;t use a connection that&amp;#39;s closed&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Closer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;     &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="n"&gt;Not&lt;/span&gt; &lt;span class="n"&gt;closable&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;
&lt;span class="mi"&gt;6&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;See how our wrapper gracefully handled both proper and improper uses? That&amp;#8217;s the power of context managers and magic methods. Note that the Python standard library includes a module &lt;a href="http://docs.python.org/library/contextlib.html"&gt;contextlib&lt;/a&gt; that contains a context manager, &lt;code&gt;contextlib.closing()&lt;/code&gt;, that does approximately the same thing (without any handling of the case where an object does not have a &lt;code&gt;close()&lt;/code&gt; method).&lt;/p&gt;
&lt;h2&gt;Abstract Base&amp;nbsp;Classes&lt;/h2&gt;
&lt;p&gt;See&amp;nbsp;http://docs.python.org/2/library/abc.html.&lt;/p&gt;
&lt;h2&gt;Building Descriptor&amp;nbsp;Objects&lt;/h2&gt;
&lt;p&gt;Descriptors are classes which, when accessed through either getting, setting, or deleting, can also alter other objects. Descriptors aren&amp;#8217;t meant to stand alone; rather, they&amp;#8217;re meant to be held by an owner class. Descriptors can be useful when building object-oriented databases or classes that have attributes whose values are dependent on each other. Descriptors are particularly useful when representing attributes in several different units of measurement or representing computed attributes (like distance from the origin in a class to represent a point on a&amp;nbsp;grid).&lt;/p&gt;
&lt;p&gt;To be a descriptor, a class must have at least one of &lt;code&gt;__get__&lt;/code&gt;, &lt;code&gt;__set__&lt;/code&gt;, and &lt;code&gt;__delete__&lt;/code&gt; implemented. Let&amp;#8217;s take a look at those magic&amp;nbsp;methods:&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__get__(self, instance, owner)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Define behavior for when the descriptor&amp;#8217;s value is retrieved. &lt;code&gt;instance&lt;/code&gt; is the instance of the owner object. &lt;code&gt;owner&lt;/code&gt; is the owner class&amp;nbsp;itself.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__set__(self, instance, value)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Define behavior for when the descriptor&amp;#8217;s value is changed. &lt;code&gt;instance&lt;/code&gt; is the instance of the owner class and &lt;code&gt;value&lt;/code&gt; is the value to set the descriptor&amp;nbsp;to.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__delete__(self, instance)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Define behavior for when the descriptor&amp;#8217;s value is deleted. &lt;code&gt;instance&lt;/code&gt; is the instance of the owner&amp;nbsp;object.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Now, an example of a useful application of descriptors: unit&amp;nbsp;conversions.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Meter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Descriptor for a meter.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mf"&gt;0.0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Descriptor for a foot.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__get__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meter&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mf"&gt;3.2808&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__set__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;meter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;float&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mf"&gt;3.2808&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Distance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Class to represent distance holding two descriptors for feet and&lt;/span&gt;
&lt;span class="sd"&gt;    meters.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;meter&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Meter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;foot&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Foot&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Copying&lt;/h2&gt;
&lt;p&gt;Sometimes, particularly when dealing with mutable objects, you want to be able to copy an object and make changes without affecting what you copied from. This is where Python&amp;#8217;s &lt;a href="http://docs.python.org/library/copy.html"&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/a&gt; comes into play. However (fortunately), Python modules are not sentient, so we don&amp;#8217;t have to worry about a Linux-based robot uprising, but we do have to tell Python how to efficiently copy&amp;nbsp;things.&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__copy__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for &lt;code&gt;copy.copy()&lt;/code&gt; for instances of your class. &lt;code&gt;copy.copy()&lt;/code&gt; returns a &lt;em&gt;shallow copy&lt;/em&gt; of your object &amp;#8212; this means that, while the instance itself is a new instance, all of its data is referenced &amp;#8212; i.e., the object itself is copied, but its data is still referenced (and hence changes to data in a shallow copy may cause changes in the&amp;nbsp;original).&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__deepcopy__(self, memodict={})&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Defines behavior for &lt;code&gt;copy.deepcopy()&lt;/code&gt; for instances of your class. &lt;code&gt;copy.deepcopy()&lt;/code&gt; returns a &lt;em&gt;deep copy&lt;/em&gt; of your object &amp;#8212; the object &lt;em&gt;and&lt;/em&gt; its data are both copied. &lt;code&gt;memodict&lt;/code&gt; is a cache of previously copied objects &amp;#8212; this optimizes copying and prevents infinite recursion when copying recursive data structures. When you want to deep copy an individual attribute, call &lt;code&gt;copy.deepcopy()&lt;/code&gt; on that attribute with &lt;code&gt;memodict&lt;/code&gt; as the first&amp;nbsp;argument.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;What are some use cases for these magic methods? As always, in any case where you need more fine-grained control than what the default behavior gives you. For instance, if you are attempting to copy an object that stores a cache as a dictionary (which might be large), it might not make sense to copy the cache as well &amp;#8212; if the cache can be shared in memory between instances, then it should&amp;nbsp;be.&lt;/p&gt;
&lt;h2&gt;&lt;a id="pickling" href="#pickling"&gt;Pickling Your&amp;nbsp;Objects&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you spend time with other Pythonistas, chances are you&amp;#8217;ve at least heard of pickling. Pickling is a serialization process for Python data structures, and can be incredibly useful when you need to store an object and retrieve it later (usually for caching). It&amp;#8217;s also a major source of worries and&amp;nbsp;confusion.&lt;/p&gt;
&lt;p&gt;Pickling is so important that it doesn&amp;#8217;t just have its own module (&lt;code&gt;pickle&lt;/code&gt;), but its own &lt;em&gt;protocol&lt;/em&gt; and the magic methods to go with it. But first, a brief word on how to pickle existing types(feel free to skip it if you already&amp;nbsp;know).&lt;/p&gt;
&lt;h3&gt;Pickling: A Quick Soak in the&amp;nbsp;Brine&lt;/h3&gt;
&lt;p&gt;Let&amp;#8217;s dive into pickling. Say you have a dictionary that you want to store and retrieve later. You couldwrite it&amp;#8217;s contents to a file, carefully making sure that you write correct syntax, then retrieve it using either &lt;code&gt;exec()&lt;/code&gt; or processing the file input. But this is precarious at best: if you store important data in plain text, it could be corrupted or changed in any number of ways to make your program crash or worse run malicious code on your computer. Instead, we&amp;#8217;re going to pickle&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;world!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;baz&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;jar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# write the pickled data to the file jar&lt;/span&gt;
&lt;span class="n"&gt;jar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now, a few hours later, we want it back. All we have to do is unpickle&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;

&lt;span class="n"&gt;pkl_file&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.pkl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# connect to the pickled data&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pkl_file&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# load it into a variable&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;
&lt;span class="n"&gt;pkl_file&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;What happens? Exactly what you expect. It&amp;#8217;s just like we had &lt;code&gt;data&lt;/code&gt; all&amp;nbsp;along.&lt;/p&gt;
&lt;p&gt;Now, for a word of caution: pickling is not perfect. Pickle files are easily corrupted on accident and on purpose. Pickling may be more secure than using flat text files, but it still can be used to run malicious code. It&amp;#8217;s also incompatible across different versions of Python, so don&amp;#8217;t expect to distribute pickled objects and expect people to be able to open them. However, it can also be a powerful tool for caching and other common serialization&amp;nbsp;tasks.&lt;/p&gt;
&lt;h3&gt;Pickling your own&amp;nbsp;Objects&lt;/h3&gt;
&lt;p&gt;Pickling isn&amp;#8217;t just for built-in types. It&amp;#8217;s for any class that follows the pickle protocol. The pickle protocol has four optional methods for Python objects to customize how they act (it&amp;#8217;s a bit different for C extensions, but that&amp;#8217;s not in our&amp;nbsp;scope):&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;code&gt;__getinitargs__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;If you&amp;#8217;d like for &lt;code&gt;__init__&lt;/code&gt; to be called when your class is unpickled, you can define &lt;code&gt;__getinitargs__&lt;/code&gt;, which should return a tuple of the arguments that you&amp;#8217;d like to be passed to  &lt;code&gt;__init__&lt;/code&gt;. Note that this method will only work for old-style&amp;nbsp;classes.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__getnewargs__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;For new-style classes, you can influence what arguments get passed to &lt;code&gt;__new__&lt;/code&gt; upon unpickling. This method should also return a tuple of arguments that will then be passed to &lt;code&gt;__new__&lt;/code&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__getstate__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;Instead of the object&amp;#8217;s &lt;code&gt;__dict__&lt;/code&gt; attribute being stored, you can return a custom state to be stored when the object is pickled. That state will be used by &lt;code&gt;__setstate__&lt;/code&gt; when the object is&amp;nbsp;unpickled.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__setstate__(self, state)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;When the object is unpickled, if &lt;code&gt;__setstate__&lt;/code&gt; is defined the object&amp;#8217;s state will be passed to it instead of directly applied to the object&amp;#8217;s &lt;code&gt;__dict__&lt;/code&gt;. This goes hand in hand with &lt;code&gt;__getstate__&lt;/code&gt;: when both are defined, you can represent the object&amp;#8217;s pickled state however you want with whatever you&amp;nbsp;want.&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__reduce__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;When defining extension types (i.e., types implemented using Python&amp;#8217;s C &lt;span class="caps"&gt;API&lt;/span&gt;), you have to tell Python how to pickle them if you want them to pickle them. &lt;code&gt;__reduce__()&lt;/code&gt; is called when an object defining it is pickled. It can either return a string representing a global name that Python will look up and pickle, or a tuple. The tuple contains between 2 and 5 elements: a callable object that is called to recreate the object, a tuple of arguments for that callable object, state to be passed to &lt;code&gt;__setstate__&lt;/code&gt; (optional), an iterator yielding list items to be pickled (optional),  and an iterator yielding dictionary items to be pickled&amp;nbsp;(optional).&lt;/dd&gt;
&lt;dt&gt;&lt;code&gt;__reduce_ex__(self)&lt;/code&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;code&gt;__reduce_ex__&lt;/code&gt; exists for compatibility. If it is defined, &lt;code&gt;__reduce_ex__&lt;/code&gt; will be called over &lt;code&gt;__reduce__&lt;/code&gt; on pickling. &lt;code&gt;__reduce__&lt;/code&gt; can be defined as well for older versions of the pickling &lt;span class="caps"&gt;API&lt;/span&gt; that did not support &lt;code&gt;__reduce_ex__&lt;/code&gt;.&lt;/dd&gt;
&lt;/dl&gt;
&lt;h3&gt;An&amp;nbsp;Example&lt;/h3&gt;
&lt;p&gt;Our example is a &lt;code&gt;Slate&lt;/code&gt;, which remembers what its values have been and when those values were written to it. However, this particular slate goes blank each time it is pickled: the current value will not be&amp;nbsp;saved.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;time&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Slate&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="sd"&gt;&amp;#39;&amp;#39;&amp;#39;Class to store a string and a changelog, and forget its value when&lt;/span&gt;
&lt;span class="sd"&gt;    pickled.&amp;#39;&amp;#39;&amp;#39;&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;change&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Change the value. Commit last value to history&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_change&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new_value&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asctime&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;print_changes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Changelog for Slate object:&amp;#39;&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__getstate__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Deliberately do not return self.value or self.last_change.&lt;/span&gt;
        &lt;span class="c1"&gt;# We want to have a &amp;quot;blank slate&amp;quot; when we unpickle.&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;__setstate__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Make self.history = state and last_change and value undefined&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;history&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;state&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;last_change&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The goal of this guide is to bring something to anyone that reads it, regardless of their experience with Python or object-oriented programming. If you&amp;#8217;re just getting started with Python, you&amp;#8217;ve gained valuable knowledge of the basics of writing feature-rich, elegant, and easy-to-use classes. If you&amp;#8217;re an intermediate Python programmer, you&amp;#8217;ve probably picked up some slick new concepts and strategies and some good ways to reduce the amount of code written by you and clients. If you&amp;#8217;re an expert Pythonista, you&amp;#8217;ve been refreshed on some of the stuff you might have forgotten about and maybe picked up a few new tricks along the way. Whatever your experience level, I hope that this trip through Python&amp;#8217;s special methods has been truly magical. (I couldn&amp;#8217;t resist the final&amp;nbsp;pun!)&lt;/p&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;https://github.com/RafeKettler/magicmethods/blob/master/magicmethods.markdown&lt;/p&gt;</content></entry><entry><title>Caching data</title><link href="https://janiceto.github.io/programming-notes-blog/cache-data.html" rel="alternate"></link><published>2017-12-03T11:50:00+00:00</published><updated>2017-12-03T11:50:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-12-03:/programming-notes-blog/cache-data.html</id><summary type="html">&lt;p&gt;You have three&amp;nbsp;options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookies: https://developer.mozilla.org/en-&lt;span class="caps"&gt;US&lt;/span&gt;/docs/&lt;span class="caps"&gt;DOM&lt;/span&gt;/document.cookie&lt;/li&gt;
&lt;li&gt;DOMStorage (sessionStorage or localStorage): https://developer.mozilla.org/en-&lt;span class="caps"&gt;US&lt;/span&gt;/docs/&lt;span class="caps"&gt;DOM&lt;/span&gt;/Storage&lt;/li&gt;
&lt;li&gt;If your users are logged in, you could persist data in your server&amp;#8217;s &lt;span class="caps"&gt;DB&lt;/span&gt; that is keyed to a user (or …&lt;/li&gt;&lt;/ol&gt;</summary><content type="html">&lt;p&gt;You have three&amp;nbsp;options:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cookies: https://developer.mozilla.org/en-&lt;span class="caps"&gt;US&lt;/span&gt;/docs/&lt;span class="caps"&gt;DOM&lt;/span&gt;/document.cookie&lt;/li&gt;
&lt;li&gt;DOMStorage (sessionStorage or localStorage): https://developer.mozilla.org/en-&lt;span class="caps"&gt;US&lt;/span&gt;/docs/&lt;span class="caps"&gt;DOM&lt;/span&gt;/Storage&lt;/li&gt;
&lt;li&gt;If your users are logged in, you could persist data in your server&amp;#8217;s &lt;span class="caps"&gt;DB&lt;/span&gt; that is keyed to a user (or&amp;nbsp;group)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;Using localStorage (persistent over&amp;nbsp;sessions)&lt;/h3&gt;
&lt;p&gt;Writing&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myKey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;somestring&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// only strings&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Reading&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myKey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;defaultValue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you need to store complex structures, you might serialize them in &lt;span class="caps"&gt;JSON&lt;/span&gt;. For example&amp;nbsp;:&lt;/p&gt;
&lt;p&gt;Reading&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;stored&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myKey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stored&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;stored&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nx"&gt;myVar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Writing&amp;nbsp;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nx"&gt;localStorage&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;myKey&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;JSON&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stringify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;myVar&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Note that you may use more than one key. They&amp;#8217;ll all be retrieved by all pages on the same&amp;nbsp;domain.&lt;/p&gt;
&lt;p&gt;Unless you want to be compatible with &lt;span class="caps"&gt;IE7&lt;/span&gt;, you have no reason to use the obsolete and small&amp;nbsp;cookies.&lt;/p&gt;
&lt;h3&gt;References&lt;/h3&gt;
&lt;p&gt;https://stackoverflow.com/questions/14266730/js-how-to-cache-a-variable&lt;/p&gt;</content></entry><entry><title>Sorting lists</title><link href="https://janiceto.github.io/programming-notes-blog/builtin-functions.html" rel="alternate"></link><published>2017-11-26T15:10:00+00:00</published><updated>2017-11-26T15:10:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-11-26:/programming-notes-blog/builtin-functions.html</id><summary type="html">&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; returns a &lt;strong&gt;new&lt;/strong&gt; sorted list, leaving the original list unaffected. &lt;code&gt;list.sort()&lt;/code&gt; sorts the list &lt;strong&gt;in-place&lt;/strong&gt;, mutating the list indices, and returns None (like all in-place&amp;nbsp;operations).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; works on any iterable, not just lists. Strings, tuples, dictionaries (you&amp;#8217;ll get the keys), generators, etc., returning a list containing …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; returns a &lt;strong&gt;new&lt;/strong&gt; sorted list, leaving the original list unaffected. &lt;code&gt;list.sort()&lt;/code&gt; sorts the list &lt;strong&gt;in-place&lt;/strong&gt;, mutating the list indices, and returns None (like all in-place&amp;nbsp;operations).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sorted()&lt;/code&gt; works on any iterable, not just lists. Strings, tuples, dictionaries (you&amp;#8217;ll get the keys), generators, etc., returning a list containing all elements,&amp;nbsp;sorted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;list.sort()&lt;/code&gt; when you want to mutate the list, sorted() when you want a new sorted object back. Use &lt;code&gt;sorted()&lt;/code&gt; when you want to sort something that is an iterable, not a list&amp;nbsp;yet.&lt;/li&gt;
&lt;li&gt;For lists, &lt;code&gt;list.sort()&lt;/code&gt; is faster than &lt;code&gt;sorted()&lt;/code&gt; because it doesn&amp;#8217;t have to create a copy. For any other iterable, you have no&amp;nbsp;choice.&lt;/li&gt;
&lt;li&gt;No, you cannot retrieve the original positions. Once you called &lt;code&gt;list.sort()&lt;/code&gt; the original order is&amp;nbsp;gone.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Useful&amp;nbsp;links:&lt;/h4&gt;
&lt;p&gt;https://stackoverflow.com/questions/22442378/what-is-the-difference-between-sortedlist-vs-list-sort-python
https://stackoverflow.com/questions/18761776/sort-list-of-dictionaries-by-multiple-keys-with-different-ordering&amp;nbsp;https://stackoverflow.com/questions/16082954/python-how-to-sort-a-list-of-dictionaries-by-several-values&lt;/p&gt;</content></entry><entry><title>Web scrapping with Beautiful Soup 4</title><link href="https://janiceto.github.io/programming-notes-blog/beautifulsoup4.html" rel="alternate"></link><published>2017-11-09T13:27:00+00:00</published><updated>2017-11-28T14:16:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-11-09:/programming-notes-blog/beautifulsoup4.html</id><summary type="html">&lt;h2&gt;Required&amp;nbsp;modules&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install beautifulsoup4
pip install lxml
pip instal html5lib
pip install requests
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;https://www.youtube.com/watch?v=ng2o98k983k&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Required&amp;nbsp;modules&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install beautifulsoup4
pip install lxml
pip instal html5lib
pip install requests
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Usage&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bs4&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;requests&lt;/span&gt;

&lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;requests&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;
&lt;span class="n"&gt;soup&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;BeautifulSoup&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;source&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;lxml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;References&lt;/h2&gt;
&lt;p&gt;https://www.youtube.com/watch?v=ng2o98k983k&lt;/p&gt;</content></entry><entry><title>*args and **kwargs</title><link href="https://janiceto.github.io/programming-notes-blog/args-kwargs.html" rel="alternate"></link><published>2017-10-13T11:58:00+01:00</published><updated>2017-10-13T11:58:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-10-13:/programming-notes-blog/args-kwargs.html</id><summary type="html">&lt;h3&gt;A normal&amp;nbsp;function:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Error&lt;/span&gt;
&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg three&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;*args&amp;nbsp;usage:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;A normal&amp;nbsp;function:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Error&lt;/span&gt;
&lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;arg one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;arg three&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;*args&amp;nbsp;usage:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;one&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;stuff&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stuff&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_list&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;green&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;yellow&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;blue&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;red&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;func3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;required one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;required two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;my_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;**kwargs&amp;nbsp;usage:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;items&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;my_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;key1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;key2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;key3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;span class="n"&gt;func4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;key1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value1&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;key3&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;value3&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Correct&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Development environments</title><link href="https://janiceto.github.io/programming-notes-blog/dev-environments.html" rel="alternate"></link><published>2017-09-29T14:40:00+01:00</published><updated>2017-10-04T13:28:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-29:/programming-notes-blog/dev-environments.html</id><summary type="html">&lt;p&gt;My prefered configurations and extensions in various development environments. Mostly focused on Python and web development. For Python I mostly use&amp;nbsp;Pycharm.&lt;/p&gt;
&lt;h2&gt;Atom&lt;/h2&gt;
&lt;h4&gt;Essentials&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio&amp;nbsp;Code&lt;/h2&gt;
&lt;h4&gt;Essentials&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Code Runner&lt;/a&gt; for Python and&amp;nbsp;more&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt; for web&amp;nbsp;dev&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Other&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"&gt;OneDark-Pro&amp;nbsp;theme&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=magicstack.MagicPython"&gt;Magic&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair&amp;nbsp;Colorizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary><content type="html">&lt;p&gt;My prefered configurations and extensions in various development environments. Mostly focused on Python and web development. For Python I mostly use&amp;nbsp;Pycharm.&lt;/p&gt;
&lt;h2&gt;Atom&lt;/h2&gt;
&lt;h4&gt;Essentials&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Visual Studio&amp;nbsp;Code&lt;/h2&gt;
&lt;h4&gt;Essentials&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=donjayamanne.python"&gt;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner"&gt;Code Runner&lt;/a&gt; for Python and&amp;nbsp;more&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=ritwickdey.LiveServer"&gt;Live Server&lt;/a&gt; for web&amp;nbsp;dev&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Other&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme"&gt;OneDark-Pro&amp;nbsp;theme&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=magicstack.MagicPython"&gt;Magic&amp;nbsp;Python&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer"&gt;Bracket Pair&amp;nbsp;Colorizer&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Classes and OOP (Object Oriented Programming)</title><link href="https://janiceto.github.io/programming-notes-blog/classes.html" rel="alternate"></link><published>2017-09-13T14:36:00+01:00</published><updated>2018-04-24T13:13:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-13:/programming-notes-blog/classes.html</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- class variable&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- instance variable&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- instance method&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- class method&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- function&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A function and a method are …&lt;/p&gt;</summary><content type="html">&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Foo&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- class variable&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- instance variable&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;- instance method&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;lt;-- class method&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;foobar&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;   &lt;span class="c1"&gt;# &amp;lt;-- function&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A function and a method are not the same thing, and a class and an instance are not the same thing, which is why a class variable/method and an instance variable/method are very definitely not the same&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;A class is like a blueprint, it tells you about some thing you want to make. An instance is the thing that gets&amp;nbsp;made. &lt;/p&gt;
&lt;p&gt;For example, if you write up a blueprint for an airplane, the blueprint is like when you define a class. The airplanes that get made from that blueprint are like instances of a&amp;nbsp;class. &lt;/p&gt;
&lt;p&gt;Defining a class looks like&amp;nbsp;this:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="k"&gt;pass&lt;/span&gt;  
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Normally you would have some more code instead of &lt;code&gt;pass&lt;/code&gt;. I&amp;#8217;ll explain that&amp;nbsp;later.)&lt;/p&gt;
&lt;p&gt;Now once you define a class you can create instances of a class like this, &lt;code&gt;Airplane()&lt;/code&gt;. For&amp;nbsp;example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;airplane1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;airplane2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Here we created two instances of the Airplane class and put them in the variables &lt;code&gt;airplane1&lt;/code&gt; and &lt;code&gt;airplane2&lt;/code&gt;. The important thing here is that you can change &lt;code&gt;airplane1&lt;/code&gt; without affecting &lt;code&gt;airplane2&lt;/code&gt;. They&amp;#8217;re two separate&amp;nbsp;instances.&lt;/p&gt;
&lt;p&gt;Okay now let&amp;#8217;s go back and talk about what goes inside a class. Let&amp;#8217;s take our Airplane class and fill it&amp;nbsp;out:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A new instance got made!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So what&amp;#8217;s going on here? &lt;code&gt;__init__&lt;/code&gt; is a function that gets run when you create an instance. That&amp;#8217;s it! So if you go back to where we created the two Airplane&amp;nbsp;instances,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;airplane1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;airplane2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;what would happen is, &amp;#8220;A new instance got made!&amp;#8221; would be printed out&amp;nbsp;twice.&lt;/p&gt;
&lt;p&gt;What about the &lt;code&gt;self&lt;/code&gt; parameter? I think this would be easier to understand if we added a new&amp;nbsp;method.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Airplane&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A new instance got made!&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fly&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;I&amp;#39;m flying!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So if you wanted to call this method you&amp;#8217;d do something like this: &lt;code&gt;airplane1.fly()&lt;/code&gt;. Actually this is the same thing as this: &lt;code&gt;Airplane.fly(airplane1)&lt;/code&gt;. Both of these would do the same thing, i.e. print out &amp;#8220;I&amp;#8217;m flying!&amp;#8221;. So &lt;code&gt;airplane1&lt;/code&gt; is the instance that we used to call our &lt;code&gt;fly&lt;/code&gt; method. This instance is what gets passed to &lt;code&gt;self&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Classes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Function, this lives outside a class&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;


&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Adder&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="c1"&gt;# __init__ roughly equivilant to a constructor in other languages&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="fm"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="c1"&gt;# Adding attributes to this instance of our class&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;
        &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="c1"&gt;# Method, This belongs to an instance of a class and must have self as first argument. self refers to an instance of a class&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;

    &lt;span class="c1"&gt;# CLass Method, belongs to a class and is shared by every instance of the class, must have the class as first argument&lt;/span&gt;
    &lt;span class="nd"&gt;@classmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;class_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;

    &lt;span class="c1"&gt;# Static Method, Only belongs to the class for organisation, can&amp;#39;t reference class or instance attributes&lt;/span&gt;
    &lt;span class="nd"&gt;@staticmethod&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;static_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;


&lt;span class="c1"&gt;# Let&amp;#39;s start with an instance initialized with values for a and b&lt;/span&gt;
&lt;span class="n"&gt;foo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# we call the add method of foo which refernces the values we initialized the class with&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Instance result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

&lt;span class="c1"&gt;# Class method doesnt require an instance, note no () after Adder, we arent creating an instance, just referencing the class&lt;/span&gt;
&lt;span class="n"&gt;bar&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;class_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Class result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bar&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Static, similar to classmethod we don&amp;#39;t need to create an instance&lt;/span&gt;
&lt;span class="n"&gt;baz&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Adder&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;static_add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Static result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;baz&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Finally we&amp;#39;ll just use our add function&lt;/span&gt;
&lt;span class="n"&gt;spam&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Function result&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;spam&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;References:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.reddit.com/r/learnpython/comments/1cpu7x/explain_classes_init_and_self_like_im_five/"&gt;https://www.reddit.com/r/learnpython/comments/1cpu7x/explain_classes_init_and_self_like_im_five/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Git Version Control System</title><link href="https://janiceto.github.io/programming-notes-blog/git.html" rel="alternate"></link><published>2017-09-11T10:41:00+01:00</published><updated>2018-08-30T13:55:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-11:/programming-notes-blog/git.html</id><summary type="html">&lt;h2&gt;Instalation on a Debian-based distribution, such as&amp;nbsp;Ubuntu&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update
$ sudo apt install git-all
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Starting&amp;nbsp;repositories&lt;/h3&gt;
&lt;p&gt;Clone an existing repository: &lt;code&gt;$ git clone ssh://user@domain.com/repo.git&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Create a new local repository: &lt;code&gt;$ git init&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Local&amp;nbsp;changes&lt;/h3&gt;
&lt;p&gt;Show changed files in your working directory: &lt;code&gt;$ git status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add all current …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Instalation on a Debian-based distribution, such as&amp;nbsp;Ubuntu&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt update
$ sudo apt install git-all
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Starting&amp;nbsp;repositories&lt;/h3&gt;
&lt;p&gt;Clone an existing repository: &lt;code&gt;$ git clone ssh://user@domain.com/repo.git&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Create a new local repository: &lt;code&gt;$ git init&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Local&amp;nbsp;changes&lt;/h3&gt;
&lt;p&gt;Show changed files in your working directory: &lt;code&gt;$ git status&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add all current changes to the next commit: &lt;code&gt;$ git add&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add some changes in &lt;file&gt; to the next commit: &lt;code&gt;$ git add -p &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Commit all local changes in tracked files: &lt;code&gt;$ git commit -a -m "Changed something"&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Working with remote&amp;nbsp;repository&lt;/h3&gt;
&lt;p&gt;Grab changes from remote: &lt;code&gt;$ git pull origin master&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If your default branch is different than master, you will need to specify the branch name: &lt;code&gt;git pull origin my_default_branch_name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Upload changes to remote: &lt;code&gt;$ git push origin master&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Remove a file from version&amp;nbsp;control&lt;/h3&gt;
&lt;p&gt;Remove the file from the Git repository and from the&amp;nbsp;filesystem&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rm file1.txt
$ git commit -m &lt;span class="s2"&gt;&amp;quot;remove file1.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But if you want to remove the file only from the Git repository and not remove it from the filesystem,&amp;nbsp;use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git rm --cached file1.txt
$ git commit -m &lt;span class="s2"&gt;&amp;quot;remove file1.txt&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then push changes to remote&amp;nbsp;repo&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git push origin branch_name  
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Hosting Python scripts and services</title><link href="https://janiceto.github.io/programming-notes-blog/hosting.html" rel="alternate"></link><published>2017-09-07T15:43:00+01:00</published><updated>2018-01-29T18:06:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-07:/programming-notes-blog/hosting.html</id><summary type="html">&lt;h2&gt;Hosting&amp;nbsp;options:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; (Free&amp;nbsp;Tier)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ec2"&gt;Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/a&gt; (Free&amp;nbsp;Tier)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pythonanywhere.com"&gt;Python Anywhaere&lt;/a&gt; (Free&amp;nbsp;Tier)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; (Free Tier disconects when inactive, 7$/month&amp;nbsp;Min)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com"&gt;Digital Ocean&lt;/a&gt; (5$/month Min, 50$ credit from Github Student&amp;nbsp;Pack)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/"&gt;Linode&lt;/a&gt; (5$/month&amp;nbsp;Min)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful&amp;nbsp;Software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.putty.org/"&gt;PuTTY&lt;/a&gt; - for &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;access&lt;/li&gt;
&lt;li&gt;&lt;a href="https://winscp.net/eng/index.php"&gt;WinSCP&lt;/a&gt; - To transfer files to …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;h2&gt;Hosting&amp;nbsp;options:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://cloud.google.com/appengine/"&gt;Google App Engine&lt;/a&gt; (Free&amp;nbsp;Tier)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aws.amazon.com/ec2"&gt;Amazon &lt;span class="caps"&gt;EC2&lt;/span&gt;&lt;/a&gt; (Free&amp;nbsp;Tier)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.pythonanywhere.com"&gt;Python Anywhaere&lt;/a&gt; (Free&amp;nbsp;Tier)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.heroku.com/"&gt;Heroku&lt;/a&gt; (Free Tier disconects when inactive, 7$/month&amp;nbsp;Min)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.digitalocean.com"&gt;Digital Ocean&lt;/a&gt; (5$/month Min, 50$ credit from Github Student&amp;nbsp;Pack)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.linode.com/"&gt;Linode&lt;/a&gt; (5$/month&amp;nbsp;Min)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Useful&amp;nbsp;Software&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.putty.org/"&gt;PuTTY&lt;/a&gt; - for &lt;span class="caps"&gt;SSH&lt;/span&gt;&amp;nbsp;access&lt;/li&gt;
&lt;li&gt;&lt;a href="https://winscp.net/eng/index.php"&gt;WinSCP&lt;/a&gt; - To transfer files to the&amp;nbsp;server&lt;/li&gt;
&lt;li&gt;&lt;a href="https://filezilla-project.org/"&gt;FileZilla&lt;/a&gt; - An alternative to&amp;nbsp;WinSCP&lt;/li&gt;
&lt;li&gt;&lt;a href=""&gt;git&lt;/a&gt; - For pulling code from remote&amp;nbsp;repository&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Using&amp;nbsp;git&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ apt-get install git
$ git clone &amp;lt;git url&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Useful&amp;nbsp;references&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://nikolak.com/deploying-python-code-to-vps/"&gt;Running python scripts on a &lt;span class="caps"&gt;VPS&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;</content></entry><entry><title>Linux Crontab</title><link href="https://janiceto.github.io/programming-notes-blog/crontab.html" rel="alternate"></link><published>2017-09-07T10:44:00+01:00</published><updated>2017-11-05T20:36:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-07:/programming-notes-blog/crontab.html</id><summary type="html">&lt;p&gt;To view currently active crontab entries: &lt;code&gt;$ sudo crontab -l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To enter the edit the crontab enter the following command in the terminal: &lt;code&gt;$ sudo crontab -e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don&amp;#8217;t use &lt;code&gt;sudo&lt;/code&gt; in a cron job. Instead edit root&amp;#8217;s crontab instead of your own, e.g. &lt;code&gt;sudo crontab -e&lt;/code&gt; and then …&lt;/p&gt;</summary><content type="html">&lt;p&gt;To view currently active crontab entries: &lt;code&gt;$ sudo crontab -l&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To enter the edit the crontab enter the following command in the terminal: &lt;code&gt;$ sudo crontab -e&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Don&amp;#8217;t use &lt;code&gt;sudo&lt;/code&gt; in a cron job. Instead edit root&amp;#8217;s crontab instead of your own, e.g. &lt;code&gt;sudo crontab -e&lt;/code&gt; and then enter commands without &lt;code&gt;sudo&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;At the bottom of the file enter one line for each task in the following&amp;nbsp;format:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Minute   Hour   Day of Month       Month          Day of Week        Command    
(0-59)  (0-23)     (1-31)    (1-12 or Jan-Dec)  (0-6 or Sun-Sat)               
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The command must use a complete link. Instead of the first five fields, one of eight special strings may&amp;nbsp;appear:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;string&lt;/th&gt;
&lt;th&gt;meaning&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;@reboot&lt;/td&gt;
&lt;td&gt;Run once, at startup.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@yearly&lt;/td&gt;
&lt;td&gt;Run once a year, &amp;#8220;0 0 1 1 *&amp;#8221;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@annually&lt;/td&gt;
&lt;td&gt;(same as @yearly)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@monthly&lt;/td&gt;
&lt;td&gt;Run once a month, &amp;#8220;0 0 1 * *&amp;#8221;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@weekly&lt;/td&gt;
&lt;td&gt;Run once a week, &amp;#8220;0 0 * * 0&amp;#8221;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@daily&lt;/td&gt;
&lt;td&gt;Run once a day, &amp;#8220;0 0 * &lt;em&gt; &lt;/em&gt;&amp;#8220;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@midnight&lt;/td&gt;
&lt;td&gt;(same as @daily)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;@hourly&lt;/td&gt;
&lt;td&gt;Run once an hour, &amp;#8220;0 * &lt;em&gt; * &lt;/em&gt;&amp;#8220;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;Example 1: Run a python script every day a&amp;nbsp;16:15&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;15 16 * * * sudo python /home/pi/projects/script1.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;Example 2: Run a python script every five days a&amp;nbsp;18:30&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;30 18 */5 * * sudo python /home/pi/projects/script1.py
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Helpfull&amp;nbsp;links:&lt;/h3&gt;
&lt;p&gt;https://crontab.guru&lt;/p&gt;</content></entry><entry><title>Keep SSH sessions running after disconnecting</title><link href="https://janiceto.github.io/programming-notes-blog/keep-ssh-running.html" rel="alternate"></link><published>2017-09-07T10:44:00+01:00</published><updated>2017-09-07T10:44:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-07:/programming-notes-blog/keep-ssh-running.html</id><summary type="html">&lt;h3&gt;Using&amp;nbsp;nohup&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup long-running-process &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Using &lt;span class="caps"&gt;GNU&lt;/span&gt;&amp;nbsp;Screen&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen             &lt;span class="c1"&gt;# to start a screen session&lt;/span&gt;
$ run-a-process
CTRL+a , d           &lt;span class="c1"&gt;# to detatch from your screen session&lt;/span&gt;
$ &lt;span class="nb"&gt;exit&lt;/span&gt;               &lt;span class="c1"&gt;# to disconnect from the server, while run-a-process continues&lt;/span&gt;
$ screen -r          &lt;span class="c1"&gt;# to resume the screen session when you come back to your laptop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Using&amp;nbsp;tmux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="n"&gt;tmux …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Using&amp;nbsp;nohup&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ nohup long-running-process &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
$ &lt;span class="nb"&gt;exit&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Using &lt;span class="caps"&gt;GNU&lt;/span&gt;&amp;nbsp;Screen&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ screen             &lt;span class="c1"&gt;# to start a screen session&lt;/span&gt;
$ run-a-process
CTRL+a , d           &lt;span class="c1"&gt;# to detatch from your screen session&lt;/span&gt;
$ &lt;span class="nb"&gt;exit&lt;/span&gt;               &lt;span class="c1"&gt;# to disconnect from the server, while run-a-process continues&lt;/span&gt;
$ screen -r          &lt;span class="c1"&gt;# to resume the screen session when you come back to your laptop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Using&amp;nbsp;tmux&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="n"&gt;tmux&lt;/span&gt;               &lt;span class="c c-Singleline"&gt;# to start a screen session&lt;/span&gt;
$ &lt;span class="n"&gt;run-a-process&lt;/span&gt;
&lt;span class="n"&gt;Ctrl&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="n"&gt;then&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;        &lt;span class="c c-Singleline"&gt;# to detatch from your session&lt;/span&gt;
$ &lt;span class="n"&gt;tmux&lt;/span&gt; &lt;span class="n"&gt;attach&lt;/span&gt;        &lt;span class="c c-Singleline"&gt;# to resume the session when you come back to your laptop&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Create a Windows batch script</title><link href="https://janiceto.github.io/programming-notes-blog/batch-script.html" rel="alternate"></link><published>2017-09-07T10:43:00+01:00</published><updated>2017-09-07T10:43:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-09-07:/programming-notes-blog/batch-script.html</id><summary type="html">&lt;p&gt;A batch file is a text file with the extension &lt;strong&gt;.bat&lt;/strong&gt; that contains one or more command line commands to be run&amp;nbsp;consecutively. &lt;/p&gt;
&lt;h2&gt;Some usefull&amp;nbsp;commands:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;@echo&lt;/strong&gt; - This parameter will allow you to view your working script in the command prompt. This parameter is useful for viewing your working code …&lt;/p&gt;</summary><content type="html">&lt;p&gt;A batch file is a text file with the extension &lt;strong&gt;.bat&lt;/strong&gt; that contains one or more command line commands to be run&amp;nbsp;consecutively. &lt;/p&gt;
&lt;h2&gt;Some usefull&amp;nbsp;commands:&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;@echo&lt;/strong&gt; - This parameter will allow you to view your working script in the command prompt. This parameter is useful for viewing your working code. If any issues arise from the batch file, you will be able to view the issues associated with your script using the echo function. Adding a following off to this parameter will allow you to quickly close your script after it has&amp;nbsp;finished.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;title&lt;/strong&gt; - This will provide a title for your batch script in your Command Prompt&amp;nbsp;window.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;cls&lt;/strong&gt; - Clears your command prompt, best used when extraneous code can make what you’re accessing had to&amp;nbsp;find.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;rem&lt;/strong&gt; &lt;span class="caps"&gt;OR&lt;/span&gt; &lt;strong&gt;::&lt;/strong&gt; - Shorthand for remark. Rem statements are not entered into your code. Instead, they are used to explain and give information regarding the&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;%%a&lt;/strong&gt; - Each file in the&amp;nbsp;folder.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;(“.\”)&lt;/strong&gt; - The root folder. When using the command prompt, one must direct the prompt to a particular directory before changing a files name, deleting a file, and so on. With batch files, you only need to paste your .bat file into the directory of your&amp;nbsp;choosing.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pause&lt;/strong&gt; - Allows a break in the logical chain of your .bat file. This allows for users to read over command lines before proceeding with the code. The phrase “Press any key to continue…” will denote a&amp;nbsp;pause.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;start “” [website]&lt;/strong&gt; - Will head to a website of your choice using your default web&amp;nbsp;browser.&lt;/p&gt;
&lt;p&gt;A complete list can be found &lt;a href="https://en.wikibooks.org/wiki/Windows_Batch_Scripting"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Useful batch&amp;nbsp;files:&lt;/h2&gt;
&lt;h3&gt;Start Flask&amp;nbsp;server&lt;/h3&gt;
&lt;p&gt;The following script starts a Flask development server provided the batch file is located in the project root&amp;nbsp;directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;echo off
cd %localhost%
call venv\Scripts\activate.bat
start python dashboard\__init__.py
pause
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>CSS selectors</title><link href="https://janiceto.github.io/programming-notes-blog/css-selectors.html" rel="alternate"></link><published>2017-08-15T23:10:00+01:00</published><updated>2017-08-15T23:10:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-15:/programming-notes-blog/css-selectors.html</id><summary type="html">&lt;p&gt;In &lt;span class="caps"&gt;CSS&lt;/span&gt;, selectors are patterns used to select the element(s) you want to&amp;nbsp;style.&lt;/p&gt;
&lt;p&gt;The &amp;#8220;&lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;#8221; column indicates in which &lt;span class="caps"&gt;CSS&lt;/span&gt; version the property is defined (&lt;span class="caps"&gt;CSS1&lt;/span&gt;, &lt;span class="caps"&gt;CSS2&lt;/span&gt;, or &lt;span class="caps"&gt;CSS3&lt;/span&gt;).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Example description&lt;/th&gt;
&lt;th&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;.intro&lt;/td&gt;
&lt;td&gt;Selects all elements with class=&amp;#8221;intro&amp;#8221;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;#firstname&lt;/td&gt;
&lt;td&gt;Selects the element …&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;In &lt;span class="caps"&gt;CSS&lt;/span&gt;, selectors are patterns used to select the element(s) you want to&amp;nbsp;style.&lt;/p&gt;
&lt;p&gt;The &amp;#8220;&lt;span class="caps"&gt;CSS&lt;/span&gt;&amp;#8221; column indicates in which &lt;span class="caps"&gt;CSS&lt;/span&gt; version the property is defined (&lt;span class="caps"&gt;CSS1&lt;/span&gt;, &lt;span class="caps"&gt;CSS2&lt;/span&gt;, or &lt;span class="caps"&gt;CSS3&lt;/span&gt;).&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Selector&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Example description&lt;/th&gt;
&lt;th&gt;&lt;span class="caps"&gt;CSS&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;.class&lt;/td&gt;
&lt;td&gt;.intro&lt;/td&gt;
&lt;td&gt;Selects all elements with class=&amp;#8221;intro&amp;#8221;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;#id&lt;/td&gt;
&lt;td&gt;#firstname&lt;/td&gt;
&lt;td&gt;Selects the element with id=&amp;#8221;firstname&amp;#8221;&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;Selects all elements&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;Selects all&amp;lt;p&amp;gt; elements&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element,element&lt;/td&gt;
&lt;td&gt;div, p&lt;/td&gt;
&lt;td&gt;Selects all &amp;lt;div&amp;gt; elements and all &amp;lt;p&amp;gt; elements&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element element&lt;/td&gt;
&lt;td&gt;div p&lt;/td&gt;
&lt;td&gt;Selects all &amp;lt;p&amp;gt; elements inside &amp;lt;div&amp;gt; elements&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element&amp;gt;element&lt;/td&gt;
&lt;td&gt;div &amp;gt; p&lt;/td&gt;
&lt;td&gt;Selects all &amp;lt;p&amp;gt; elements where the parent is a &amp;lt;div&amp;gt; element&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element+element&lt;/td&gt;
&lt;td&gt;div + p&lt;/td&gt;
&lt;td&gt;Selects all &amp;lt;p&amp;gt; elements that are placed immediately after &amp;lt;div&amp;gt; elements&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element1~element2&lt;/td&gt;
&lt;td&gt;p ~ ul&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;ul&amp;gt; element that are preceded by a &amp;lt;p&amp;gt; element&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:active&lt;/td&gt;
&lt;td&gt;a:active&lt;/td&gt;
&lt;td&gt;Selects the active link&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::after&lt;/td&gt;
&lt;td&gt;p::after&lt;/td&gt;
&lt;td&gt;Insert something after the content of each &amp;lt;p&amp;gt; element&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::before&lt;/td&gt;
&lt;td&gt;p::before&lt;/td&gt;
&lt;td&gt;Insert something before the content of each &amp;lt;p&amp;gt; element&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:checked&lt;/td&gt;
&lt;td&gt;input:checked&lt;/td&gt;
&lt;td&gt;Selects every checked &amp;lt;input&amp;gt; element&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:disabled&lt;/td&gt;
&lt;td&gt;input:disabled&lt;/td&gt;
&lt;td&gt;Selects every disabled &amp;lt;input&amp;gt; element&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:empty&lt;/td&gt;
&lt;td&gt;p:empty&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that has no children (including text nodes)&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:enabled&lt;/td&gt;
&lt;td&gt;input:enabled&lt;/td&gt;
&lt;td&gt;Selects every enabled &amp;lt;input&amp;gt; element&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-child&lt;/td&gt;
&lt;td&gt;p:first-child&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the first child of its parent&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::first-letter&lt;/td&gt;
&lt;td&gt;p::first-letter&lt;/td&gt;
&lt;td&gt;Selects the first letter of every &amp;lt;p&amp;gt; element&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::first-line&lt;/td&gt;
&lt;td&gt;p::first-line&lt;/td&gt;
&lt;td&gt;Selects the first line of every &amp;lt;p&amp;gt; element&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:first-of-type&lt;/td&gt;
&lt;td&gt;p:first-of-type&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the first &amp;lt;p&amp;gt; element of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:focus&lt;/td&gt;
&lt;td&gt;input:focus&lt;/td&gt;
&lt;td&gt;Selects the input element which has focus&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:hover&lt;/td&gt;
&lt;td&gt;a:hover&lt;/td&gt;
&lt;td&gt;Selects links on mouse over&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:in-range&lt;/td&gt;
&lt;td&gt;input:in-range&lt;/td&gt;
&lt;td&gt;Selects input elements with a value within a specified range&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:invalid&lt;/td&gt;
&lt;td&gt;input:invalid&lt;/td&gt;
&lt;td&gt;Selects all input elements with an invalid value&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:lang(language)&lt;/td&gt;
&lt;td&gt;p:lang(it)&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element with a lang attribute equal to &amp;#8220;it&amp;#8221; (Italian)&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-child&lt;/td&gt;
&lt;td&gt;p:last-child&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the last child of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:last-of-type&lt;/td&gt;
&lt;td&gt;p:last-of-type&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the last &amp;lt;p&amp;gt; element of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:link&lt;/td&gt;
&lt;td&gt;a:link&lt;/td&gt;
&lt;td&gt;Selects all unvisited links&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:not(selector)&lt;/td&gt;
&lt;td&gt;:not(p)&lt;/td&gt;
&lt;td&gt;Selects every element that is not a &amp;lt;p&amp;gt; element&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-child(n)&lt;/td&gt;
&lt;td&gt;p:nth-child(2)&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the second child of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-child(n)&lt;/td&gt;
&lt;td&gt;p:nth-last-child(2)&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the second child of its parent, counting from the last child&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-last-of-type(n)&lt;/td&gt;
&lt;td&gt;p:nth-last-of-type(2)&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the second &amp;lt;p&amp;gt; element of its parent, counting from the last child&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:nth-of-type(n)&lt;/td&gt;
&lt;td&gt;p:nth-of-type(2)&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the second &amp;lt;p&amp;gt; element of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-of-type&lt;/td&gt;
&lt;td&gt;p:only-of-type&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the only &amp;lt;p&amp;gt; element of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:only-child&lt;/td&gt;
&lt;td&gt;p:only-child&lt;/td&gt;
&lt;td&gt;Selects every &amp;lt;p&amp;gt; element that is the only child of its parent&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:optional&lt;/td&gt;
&lt;td&gt;input:optional&lt;/td&gt;
&lt;td&gt;Selects input elements with no &amp;#8220;required&amp;#8221; attribute&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:out-of-range&lt;/td&gt;
&lt;td&gt;input:out-of-range&lt;/td&gt;
&lt;td&gt;Selects input elements with a value outside a specified range&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:read-only&lt;/td&gt;
&lt;td&gt;input:read-only&lt;/td&gt;
&lt;td&gt;Selects input elements with the &amp;#8220;readonly&amp;#8221; attribute specified&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:read-write&lt;/td&gt;
&lt;td&gt;input:read-write&lt;/td&gt;
&lt;td&gt;Selects input elements with the &amp;#8220;readonly&amp;#8221; attribute &lt;span class="caps"&gt;NOT&lt;/span&gt; specified&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:required&lt;/td&gt;
&lt;td&gt;input:required&lt;/td&gt;
&lt;td&gt;Selects input elements with the &amp;#8220;required&amp;#8221; attribute specified&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:root&lt;/td&gt;
&lt;td&gt;:root&lt;/td&gt;
&lt;td&gt;Selects the document&amp;#8217;s root element&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;::selection&lt;/td&gt;
&lt;td&gt;::selection&lt;/td&gt;
&lt;td&gt;Selects the portion of an element that is selected by a user&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:target&lt;/td&gt;
&lt;td&gt;#news:target&lt;/td&gt;
&lt;td&gt;Selects the current active #news element (clicked on a &lt;span class="caps"&gt;URL&lt;/span&gt; containing that anchor name)&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:valid&lt;/td&gt;
&lt;td&gt;input:valid&lt;/td&gt;
&lt;td&gt;Selects all input elements with a valid value&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;:visited&lt;/td&gt;
&lt;td&gt;a:visited&lt;/td&gt;
&lt;td&gt;Selects all visited links&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content></entry><entry><title>Interfacing with Strava API using stavalib</title><link href="https://janiceto.github.io/programming-notes-blog/stravalib.html" rel="alternate"></link><published>2017-08-12T16:08:00+01:00</published><updated>2017-08-13T19:54:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-12:/programming-notes-blog/stravalib.html</id><summary type="html">&lt;h3&gt;Instalation:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$ pip install stravalib&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Usage:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stravalib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fgd456fgs5dgs546dfg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;athlete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_athlete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Get your athlete profile&lt;/span&gt;
&lt;span class="n"&gt;athlete2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_athlete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;227615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# By providing an athlete ID you can access other people&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get a given activity, use the get_activity function and provide&amp;nbsp;activity_id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;207650614 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Instalation:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;$ pip install stravalib&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Usage:&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;stravalib&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;

&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;access_token&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;fgd456fgs5dgs546dfg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;athlete&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_athlete&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# Get your athlete profile&lt;/span&gt;
&lt;span class="n"&gt;athlete2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_athlete&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;227615&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# By providing an athlete ID you can access other people&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To get a given activity, use the get_activity function and provide&amp;nbsp;activity_id:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_activity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;207650614&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Activity object has many basic properties such as type and distance.&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;type={0.type} distance={1} km&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unithelper&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kilometers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;distance&lt;/span&gt;&lt;span class="p"&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Activity&amp;nbsp;information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Activities can have many streams, you can request desired stream types&lt;/span&gt;
&lt;span class="n"&gt;types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;time&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;latlng&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;altitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;heartrate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;temp&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;streams&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_activity_streams&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;123&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;types&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;resolution&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;medium&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#  Result is a dictionary object.  The dict&amp;#39;s key are the stream type.&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;altitude&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;keys&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;streams&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;altitude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;List of&amp;nbsp;Activities:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_activities&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;after&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;2010-01-01T00:00:00Z&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;  &lt;span class="c1"&gt;# To get newest to oldest use before argument.&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;{0.name} {0.moving_time}&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;activity&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Official&amp;nbsp;documentation&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://strava.github.io/api/"&gt;Strava &lt;span class="caps"&gt;API&lt;/span&gt;&amp;nbsp;Docs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://pythonhosted.org/stravalib/index.html"&gt;stravalib&amp;nbsp;Docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content></entry><entry><title>Image manipulation in Python</title><link href="https://janiceto.github.io/programming-notes-blog/image-manipulation.html" rel="alternate"></link><published>2017-08-12T15:24:00+01:00</published><updated>2017-08-12T15:24:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-12:/programming-notes-blog/image-manipulation.html</id><summary type="html">&lt;p&gt;The &lt;strong&gt;Python Imaging Library&lt;/strong&gt; (&lt;span class="caps"&gt;PIL&lt;/span&gt;) development has stagnated, with its last release in 2009. Luckily, there’s an actively-developed fork of &lt;span class="caps"&gt;PIL&lt;/span&gt; called &lt;strong&gt;Pillow&lt;/strong&gt;.
&lt;strong&gt;Pillow&lt;/strong&gt; is easier to install, runs on all operating systems, and supports Python&amp;nbsp;3.&lt;/p&gt;
&lt;h2&gt;Pillow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pillow and &lt;span class="caps"&gt;PIL&lt;/span&gt; cannot co-exist in the same environment. Before installing …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;The &lt;strong&gt;Python Imaging Library&lt;/strong&gt; (&lt;span class="caps"&gt;PIL&lt;/span&gt;) development has stagnated, with its last release in 2009. Luckily, there’s an actively-developed fork of &lt;span class="caps"&gt;PIL&lt;/span&gt; called &lt;strong&gt;Pillow&lt;/strong&gt;.
&lt;strong&gt;Pillow&lt;/strong&gt; is easier to install, runs on all operating systems, and supports Python&amp;nbsp;3.&lt;/p&gt;
&lt;h2&gt;Pillow&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Pillow and &lt;span class="caps"&gt;PIL&lt;/span&gt; cannot co-exist in the same environment. Before installing Pillow, please uninstall &lt;span class="caps"&gt;PIL&lt;/span&gt;.&lt;/li&gt;
&lt;li&gt;Pillow &amp;gt;= 2.0.0 supports Python versions 2.6, 2.7, 3.2, 3.3,&amp;nbsp;3.4&lt;/li&gt;
&lt;li&gt;Before installing Pillow, you’ll have to install Pillow’s prerequisites. &lt;a href="https://pillow.readthedocs.io/en/3.0.0/installation.html"&gt;Instructions here&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Instalation:&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Windows&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ pip install Pillow&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Linux (Debian or Ubuntu)&lt;/strong&gt;: &lt;/p&gt;
&lt;p&gt;Make sure you have Python’s development libraries installed. In Debian or Ubuntu: &lt;code&gt;$ sudo apt-get install python3-dev python3-setuptools&lt;/code&gt;
Prerequisites are installed on Ubuntu 12.04 &lt;span class="caps"&gt;LTS&lt;/span&gt; or Raspian Wheezy 7.0 with: &lt;code&gt;$ sudo apt-get install libtiff4-dev libjpeg8-dev zlib1g-dev libfreetype6-dev liblcms2-dev libwebp-dev tcl8.5-dev tk8.5-dev python-tk&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;$ pip install Pillow&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;PIL&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ImageFilter&lt;/span&gt;
&lt;span class="c1"&gt;#Read image&lt;/span&gt;
&lt;span class="n"&gt;im&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image.jpg&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Display image&lt;/span&gt;
&lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#Applying a filter to the image&lt;/span&gt;
&lt;span class="n"&gt;im_sharp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;ImageFilter&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SHARPEN&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;#Saving the filtered image to a new file&lt;/span&gt;
&lt;span class="n"&gt;im_sharp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image_sharpened.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;JPEG&amp;#39;&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;#Splitting the image into its respective bands, i.e. Red, Green,&lt;/span&gt;
&lt;span class="c1"&gt;#and Blue for RGB&lt;/span&gt;
&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im_sharp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;#Viewing EXIF data embedded in image&lt;/span&gt;
&lt;span class="n"&gt;exif_data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;im&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_getexif&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;exif_data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>String formatting in Python</title><link href="https://janiceto.github.io/programming-notes-blog/string-formatting.html" rel="alternate"></link><published>2017-08-10T22:13:00+01:00</published><updated>2017-08-10T22:13:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-10:/programming-notes-blog/string-formatting.html</id><summary type="html">&lt;h3&gt;F-strings (Python&amp;nbsp;&amp;gt;=3.6)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My app name is {name}.&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;#39;My app name is Test.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;New method (Python&amp;nbsp;&amp;gt;=2.6)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;one two&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{} {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;1 2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Old&amp;nbsp;method&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;one two&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;1 2 …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;F-strings (Python&amp;nbsp;&amp;gt;=3.6)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Test&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;My app name is {name}.&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# &amp;#39;My app name is Test.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;New method (Python&amp;nbsp;&amp;gt;=2.6)&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;one two&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;{} {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;1 2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Old&amp;nbsp;method&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;one&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;two&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;one two&amp;#39;&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt; &lt;/span&gt;&lt;span class="si"&gt;%d&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# Output: &amp;#39;1 2&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Number&amp;nbsp;formatting&lt;/h3&gt;
&lt;p&gt;The following table shows various ways to format numbers using str.format(), including examples for both float formatting and&amp;nbsp;integers.&lt;/p&gt;
&lt;p&gt;To run examples use &lt;code&gt;print("FORMAT".format(NUMBER))&lt;/code&gt;. So to get the output of the first example, you would run: &lt;code&gt;print("{:.2f}".format(3.1415926))&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Number&lt;/th&gt;
&lt;th&gt;Format&lt;/th&gt;
&lt;th&gt;Output&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;3.1415926&lt;/td&gt;
&lt;td class="2f"&gt;&lt;/td&gt;
&lt;td&gt;3.14&lt;/td&gt;
&lt;td&gt;2 decimal places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.1415926&lt;/td&gt;
&lt;td _.2f="+.2f"&gt;&lt;/td&gt;
&lt;td&gt;+3.14&lt;/td&gt;
&lt;td&gt;2 decimal places with sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;-1&lt;/td&gt;
&lt;td _.2f="+.2f"&gt;&lt;/td&gt;
&lt;td&gt;-1.00&lt;/td&gt;
&lt;td&gt;2 decimal places with sign&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2.71828&lt;/td&gt;
&lt;td class="0f"&gt;&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;No decimal places&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td 0_2d="0&amp;gt;2d"&gt;&lt;/td&gt;
&lt;td&gt;05&lt;/td&gt;
&lt;td&gt;Pad number with zeros (left padding, width 2)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td x_4d="x&amp;lt;4d"&gt;&lt;/td&gt;
&lt;td&gt;5xxx&lt;/td&gt;
&lt;td&gt;Pad number with x’s (right padding, width 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td x_4d="x&amp;lt;4d"&gt;&lt;/td&gt;
&lt;td&gt;10xx&lt;/td&gt;
&lt;td&gt;Pad number with x’s (right padding, width 4)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000000&lt;/td&gt;
&lt;td _=","&gt;&lt;/td&gt;
&lt;td&gt;1,000,000&lt;/td&gt;
&lt;td&gt;Number format with comma separator&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;0.25&lt;/td&gt;
&lt;td class="2%"&gt;&lt;/td&gt;
&lt;td&gt;25.00%&lt;/td&gt;
&lt;td&gt;Format percentage&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1000000000&lt;/td&gt;
&lt;td class="2e"&gt;&lt;/td&gt;
&lt;td&gt;1.00e+09&lt;/td&gt;
&lt;td&gt;Exponent notation&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td 10d&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Right aligned (default, width 10)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td _10d="&amp;lt;10d"&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Left aligned (width 10)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td _10d="^10d"&gt;&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Center aligned (width 10)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</content></entry><entry><title>Storing dictionaries for later use: JSON and Pickle</title><link href="https://janiceto.github.io/programming-notes-blog/store-dicts.html" rel="alternate"></link><published>2017-08-09T16:31:00+01:00</published><updated>2017-08-12T15:07:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-09:/programming-notes-blog/store-dicts.html</id><summary type="html">&lt;h2&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Saving:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supply extra arguments like sort_keys or indent to get a pretty result. The argument sort_keys will sort the keys alphabetically and indent will indent your data structure with indent=N&amp;nbsp;spaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h2&gt;&lt;span class="caps"&gt;JSON&lt;/span&gt;&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Saving:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;json&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Supply extra arguments like sort_keys or indent to get a pretty result. The argument sort_keys will sort the keys alphabetically and indent will indent your data structure with indent=N&amp;nbsp;spaces.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;sort_keys&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;indent&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Loading:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.json&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;json&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;json.dump() vs json.dumps(), json.load() vs&amp;nbsp;json.loads()&lt;/h4&gt;
&lt;p&gt;If you want to dump the &lt;span class="caps"&gt;JSON&lt;/span&gt; into a file/socket or whatever, then you should go for &lt;code&gt;dump()&lt;/code&gt;. If you only need it as a string (for printing, parsing or whatever) then use &lt;code&gt;dumps()&lt;/code&gt; (dump string). The functions with an &lt;code&gt;s&lt;/code&gt; take string parameters. The others take file&amp;nbsp;streams.&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Pickle&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Saving:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cPickle&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pickle&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dump&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;Loading:&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data.p&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pickle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Building a Flask site</title><link href="https://janiceto.github.io/programming-notes-blog/flask.html" rel="alternate"></link><published>2017-08-07T12:00:00+01:00</published><updated>2017-08-07T12:00:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-07:/programming-notes-blog/flask.html</id><summary type="html">&lt;h3&gt;Installing Flask and other usefull Python&amp;nbsp;modules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Flask
pip install flask-mysqldb
pip install Flask-WTF
pip install passlib
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Project file&amp;nbsp;structure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/flask-site
    /venv
    /flask-site
        __init__.py
        /static
            style.css
        /templates
            layout.html
            index.html
            about.html
            ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The &lt;code&gt;__init__.py&lt;/code&gt; file&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session …&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;h3&gt;Installing Flask and other usefull Python&amp;nbsp;modules&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install Flask
pip install flask-mysqldb
pip install Flask-WTF
pip install passlib
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Project file&amp;nbsp;structure&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;/flask-site
    /venv
    /flask-site
        __init__.py
        /static
            style.css
        /templates
            layout.html
            index.html
            about.html
            ...
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;The &lt;code&gt;__init__.py&lt;/code&gt; file&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;url_for&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;

&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Home page route&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;index&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;index.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# About page route&lt;/span&gt;
&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/about&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;about&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_template&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;about.html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;secret_key&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;secret123&amp;#39;&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Using MySQL in Python</title><link href="https://janiceto.github.io/programming-notes-blog/mysql.html" rel="alternate"></link><published>2017-08-04T11:13:00+01:00</published><updated>2017-09-06T23:09:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-04:/programming-notes-blog/mysql.html</id><summary type="html">&lt;h3&gt;Some basic MySQL&amp;nbsp;commands&lt;/h3&gt;
&lt;p&gt;In MySQL a &lt;code&gt;DATABASE&lt;/code&gt; is composed by one or more &lt;code&gt;TABLE&lt;/code&gt;s. Typically you create a database for each&amp;nbsp;project.&lt;/p&gt;
&lt;h5&gt;To create a new MySQL database named &lt;code&gt;database_name&lt;/code&gt; (the starting point of a new project using&amp;nbsp;MySQL):&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE database_name;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Show all databases:  &lt;code&gt;SHOW DATABASES;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;To …&lt;/h5&gt;</summary><content type="html">&lt;h3&gt;Some basic MySQL&amp;nbsp;commands&lt;/h3&gt;
&lt;p&gt;In MySQL a &lt;code&gt;DATABASE&lt;/code&gt; is composed by one or more &lt;code&gt;TABLE&lt;/code&gt;s. Typically you create a database for each&amp;nbsp;project.&lt;/p&gt;
&lt;h5&gt;To create a new MySQL database named &lt;code&gt;database_name&lt;/code&gt; (the starting point of a new project using&amp;nbsp;MySQL):&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE DATABASE database_name;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Show all databases:  &lt;code&gt;SHOW DATABASES;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;To start using a database you&amp;nbsp;must:&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;USE database_name;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;To create a new table named users (an&amp;nbsp;example):&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;CREATE TABLE users(id INT(11) AUTO_INCREMENT PRIMARY KEY, name VARCHAR(100), email VARCHAR(100), username VARCHAR(30), password VARCHAR(100), register_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Show all tables:  &lt;code&gt;SHOW TABLES;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Get info on a &lt;span class="caps"&gt;TABLE&lt;/span&gt; (in this example users): &lt;code&gt;DESCRIBE users;&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Add data to table via&amp;nbsp;command:&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;INSERT INTO users(name, email, username, password) VALUES(x, x, x, x)
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;Typical&amp;nbsp;queries:&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;SELECT * FROM users;&lt;/code&gt;  Select all rows from users&amp;nbsp;table&lt;/p&gt;
&lt;h2&gt;Copying a database to another&amp;nbsp;server&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;One the server where the &lt;span class="caps"&gt;DB&lt;/span&gt; is located make a backup file by running the following command (on Windows it may be necessary to &lt;code&gt;cd Program Files/MySQL/MySQL Server 5.1/bin&lt;/code&gt; first: &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;mysqldump -u root -p database_name &amp;gt; C:\Users\USER\Desktop\database_name.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Alternatively: &lt;code&gt;mysqldump -u[root] -p[password] database_123 &amp;gt; C:\Users\USER\Desktop\database_123.sql&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If getting an &amp;#8220;Access Denied&amp;#8221; it message probably means you are outputing to a directory where you have no permission to create&amp;nbsp;files.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;On the second server create a new database using the same database&amp;nbsp;name:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;mysql -u root -p&lt;/code&gt; to start the MySQL&amp;nbsp;shell&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CREATE DATABASE database_123;&lt;/code&gt; to create the new &lt;span class="caps"&gt;DB&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Copy the created backup to the second server and import&amp;nbsp;it:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;mysql -u[root] -p[password] database_name &amp;lt; database_name.sql&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Usage in&amp;nbsp;Python&lt;/h2&gt;
&lt;h4&gt;Configuring in MySQL in&amp;nbsp;Flask:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Config MySQL&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MYSQL_HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MYSQL_USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;root&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MYSQL_PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;mypassword&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MYSQL_DB&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;flaskappdb&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MYSQL_CURSORCLASS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;DictCursor&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# useful to return queries as dictionaries&lt;/span&gt;

&lt;span class="c1"&gt;# Initialize MySQL&lt;/span&gt;
&lt;span class="n"&gt;mysql&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MySQL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Create cursor:  &lt;code&gt;cursor = mysql.connection.cursor()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Execute a MySQL command:  &lt;code&gt;cursor.execute( command )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Add data:  &lt;code&gt;cursor.execute("INSERT INTO users(name, email, username, password) VALUES(%s, %s, %s, %s)", (x, x, x, x))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Commit to database:  &lt;code&gt;mysql.connection.commit()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Close:  &lt;code&gt;cursor.close()&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Check &lt;span class="caps"&gt;DB&lt;/span&gt; for a&amp;nbsp;login:&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;execute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SELECT * FROM users WHERE username = &lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="err"&gt;`&lt;/span&gt;
&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cursor&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetchone&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Sending e-mails with Python</title><link href="https://janiceto.github.io/programming-notes-blog/email.html" rel="alternate"></link><published>2017-08-04T11:12:00+01:00</published><updated>2017-08-04T11:12:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-04:/programming-notes-blog/email.html</id><summary type="html">&lt;p&gt;In all examples I am using a gmail server to send emails. If you are not using a gmail address you need to insert the respective smtp server and possibly the&amp;nbsp;port.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gmail: smtp.gmail.com, port&amp;nbsp;587&lt;/li&gt;
&lt;li&gt;Hotmail: smtp.live.com, port&amp;nbsp;587&lt;/li&gt;
&lt;li&gt;Outlook: smtp-mail.outlook.com, port&amp;nbsp;587 …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;In all examples I am using a gmail server to send emails. If you are not using a gmail address you need to insert the respective smtp server and possibly the&amp;nbsp;port.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Gmail: smtp.gmail.com, port&amp;nbsp;587&lt;/li&gt;
&lt;li&gt;Hotmail: smtp.live.com, port&amp;nbsp;587&lt;/li&gt;
&lt;li&gt;Outlook: smtp-mail.outlook.com, port&amp;nbsp;587&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Very basic&amp;nbsp;example&lt;/h3&gt;
&lt;p&gt;This is a very barebones example. No subject is added to the&amp;nbsp;email. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sender@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;senderpassword&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# password for sender email&lt;/span&gt;
&lt;span class="n"&gt;receiver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;receiver@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hi there!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="c1"&gt;# smtp server and port for the sender email&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# starts a TLS encrypted connection&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mail sent!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;More complete&amp;nbsp;case&lt;/h3&gt;
&lt;p&gt;This uses the Python email library to help compose the email. You can add the subject to the&amp;nbsp;email. &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.message&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;

&lt;span class="n"&gt;sender&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sender@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;pwd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;senderpassword&amp;#39;&lt;/span&gt;  &lt;span class="c1"&gt;# password for sender email&lt;/span&gt;
&lt;span class="n"&gt;receiver&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;receiver@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Hi there!&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;EmailMessage&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_content&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sender&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;  &lt;span class="c1"&gt;# starts a TLS encrypted connection&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sender&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receiver&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Mail sent!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h3&gt;&lt;span class="caps"&gt;HTML&lt;/span&gt;&amp;nbsp;email&lt;/h3&gt;
&lt;p&gt;Here’s an example of how to create an &lt;span class="caps"&gt;HTML&lt;/span&gt; message with an alternative plain text&amp;nbsp;version.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;

&lt;span class="c1"&gt;# me == my email address&lt;/span&gt;
&lt;span class="c1"&gt;# you == recipient&amp;#39;s email address&lt;/span&gt;
&lt;span class="n"&gt;me&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;my@email.com&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;you&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;your@email.com&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Create message container - the correct MIME type is multipart/alternative.&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alternative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Link&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;me&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;

&lt;span class="c1"&gt;# Create the body of the message (a plain-text and an HTML version).&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hi!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;How are you?&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;Here is the link you wanted:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;http://www.python.org&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;p&amp;gt;Hi!&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;       How are you?&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;       Here is the &amp;lt;a href=&amp;quot;http://www.python.org&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt; you wanted.&lt;/span&gt;
&lt;span class="s2"&gt;    &amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;  &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class="c1"&gt;# Record the MIME types of both parts - text/plain and text/html.&lt;/span&gt;
&lt;span class="n"&gt;part1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;part2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Attach parts into message container.&lt;/span&gt;
&lt;span class="c1"&gt;# According to RFC 2046, the last part of a multipart message, in this case&lt;/span&gt;
&lt;span class="c1"&gt;# the HTML message, is best and preferred.&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# Send the message via local SMTP server.&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# sendmail function takes 3 arguments: sender&amp;#39;s address, recipient&amp;#39;s address&lt;/span&gt;
&lt;span class="c1"&gt;# and message to send - here it is sent as one string.&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;me&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;you&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry><entry><title>Virtual enviroments</title><link href="https://janiceto.github.io/programming-notes-blog/virtual-environments.html" rel="alternate"></link><published>2017-08-02T22:57:00+01:00</published><updated>2018-12-15T01:51:00+00:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-02:/programming-notes-blog/virtual-environments.html</id><summary type="html">&lt;h2&gt;Pipenv&lt;/h2&gt;
&lt;p&gt;Installing Pipenv: &lt;code&gt;$ pip install pipenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To upgrade Pipenv at any time run: &lt;code&gt;$ pip install --upgrade pipenv&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Installing packages for your&amp;nbsp;project&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; myproject
$ pipenv install requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pipenv will install the excellent Requests library and create a Pipfile for you in your project’s directory. The Pipfile is used to …&lt;/p&gt;</summary><content type="html">&lt;h2&gt;Pipenv&lt;/h2&gt;
&lt;p&gt;Installing Pipenv: &lt;code&gt;$ pip install pipenv&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To upgrade Pipenv at any time run: &lt;code&gt;$ pip install --upgrade pipenv&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Installing packages for your&amp;nbsp;project&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; myproject
$ pipenv install requests
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pipenv will install the excellent Requests library and create a Pipfile for you in your project’s directory. The Pipfile is used to track which dependencies your project needs in case you need to re-install them, such as when you share your project with&amp;nbsp;others.&lt;/p&gt;
&lt;h3&gt;Using installed&amp;nbsp;packages&lt;/h3&gt;
&lt;p&gt;Import your packages normally in your scripts. Then you can run the script using &lt;code&gt;pipenv run&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pipenv run python main.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Using &lt;code&gt;$ pipenv run&lt;/code&gt; ensures that your installed packages are available to your script. It’s also possible to spawn a new shell that ensures all commands have access to your installed packages with &lt;code&gt;$ pipenv shell&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Documentation: &lt;a href="https://pipenv.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Virtual environment using &lt;strong&gt;virtualenv&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Install: &lt;code&gt;$ pip install virtualenv&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;Create a new virtual&amp;nbsp;enviroment:&lt;/h3&gt;
&lt;p&gt;My prefered method is to create the environment in the respective project folder and naming it &lt;strong&gt;venv&lt;/strong&gt;. Another alternative is to have a folder where you place all your virtualenvironments and name them according to their respective&amp;nbsp;project.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span class="nb"&gt;cd&lt;/span&gt; desired_folder
$ virtualenv venv 
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;To activate the&amp;nbsp;environment:&lt;/h3&gt;
&lt;p&gt;(Windows) &lt;code&gt;$ venv/Scripts/activate.bat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Linux) &lt;code&gt;$ source venv/bin/activate&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;Once activated you can normaly use &lt;strong&gt;pip&lt;/strong&gt; to install packages in this environment: &lt;code&gt;$ pip install blabla&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;You can see the list of installed packages using: &lt;code&gt;$ pip list&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To transfer the environment to another machine you can use: &lt;code&gt;$ pip freeze &amp;gt; requirements.txt&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;This will create a requirements.txt file, which contains a simple list of all the packages in the current environment, and their respective versions. Later, if you need to re-create the environment, install the same packages using the same versions: &lt;code&gt;$ pip install -r requirements.txt&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;To deactivate the&amp;nbsp;environment:&lt;/h3&gt;
&lt;p&gt;(Windows) &lt;code&gt;$ venv/Scripts/deactivate.bat&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;(Linux) &lt;code&gt;$ deactivate&lt;/code&gt;&lt;/p&gt;</content></entry><entry><title>Imports in Python</title><link href="https://janiceto.github.io/programming-notes-blog/imports.html" rel="alternate"></link><published>2017-08-02T18:18:00+01:00</published><updated>2017-08-02T18:18:00+01:00</updated><author><name>José Aniceto</name></author><id>tag:janiceto.github.io,2017-08-02:/programming-notes-blog/imports.html</id><summary type="html">&lt;h3&gt;Namespace&lt;/h3&gt;
&lt;p&gt;For example, you might be writing some code that has a function called &lt;code&gt;fun()&lt;/code&gt; and there is another module available, which also has a function with the name &lt;code&gt;fun()&lt;/code&gt;. Now the interpreter has no way of knowing which version of &lt;code&gt;fun()&lt;/code&gt; function you are referring within your&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Namespace …&lt;/strong&gt;&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Namespace&lt;/h3&gt;
&lt;p&gt;For example, you might be writing some code that has a function called &lt;code&gt;fun()&lt;/code&gt; and there is another module available, which also has a function with the name &lt;code&gt;fun()&lt;/code&gt;. Now the interpreter has no way of knowing which version of &lt;code&gt;fun()&lt;/code&gt; function you are referring within your&amp;nbsp;code.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Namespace&lt;/strong&gt; is designed to overcome this difficulty and is used to differentiate functions, classes, variables etc. with the same name, available in different&amp;nbsp;modules.&lt;/p&gt;
&lt;h3&gt;Module vs.&amp;nbsp;Package&lt;/h3&gt;
&lt;p&gt;A Python &lt;strong&gt;module&lt;/strong&gt; is simply a Python source file, which can expose classes, functions and global variables. When imported from another Python source file, the file name is sometimes treated as a&amp;nbsp;namespace.&lt;/p&gt;
&lt;p&gt;A Python &lt;strong&gt;package&lt;/strong&gt; is simply a directory of Python&amp;nbsp;module(s).&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;__init__.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;__init__.py&lt;/code&gt; file is the first thing that gets executed when a package is&amp;nbsp;loaded.&lt;/p&gt;
&lt;p&gt;More on the &lt;code&gt;__init__.py&lt;/code&gt; file in the &lt;strong&gt;Packages (with the &lt;code&gt;__init__.py&lt;/code&gt; file) and Relative Imports&lt;/strong&gt;&amp;nbsp;section.&lt;/p&gt;
&lt;h3&gt;Relative vs. Absolute&amp;nbsp;Imports&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Relative imports&lt;/strong&gt; - specific location of the modules to be imported are relative to the current&amp;nbsp;package.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Absolute imports&lt;/strong&gt; - an import where you fully specify the location of the entities being&amp;nbsp;imported.&lt;/p&gt;
&lt;h2&gt;Regular&amp;nbsp;Imports&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Assume the following file&amp;nbsp;structure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someDir/
    main.py
    siblingModule.py
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The following shows different ways to import the module &lt;code&gt;siblingModule.py&lt;/code&gt; into &lt;code&gt;main.py&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# siblingModule.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;siblingModuleFun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from siblingModuleFun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;siblingModuleFunTwo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from siblingModuleFunTwo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="c1"&gt;# Provides access to all exposed functions, global variables, classes, etc.&lt;/span&gt;
&lt;span class="c1"&gt;# We need to specify the namespace explicitly, hence we always have to prepend the module name.&lt;/span&gt;
&lt;span class="c1"&gt;# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;siblingModule&lt;/span&gt;

&lt;span class="n"&gt;siblingModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siblingModuleFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFun&lt;/span&gt;
&lt;span class="n"&gt;siblingModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siblingModuleFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFunTwo&lt;/span&gt;

&lt;span class="c1"&gt;# If siblingModule is already defined in current namespace, we can use the &amp;#39;as&amp;#39; keyword to give the module a different namespace identifier.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;siblingModule&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;sibMod&lt;/span&gt;

&lt;span class="n"&gt;sibMod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siblingModuleFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFun&lt;/span&gt;
&lt;span class="n"&gt;sibMod&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siblingModuleFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFunTwo&lt;/span&gt;

&lt;span class="c1"&gt;# Only imports specific entities from a module.&lt;/span&gt;
&lt;span class="c1"&gt;# Allows to access the entity without prepending module name.&lt;/span&gt;
&lt;span class="c1"&gt;# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module name to help as reach the function.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;siblingModule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;siblingModuleFun&lt;/span&gt;

&lt;span class="n"&gt;siblingModuleFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFun&lt;/span&gt;

&lt;span class="n"&gt;siblingModuleFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Error&lt;/span&gt;
&lt;span class="n"&gt;siblingModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;siblingModuleFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Error&lt;/span&gt;

&lt;span class="c1"&gt;# Both &amp;#39;from siblingModule import *&amp;#39; and &amp;#39;import siblingModule&amp;#39; import all entities from the module.&lt;/span&gt;
&lt;span class="c1"&gt;# With &amp;#39;import siblingModule&amp;#39; you are allowed to have multiple function with the same name, from different modules.&lt;/span&gt;
&lt;span class="c1"&gt;# With &amp;#39;from siblingModule import *&amp;#39; the functions with the same name will overwrite any function from the imported module(s).&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;siblingModule&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;siblingModuleFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFun&lt;/span&gt;
&lt;span class="n"&gt;siblingModuleFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from siblingModuleFunTwo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Local&amp;nbsp;Imports&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Importing modules at the top of the script, is importing the module into the global scope, which means that any functions will be able to use&amp;nbsp;it. &lt;/p&gt;
&lt;p&gt;A &lt;strong&gt;local import&lt;/strong&gt; is when you import a module into local scope, which means that it exists only within the block that it was loaded&amp;nbsp;in.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;globalModule&lt;/span&gt;  &lt;span class="c1"&gt;# Global scope&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funOne&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c1"&gt;# Local scope&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;localModule&lt;/span&gt;

    &lt;span class="n"&gt;globalModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;localModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;funTwo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;

    &lt;span class="n"&gt;globalModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;localModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Error&lt;/span&gt;

&lt;span class="n"&gt;globalModule&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someFunction&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Optional&amp;nbsp;Imports&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Optional imports&lt;/strong&gt; are used when you have a preferred module or package that you want to use, but you also want a fallback in case it something goes&amp;nbsp;wrong.&lt;/p&gt;
&lt;p&gt;You might use &lt;strong&gt;optional imports&lt;/strong&gt; to support multiple operating system, resolve issues between different versions,&amp;nbsp;etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="c1"&gt;# Import &amp;#39;someModuleA&amp;#39; that is only available in Windows&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;someModuleA&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="c1"&gt;# Import &amp;#39;someModuleB&amp;#39; that is only available in Linux&lt;/span&gt;
        &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;someModuleB&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;ImportError&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Circular&amp;nbsp;Imports&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Circular imports&lt;/strong&gt; happen when you create two modules that import each&amp;nbsp;other.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;B&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;Afun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from Afun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Bfun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;Afun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# B.py&lt;/span&gt;

import A

def Bfun&lt;span class="o"&gt;()&lt;/span&gt;:
    print&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from Bfun&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;

A.Afun&lt;span class="o"&gt;()&lt;/span&gt;
Bfun&lt;span class="o"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you run either of these modules, you should receive an &lt;code&gt;AttributeError&lt;/code&gt;. This happens because both modules are attempting to import each other. Basically what’s happening here is that &lt;code&gt;A.py&lt;/code&gt; is trying to import &lt;code&gt;B.py&lt;/code&gt;, but it can’t do that because &lt;code&gt;B.py&lt;/code&gt; is attempting to import &lt;code&gt;A.py&lt;/code&gt;, which is already being executed. To prevent this kind of thing from happening, refactor your&amp;nbsp;code.&lt;/p&gt;
&lt;h2&gt;Shadowed&amp;nbsp;imports&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Shadow imports&lt;/strong&gt; happen when the programmer creates a module with the same name as a standard Python&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;In this case, create a file named &lt;code&gt;math.py&lt;/code&gt; and put the following code inside&amp;nbsp;it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;math&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;square_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sqrt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;square_root&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;72&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;When you run a Python script, the first place Python looks for a module called &lt;code&gt;math&lt;/code&gt; is in the currently running script’s directory. In this case, it finds the module we’re running and tries to use that. But our module doesn’t have a function or attribute called &lt;code&gt;sqrt&lt;/code&gt;, so an &lt;code&gt;AttributeError&lt;/code&gt; is&amp;nbsp;raised.&lt;/p&gt;
&lt;h2&gt;Packages (without the &lt;code&gt;__init__.py&lt;/code&gt; file)&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;Assume the following file&amp;nbsp;structure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someDir/
    main.py
    subModules/
        subA.py
        subSubModules/
            subSubA.py
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# subA.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subAFun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subAFunTwo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# subSubA.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subSubAFun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subSubAFun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subSubAFunTwo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subSubAFunTwo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="c1"&gt;# Provides access to all exposed functions, global variables, public classes, etc. in a module &amp;#39;subA&amp;#39;.&lt;/span&gt;
&lt;span class="c1"&gt;# We need to specify the namespace explicitly, hence we have to prepend the package name and/or module name.&lt;/span&gt;
&lt;span class="c1"&gt;# Since we are not using the current files namespace, it allows us to have multiple function with the same name, from different modules/packages.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subModules.subA&lt;/span&gt;

&lt;span class="n"&gt;subModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFun&lt;/span&gt;
&lt;span class="n"&gt;subModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFunTwo&lt;/span&gt;

&lt;span class="c1"&gt;# Only imports specific entities from a module.&lt;/span&gt;
&lt;span class="c1"&gt;# Allows to access the entity without prepending module name.&lt;/span&gt;
&lt;span class="c1"&gt;# But the downside is that we are allowed to overwrite (not override) the function name and we cannot use the module/package name to help as reach the function.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subModules.subA&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subAFun&lt;/span&gt;

&lt;span class="n"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFun&lt;/span&gt;
&lt;span class="n"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Error&lt;/span&gt;

&lt;span class="c1"&gt;# To me, this is the most clear way of import modules from subdirectories, and it allows to differentiate between namespaces.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subModules&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subA&lt;/span&gt;

&lt;span class="n"&gt;subA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFun&lt;/span&gt;
&lt;span class="n"&gt;subA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFunTwo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Importing all entities from a sub-submodule.&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subModules.subSubModules.subSubA&lt;/span&gt;

&lt;span class="n"&gt;subModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFun&lt;/span&gt;
&lt;span class="n"&gt;subModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubModules&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFunTwo&lt;/span&gt;

&lt;span class="c1"&gt;# Importing a specific entity from a sub-submodule.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subModules.subSubModules.subSubA&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subSubAFun&lt;/span&gt;

&lt;span class="n"&gt;subSubAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFun&lt;/span&gt;
&lt;span class="n"&gt;subSubAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Error&lt;/span&gt;

&lt;span class="c1"&gt;# Imports all entities.&lt;/span&gt;
&lt;span class="c1"&gt;# Allows to differentiate between namespaces.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;subModules.subSubModules&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;subSubA&lt;/span&gt;

&lt;span class="n"&gt;subSubA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFun&lt;/span&gt;
&lt;span class="n"&gt;subSubA&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFunTwo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Packages (with the &lt;code&gt;__init__.py&lt;/code&gt; file) and Relative&amp;nbsp;Imports&lt;/h2&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;code&gt;__init__.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;There are two main reasons for using the &lt;code&gt;__init__.py&lt;/code&gt; file.&lt;/p&gt;
&lt;h5&gt;1. For convenience,  other users will not need to know your module&amp;#8217;s exact location in the package&amp;nbsp;hierarchy.&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someDir/
    __init__.py
    A.py
    B.py
    ...
    Z.py
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# A.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# __init__.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;A&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;B&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;Z&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then others can call &lt;code&gt;add(x, y)&lt;/code&gt; , without knowing &lt;code&gt;A.py&lt;/code&gt; exists&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;someDir&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Without &lt;code&gt;__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;someDir.A&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;2. If you want something to be initialized as soon as the package gets&amp;nbsp;executed.&lt;/h5&gt;
&lt;h3&gt;Relative&amp;nbsp;Imports&lt;/h3&gt;
&lt;p&gt;Note that relative imports are not specific to &lt;code&gt;__init__.py&lt;/code&gt; files.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;'__main__'&lt;/code&gt; is the name of the scope in which top-level code executes. A module’s&lt;code&gt;__name__&lt;/code&gt; variable is set to &lt;code&gt;'__main__'&lt;/code&gt; when read from standard input, a script, or from an interactive&amp;nbsp;prompt.&lt;/p&gt;
&lt;p&gt;Relative imports use the module&amp;#8217;s &lt;code&gt;__name__&lt;/code&gt; variable to determine where it is in a package.  When you use a relative import, such as &lt;code&gt;from ..someDir import someModule&lt;/code&gt;, the two dots indicate to step up a level in the package hierarchy.  For instance, if your current module is &lt;code&gt;moduleA&lt;/code&gt;, then it&amp;#8217;s &lt;code&gt;__name__&lt;/code&gt; variable is &lt;code&gt;someDir.subDir.moduleA&lt;/code&gt;. Then, writing &lt;code&gt;from ..moduleB import *&lt;/code&gt; in &lt;code&gt;moduleA&lt;/code&gt; means, go up a directory, and import everything from &lt;code&gt;moduleB&lt;/code&gt;. &lt;code&gt;moduleB&lt;/code&gt; would be found on the same level as the &lt;code&gt;subDir&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;However, if your module&amp;#8217;s name is &lt;code&gt;__main__&lt;/code&gt;,  you cannot use &lt;code&gt;from ..somePath import moduleName&lt;/code&gt; statements.&lt;/p&gt;
&lt;h3&gt;Loading Modules with the Help of the &lt;code&gt;init.py&lt;/code&gt; File&lt;/h3&gt;
&lt;p&gt;Assume the following file&amp;nbsp;structure.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;someDir/
    main.py
    subModules/
        __init__.py
        subA.py
        subSubModules/
            __init__.py
            subSubA.py
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# subA.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subAFun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subAFunTwo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# subSubA.py&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subSubAFun&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subSubAFun&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;subSubAFunTwo&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Hello from subSubAFunTwo&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# __init__.py from subDir&lt;/span&gt;

&lt;span class="c1"&gt;# Adds &amp;#39;subAFun()&amp;#39; and &amp;#39;subAFunTwo()&amp;#39; to the &amp;#39;subDir&amp;#39; namespace &lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.subA&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# The following two import statement do the same thing, they add &amp;#39;subSubAFun()&amp;#39; and &amp;#39;subSubAFunTwo()&amp;#39; to the &amp;#39;subDir&amp;#39; namespace. The first one assumes &amp;#39;__init__.py&amp;#39; is empty in &amp;#39;subSubDir&amp;#39;, and the second one, assumes &amp;#39;__init__.py&amp;#39; in &amp;#39;subSubDir&amp;#39; contains &amp;#39;from .subSubA import *&amp;#39;.&lt;/span&gt;

&lt;span class="c1"&gt;# Assumes &amp;#39;__init__.py&amp;#39; is empty in &amp;#39;subSubDir&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Adds &amp;#39;subSubAFun()&amp;#39; and &amp;#39;subSubAFunTwo()&amp;#39; to the &amp;#39;subDir&amp;#39; namespace&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.subSubDir.subSubA&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="c1"&gt;# Assumes &amp;#39;__init__.py&amp;#39; in &amp;#39;subSubDir&amp;#39; has &amp;#39;from .subSubA import *&amp;#39;&lt;/span&gt;
&lt;span class="c1"&gt;# Adds &amp;#39;subSubAFun()&amp;#39; and &amp;#39;subSubAFunTwo()&amp;#39; to the &amp;#39;subDir&amp;#39; namespace&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.subSubDir&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# __init__.py from subSubDir&lt;/span&gt;

&lt;span class="c1"&gt;# Adds &amp;#39;subSubAFun()&amp;#39; and &amp;#39;subSubAFunTwo()&amp;#39; to the &amp;#39;subSubDir&amp;#39; namespace&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.subSubA&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# main.py&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;subDir&lt;/span&gt;

&lt;span class="n"&gt;subDir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFun&lt;/span&gt;
&lt;span class="n"&gt;subDir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFunTwo&lt;/span&gt;
&lt;span class="n"&gt;subDir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFun&lt;/span&gt;
&lt;span class="n"&gt;subDir&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subSubAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subSubAFunTwo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;From the above, we can observe that it&amp;#8217;s almost as though &lt;code&gt;__init__.py&lt;/code&gt; converts a package into a module, or more correctly makes a package behave like a&amp;nbsp;module.&lt;/p&gt;
&lt;p&gt;To access functions of &lt;code&gt;subA.py&lt;/code&gt; in &lt;code&gt;subSubA.py&lt;/code&gt;.
Only works if the &lt;code&gt;__name__&lt;/code&gt; variable of &lt;code&gt;subSubA.py&lt;/code&gt; is not &lt;code&gt;'__main__'&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# subSubA.py&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;..subA&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;

&lt;span class="n"&gt;subAFun&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFun&lt;/span&gt;
&lt;span class="n"&gt;subAFunTwo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="c1"&gt;# Hello from subAFunTwo&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content></entry></feed>